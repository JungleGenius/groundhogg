<?php

namespace Groundhogg\DB;

if ( ! defined( 'ABSPATH' ) ) exit;

/**
 * Superlinks DB
 *
 * Store and manipulate superlinks
 *
 * @package     Includes
 * @subpackage  includes/DB
 * @author      Adrian Tobey <info@groundhogg.io>
 * @copyright   Copyright (c) 2018, Groundhogg Inc.
 * @license     https://opensource.org/licenses/GPL-3.0 GNU Public License v3
 * @since       File available since Release 0.1
 */
class Superlinks extends DB  {

    /**
     * Get the DB suffix
     *
     * @return string
     */
    public function get_db_suffix()
    {
        return 'gh_superlinks';
    }

    /**
     * Get the DB primary key
     *
     * @return string
     */
    public function get_primary_key()
    {
        return 'ID';
    }

    /**
     * Get the DB version
     *
     * @return mixed
     */
    public function get_db_version()
    {
        return '2.0';
    }

    /**
     * Get the object type we're inserting/updateing/deleting.
     *
     * @return string
     */
    public function get_object_type()
    {
        return 'superlink';
    }

    /**
     * Get columns and formats
     *
     * @access  public
     * @since   2.1
     */
    public function get_columns() {
        return array(
            'ID'            => '%d',
            'name'          => '%s',
            'target'        => '%s',
            'tags'          => '%s',
            'clicks'        => '%d',
        );
    }

    /**
     * Get default column values
     *
     * @access  public
     * @since   2.1
     */
    public function get_column_defaults() {
        return array(
            'ID'            => 0,
            'name'          => '',
            'target'        => '',
            'tags'          => '',
            'clicks'        => 0,
        );
    }

    /**
     * Given a data set, if tags are present make sure the end up serialized
     *
     * @param array $data
     * @return array
     */
    private function serialize_tags( $data = array() )
    {
        if ( isset( $data[ 'tags' ] ) ){
            $data[ 'tags' ] = maybe_serialize( $data[ 'tags' ] );
        }

        return $data;
    }

    /**
     * Given a data set, if tags are present make sure they end up unserialized
     *
     * @param null $obj
     * @return null
     */
    private function unserialize_tags( $obj = null )
    {
        if ( is_object( $obj ) && isset( $obj->tags ) ){
            $obj->tags = maybe_unserialize( $obj->tags );
        }

        return $obj;
    }

    /**
     * Add a superlink
     *
     * @access  public
     * @since   2.1
     */
    public function add( $data = array() )
    {
        $args = wp_parse_args(
            $data,
            $this->get_column_defaults()
        );

        if ( empty( $args[ 'target' ] ) ){
            return false;
        }

        $args = $this->serialize_tags( $args );

        return $this->insert( $args );
    }

    /**
     * Update a superlink
     *
     * @access  public
     * @since   2.1
     * @return  bool
     */
    public function update( $row_id, $data = array(), $where = '' )
    {
        $data = $this->serialize_tags( $data );
        $result = parent::update( $row_id, $data, $where );
        return $result;
    }

    /**
     * Retrieves the superlink by the ID.
     *
     * @param $id
     *
     * @return mixed
     */
    public function get_superlink( $id )
    {
        return $this->get_superlink_by( 'ID', $id );
    }

    /**
     * Retrieves a single superlink from the database
     *
     * @access public
     * @since  2.3
     * @param  string $field id or superlink
     * @param  mixed  $value  The Customer ID or superlink to search
     * @return mixed          Upon success, an object of the superlink. Upon failure, NULL
     */
    public function get_superlink_by( $field = 'ID', $value = 0 ) {

        if ( empty( $field ) || empty( $value ) ) {
            return NULL;
        }

        return $this->unserialize_tags( parent::get_by( $field, $value ) );
    }

    /**
     * Search for superlinks
     *
     * @param string $s
     * @return array
     */
    public function search($s = '')
    {
        $results = parent::search($s); // TODO: Change the autogenerated stub
        if ( is_array( $results ) ){
            $results = array_map( array( $this, 'unserialize_tags' ), $results );
        }
        return $results;
    }


    /**
     * Retrieve Superlinks from the database
     *
     * @access  public
     * @since   2.1
     */
    public function get_superlinks( $data = array() ) {

        global  $wpdb;

        if ( ! is_array( $data ) )
            return false;

        $data = (array) $data;

        // Initialise column format array
        $column_formats = $this->get_columns();

        // Force fields to lower case
        $data = array_change_key_case( $data );

        // White list columns
        $data = array_intersect_key( $data, $column_formats );

        $where = $this->generate_where( $data );

        if ( empty( $where ) ){
            $where = "1=1";
        }

        $results = $wpdb->get_results( "SELECT * FROM $this->table_name WHERE $where" );

        if ( is_array( $results ) ){
            $results = array_map( array( $this, 'unserialize_tags' ), $results );
        }

        return $results;
    }

    /**
     * Count the total number of superlinks in the database
     *
     * @access  public
     * @since   2.1
     */
    public function count( $args = array() )
    {
        return count( $this->get_superlinks( $args ) );
    }

    /**
     * Create the table
     *
     * @access  public
     * @since   2.1
     */
    public function create_table() {

        global $wpdb;

        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');

        $sql = "CREATE TABLE " . $this->table_name . " (
		ID bigint(20) unsigned NOT NULL AUTO_INCREMENT,
        name mediumtext NOT NULL,
        target mediumtext NOT NULL,
        tags longtext NOT NULL,
        clicks bigint(20) NOT NULL,
        PRIMARY KEY  (ID)
		) {$this->get_charset_collate()};";

        dbDelta( $sql );

        update_option( $this->table_name . '_db_version', $this->version );
    }
}