<?php
namespace Groundhogg\DB;

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit;

define( 'GROUNDHOGG_FUNNEL_EVENT', 1 );
define( 'GROUNDHOGG_BROADCAST_EVENT', 2 );
define( 'GROUNDHOGG_EMAIL_NOTIFICATION_EVENT', 3 );
define( 'GROUNDHOGG_SMS_NOTIFICATION_EVENT', 4 );

/**
 * Events DB
 *
 * Store automation events
 *
 * @package     Includes
 * @subpackage  includes/DB
 * @author      Adrian Tobey <info@groundhogg.io>
 * @copyright   Copyright (c) 2018, Groundhogg Inc.
 * @license     https://opensource.org/licenses/GPL-3.0 GNU Public License v3
 * @since       File available since Release 0.1
 */
class Events extends DB  {

    /**
     * Get the DB suffix
     *
     * @return string
     */
    public function get_db_suffix()
    {
        return 'gh_events';
    }

    /**
     * Get the DB primary key
     *
     * @return string
     */
    public function get_primary_key()
    {
        return 'ID';
    }

    /**
     * Get the DB version
     *
     * @return mixed
     */
    public function get_db_version()
    {
        return '2.0';
    }

    /**
     * Get the object type we're inserting/updateing/deleting.
     *
     * @return string
     */
    public function get_object_type()
    {
        return 'event';
    }

    /**
     * Clean up DB events when this happens.
     */
    protected function add_additional_actions()
    {
        add_action( 'groundhogg/db/post_delete/contact', [ $this, 'contact_deleted' ] );
        add_action( 'groundhogg/db/post_delete/funnel',  [ $this, 'funnel_deleted' ] );
        add_action( 'groundhogg/db/post_delete/step',    [ $this, 'step_deleted' ] );
        parent::add_additional_actions(); // TODO: Change the autogenerated stub
    }

    /**
     * Get columns and formats
     *
     * @access  public
     * @since   2.1
     */
    public function get_columns() {
        return array(
            'ID'            => '%d',
            'time'          => '%d',
            'funnel_id'     => '%d',
            'step_id'       => '%d',
            'contact_id'    => '%d',
            'event_type'    => '%d',
            'failure_reason'=> '%s',
            'status'        => '%s',
        );
    }

    /**
     * Get default column values
     *
     * @access  public
     * @since   2.1
     */
    public function get_column_defaults() {
        return array(
            'ID'            => 0,
            'time'          => time(),
            'funnel_id'     => 0,
            'step_id'       => 0,
            'contact_id'    => 0,
            'event_type'    => GROUNDHOGG_FUNNEL_EVENT,
            'failure_reason'=> '',
            'status'        => 'waiting',
        );
    }

    /**
     * Add a activity
     *
     * @access  public
     * @since   2.1
     */
    public function add( $data = array() ) {

        $args = wp_parse_args(
            $data,
            $this->get_column_defaults()
        );

        if( empty( $args['time'] ) ) {
            return false;
        }

        return $this->insert( $args );
    }

    /**
     * Get all the queued events
     */
    public function get_queued_events()
    {
        global  $wpdb;

        $results = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT * FROM $this->table_name WHERE time <= %d AND status = %s"
            , time(), 'waiting' )
        );

        return $results;
    }

    /**
     * Retrieve activity like the given args
     *
     * @access  public
     * @since   2.1
     */
    public function get_events( $data = array(), $order = 'time' ) {

        global  $wpdb;

        if ( ! is_array( $data ) )
            return false;

        $other = '';

        /* allow for special handling of time based search */
        if ( isset( $data[ 'start' ] ) ){

            $other .= sprintf( " AND time >= %d", $data[ 'start' ] );
            unset( $data[ 'start' ] );
        }

        /* allow for special handling of time based search */
        if ( isset( $data[ 'end' ] ) ){

            $other .= sprintf( " AND time <= %d", $data[ 'end' ] );
            unset( $data[ 'end' ] );
        }

        // Initialise column format array
        $column_formats = $this->get_columns();

        // Force fields to lower case
        $data = array_change_key_case( $data );

        // White list columns
        $data = array_intersect_key( $data, $column_formats );

        $where = $this->generate_where( $data );

        if ( empty( $where ) ){

            $where = "1=1";

        }

        $results = $wpdb->get_results( "SELECT * FROM $this->table_name WHERE $where $other ORDER BY $order DESC" );

        return $results;

    }

    /**
     * Helper function to bulk delete events in the event associated things happen.
     *
     * @param array $args
     * @return false|int
     */
    public function bulk_delete( $data = array(), $where= array( '%d' ) )
    {
        global $wpdb;

        $column_formats = $this->get_columns();
        $data = array_intersect_key( $data, $column_formats );

        $result = $wpdb->delete( $this->table_name, $data );

        return $result;
    }

    /**
     * Delete events for a contact that was just deleted...
     *
     * @param $id
     * @return false|int
     */
    public function contact_deleted( $id ){
        return $this->bulk_delete(  array( 'contact_id' => $id ) );
    }

    /**
     * Delete events for a funnel that was just deleted...
     *
     * @param $id
     * @return false|int
     */
    public function funnel_deleted( $id ){
        return $this->bulk_delete(  array( 'funnel_id' => $id ) );
    }


    /**
     * Delete events for a step that was just deleted...
     *
     * @param $id
     * @return false|int
     */
    public function step_deleted( $id ){
        return $this->bulk_delete(  array( 'step_id' => $id ) );
    }


    /**
     * Count the number of rows
     *
     * @param array $args
     * @return int
     */
    public function count( $args = array() )
    {

        return count( $this->get_events( $args ) );

    }

    /**
     * Check to see if activity like the object supplied exists
     *
     * @access  public
     * @since   2.1
     */
    public function event_exists( $data = array() ) {

        $results = $this->get_events( $data );

        return ! empty( $results );

    }

    /**
     * Create the table
     *
     * @access  public
     * @since   2.1
     */
    public function create_table() {

        global $wpdb;

        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');

        $sql = "CREATE TABLE " . $this->table_name . " (
        ID bigint(20) unsigned NOT NULL AUTO_INCREMENT,
        time bigint(20) unsigned NOT NULL,
        contact_id bigint(20) unsigned NOT NULL,
        funnel_id bigint(20) unsigned NOT NULL,
        step_id bigint(20) unsigned NOT NULL,
        event_type int unsigned NOT NULL,
        failure_reason tinytext NOT NULL, 
        status varchar(20) NOT NULL,
        PRIMARY KEY (ID),
        KEY time (time),
        KEY contact_id (contact_id),
        KEY funnel_id (funnel_id),
        KEY step_id (step_id)
		) {$this->get_charset_collate()};";

        dbDelta( $sql );

        update_option( $this->table_name . '_db_version', $this->version );
    }
}