($=>{const{modal:modal,errorDialog:errorDialog,loadingDots:loadingDots,select:select,uuid:uuid,addMediaToBasicTinyMCE:addMediaToBasicTinyMCE,tinymceElement:tinymceElement,input:input,dialog:dialog,isValidEmail:isValidEmail,textarea:textarea}=Groundhogg.element;const{contacts:ContactsStore}=Groundhogg.stores;const{post:post,routes:routes}=Groundhogg.api;const{tagPicker:tagPicker}=Groundhogg.pickers;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;const{formatNumber:formatNumber,formatTime:formatTime,formatDate:formatDate,formatDateTime:formatDateTime}=Groundhogg.formatting;const selectContactModal=({onSelect:onSelect=(()=>{}),exclude:exclude=[]})=>{let search,timeout,results;const form=()=>`\n\t\t  <div id="search-form">\n\t\t\t  ${input({id:"contact-search",value:search,type:"search",placeholder:__("Search by name or email","groundhogg")})}\n\t\t  </div>\n\t\t  <div id="search-results">\n\t\t\t  <table>\n\t\t\t\t  <tbody></tbody>\n\t\t\t  </table>\n\t\t  </div>`;const{close:close,setContent:setContent}=modal({content:form(),dialogClasses:"no-padding"});const renderResult=contact=>`\n\t\t  <tr data-id="${contact.ID}">\n\t\t\t  <td><img src="${contact.data.gravatar}" alt="${contact.data.full_name}"></td>\n\t\t\t  <td><b>${contact.data.full_name}</b><br/>${contact.data.email}</td>\n\t\t\t  <td>\n\t\t\t\t  <button class="select-contact gh-button primary text" data-id="${contact.ID}">${__("Select")}</button>\n\t\t\t  </td>\n\t\t  </tr>`;const noResults=()=>`\n\t\t  <tr>\n          <td colspan="3"><p>${__("No contacts match that search...","groundhogg")}</p></td>\n\t\t  </tr>`;const onMount=()=>{const setSearchResults=results=>{if(!results.length){$("#search-results table tbody").html(noResults());return}$("#search-results table tbody").html(results.map((r=>renderResult(r))).join(""));$("#search-results tr, .select-contact").on("click",(e=>{close();onSelect(ContactsStore.get(parseInt(e.currentTarget.dataset.id)))}))};const getResults=()=>{ContactsStore.fetchItems({search:search,exclude:exclude,limit:10}).then((items=>{results=items;setSearchResults(results)}))};$("#contact-search").on("input change",(e=>{search=e.target.value;if(timeout){clearTimeout(timeout)}setTimeout((()=>{getResults()}))})).focus();if(ContactsStore.hasItems()){setSearchResults(ContactsStore.getItems())}else{getResults()}};onMount()};const addContactModal=({prefix:prefix="quick-add",onCreate:onCreate=(()=>{})})=>{const form=()=>`\t<div class="gh-rows-and-columns">\n\t\t\t\t<div class="gh-row">\n\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t<label for="${prefix}-first-name">${__("First Name","groundhogg")}</label>\n\t\t\t\t\t\t${input({id:`${prefix}-first-name`,name:"first_name",placeholder:"John"})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t<label for="${prefix}-last-name">${__("Last Name","groundhogg")}</label>\n\t\t\t\t\t\t${input({id:`${prefix}-last-name`,name:"last_name",placeholder:"Doe"})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="gh-row">\n\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t<label for="${prefix}-email">${__("Email Address","groundhogg")}</label>\n\t\t\t\t\t\t${input({id:`${prefix}-email`,name:"email",placeholder:"john@example.com",required:true})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="gh-row phone">\n\t\t\t\t\t<div class="cghol">\n\t\t\t\t\t\t<label for="quick-edit-primary-phone">${__("Primary Phone","groundhogg")}</label>\n\t\t\t\t\t\t${input({type:"tel",id:`${prefix}-primary-phone`,name:"primary_phone"})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="primary-phone-ext">\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\tfor="quick-edit-primary-phone-extension">${_x("Ext.","phone number extension","groundhogg")}</label>\n\t\t\t\t\t\t${input({type:"number",id:`${prefix}-primary-phone-ext`,name:"primary_phone_extension"})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="gh-row">\n\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t<label for="quick-edit-mobile-phone">${__("Mobile Phone","groundhogg")}</label>\n\t\t\t\t\t\t${input({type:"tel",id:`${prefix}-mobile-phone`,name:"mobile_phone"})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="gh-row">\n\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t<label for="${prefix}-tags">${__("Tags","groundhogg")}</label>\n\t\t\t\t\t\t${select({id:`${prefix}-tags`,multiple:true,dataPlaceholder:__("Type to select tags...","groundhogg"),style:{width:"100%"}})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="gh-row">\n\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t<button id="${prefix}-create" class="gh-button primary">\n\t\t\t\t\t\t\t${__("Create Contact","groundhogg")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>`;const onMount=({close:close,setContent:setContent})=>{let payload={data:{},meta:{}};const setPayload=data=>{payload={...payload,...data}};$(`#${prefix}-create`).on("click",(({target:target})=>{if(!payload.data.email||!isValidEmail(payload.data.email)){errorDialog({message:__("A valid email is required!","groundhogg")});return}$(target).prop("disabled",true);const{stop:stop}=loadingDots(`#${prefix}-quick-add-button`);ContactsStore.post(payload).then((c=>{stop();close();onCreate(c)}))}));$(`\n      #${prefix}-first-name,\n      #${prefix}-last-name,\n      #${prefix}-email`).on("change input",(({target:target})=>{setPayload({data:{...payload.data,[target.name]:target.value}})}));$(`\n      #${prefix}-primary-phone,\n      #${prefix}-primary-phone-ext,\n      #${prefix}-mobile-phone`).on("change input",(({target:target})=>{setPayload({meta:{...payload.meta,[target.name]:target.value}})}));tagPicker(`#${prefix}-tags`).on("change",(({target:target})=>{setPayload({tags:$(target).val()})}))};return modal({content:form(),onOpen:onMount})};const emailModal=props=>{const email={to:[],from_name:"",from_email:"",cc:[],bcc:[],subject:"",content:"",...props};let showCc=email.cc.length>0;let showBcc=email.bcc.length>0;const template=()=>`\n\t\t  <div class="gh-rows-and-columns">\n\t\t\t  <div class="gh-row">\n\t\t\t\t  <label>${__("To:")}</label>\n\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t  <select id="recipients"></select>\n\t\t\t\t  </div>\n\t\t\t\t  ${!showCc?`<a id="send-email-cc" href="#">${__("Cc")}</a>`:""}\n\t\t\t\t  ${!showBcc?`<a id="send-email-bcc" href="#">${__("Bcc")}</a>`:""}\n\t\t\t  </div>\n\t\t\t  ${showCc?`<div class="gh-row">\n\t\t\t\t  <label>${__("Cc:")}</label>\n\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t  <select id="cc"></select>\n\t\t\t\t  </div>\n\t\t\t  </div>`:""}\n\t\t\t  ${showBcc?`<div class="gh-row">\n\t\t\t\t  <label>${__("Bcc:")}</label>\n\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t  <select id="bcc"></select>\n\t\t\t\t  </div>\n\t\t\t  </div>`:""}\n\t\t\t  <div class="gh-row">\n\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t  ${input({placeholder:__("Subject line..."),id:"send-email-subject",value:email.subject})}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div class="gh-row">\n\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t  ${textarea({id:"send-email-content",value:email.subject})}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div class="gh-row">\n\t\t\t\t  <div class="gh-col align-right-space-between">\n\t\t\t\t\t  <button class="gh-button danger text" id="discard-draft">${__("Discard")}</button>\n\t\t\t\t\t  <button class="gh-button primary" id="send-email-commit">${__("Send")}</button>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>`;const onMount=({close:close,setContent:setContent})=>{const reMount=()=>{wp.editor.remove("send-email-content");setContent(template());onMount({close:close,setContent:setContent})};const selectChange=(e,name)=>{email[name]=$(e.target).val()};$("#recipients").ghPicker({endpoint:ContactsStore.route,getResults:r=>r.items.map((c=>({text:c.data.email,id:c.data.email}))),getParams:q=>({...q,email:q.term,email_compare:"starts_with"}),data:email.to.map((i=>({id:i,text:i,selected:true}))),tags:true,multiple:true,width:"100%",placeholder:__("Recipients")}).on("change",(e=>selectChange(e,"to")));$("#cc").ghPicker({endpoint:ContactsStore.route,getResults:r=>r.items.map((c=>({text:c.data.email,id:c.data.email}))),getParams:q=>({...q,email:q.term,email_compare:"starts_with"}),data:email.cc.map((i=>({id:i,text:i,selected:true}))),tags:true,multiple:true,width:"100%",placeholder:__("Cc")}).on("change",(e=>selectChange(e,"cc")));$("#bcc").select2({data:[...email.bcc.map((i=>({id:i,text:i,selected:true}))),...Groundhogg.filters.owners.filter((u=>!email.bcc.includes(u.data.user_email))).map((u=>({text:u.data.user_email,id:u.data.user_email})))],tags:true,multiple:true,width:"100%",placeholder:__("Bcc")}).on("change",(e=>selectChange(e,"bcc")));$("#send-email-subject").on("change",(e=>{email.subject=e.target.value})).focus();addMediaToBasicTinyMCE();let editor=tinymceElement("send-email-content",{quicktags:false,tinymce:{height:300}},(content=>{email.content=content}));$("#send-email-cc").on("click",(()=>{showCc=true;reMount()}));$("#send-email-bcc").on("click",(()=>{showBcc=true;reMount()}));$("#discard-draft").on("click",close);$("#send-email-commit").on("click",(({target:target})=>{$(target).text(__("Sending","groundhogg")).prop("disabled",true);const{stop:stop}=loadingDots(target);post(`${routes.v4.emails}/send`,{...email,content:editor.getContent({format:"raw"})}).then((r=>{stop();$(target).text(__("Send","groundhogg")).prop("disabled",false);if(r.status!=="success"){console.log(r);dialog({message:r.message,type:"error"});return}dialog({message:__("Message sent!","groundhogg")});close()}))}))};return modal({content:template(),onOpen:onMount,onClose:()=>{wp.editor.remove("send-email-content")},overlay:false,className:"send-email",dialogClasses:"gh-panel",disableScrolling:false})};const makeInput=(selector,{inputProps:inputProps={},value:value="",onChange:onChange=(()=>{}),replaceWith:replaceWith=(()=>{})})=>{inputProps={id:uuid(),value:value,...inputProps};$(selector).replaceWith(input(inputProps));$(`#${inputProps.id}`).focus().on("blur keydown",(e=>{if(e.type==="keydown"&&e.key!=="Enter"){return}value=e.target.value;onChange(value);$(`#${inputProps.id}`).replaceWith(replaceWith(value))}))};Groundhogg.components={addContactModal:addContactModal,selectContactModal:selectContactModal,makeInput:makeInput,emailModal:emailModal}})(jQuery);