(function(Funnel,$){const{tags:TagsStore,emails:EmailsStore,campaigns:CampaignsStore}=Groundhogg.stores;const{get:apiGet,post:apiPost,delete:apiDelete,patch:apiPatch,routes:routes}=Groundhogg.api;const{v4:apiRoutes}=routes;const{tinymceElement:tinymceElement,improveTinyMCE:improveTinyMCE,confirmationModal:confirmationModal,dangerConfirmationModal:dangerConfirmationModal,loadingModal:loadingModal,modal:modal,select:select,input:input,textarea:textarea,regexp:regexp,toggle:toggle,savingModal:savingModal,textAreaWithReplacements:textAreaWithReplacements,textAreaWithReplacementsAndEmojis:textAreaWithReplacementsAndEmojis,flattenObject:flattenObject,setFrameContent:setFrameContent,moreMenu:moreMenu,clickInsideElement:clickInsideElement}=Groundhogg.element;const{formBuilder:formBuilder}=Groundhogg;const{linkPicker:linkPicker,emailPicker:emailPicker,tagPicker:tagPicker,apiPicker:apiPicker,campaignPicker:campaignPicker}=Groundhogg.pickers;$.fn.serializeFormJSON=function(){var o={};var a=this.serializeArray();$.each(a,function(){if(o[this.name]){if(!o[this.name].push){o[this.name]=[o[this.name]]}o[this.name].push(this.value||"")}else{o[this.name]=this.value||""}});return o};const toEditorButton=()=>{return`
		<button id="close-email-editor" class="gh-button secondary text icon">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 365.7 365.7">
				<path fill="currentColor"
				      d="M243.2 182.9L356.3 69.7a32 32 0 000-45.2l-15-15.1a32 32 0 00-45.3 0L182.9 122.5 69.7 9.4a32 32 0 00-45.2 0l-15.1 15a32 32 0 000 45.3L122.5 183 9.4 295.9a32 32 0 000 45.3l15 15.1a32 32 0 0045.3 0L183 243.2l113 113.1a32 32 0 0045.3 0l15.1-15a32 32 0 000-45.3zm0 0"/>
			</svg>
		</button>`};const slot=(name,...args)=>{return SlotFillProvider.slot(name,...args)};const fill=(name,component)=>{return SlotFillProvider.fill(name,component)};const slotsMounted=()=>{return SlotFillProvider.slotsMounted()};const slotsDemounted=()=>{return SlotFillProvider.slotsDemounted()};const stepIsReal=stepId=>{return Editor.origFunnel.steps.find(step=>step.ID===stepId)};const SlotFillProvider={fills:[],_slotsMounted:[],_slotsDemounted:[],slot:function(slotName,...args){this._slotsMounted.push({name:slotName,args:args});return this.fills.filter(fill=>fill.slot===slotName).map(fill=>fill.render(...args)).join("")},slotsMounted:function(){let slot;while(this._slotsMounted.length>0){slot=this._slotsMounted.pop();this.fills.filter(fill=>fill.slot===slot.name).forEach(fill=>{fill.onMount(...slot.args)});this._slotsDemounted.push(slot)}},slotsDemounted:function(){let slot;while(this._slotsDemounted.length>0){slot=this._slotsDemounted.pop();this.fills.filter(fill=>fill.slot===slot.name).forEach(fill=>{fill.onDemount(...slot.args)})}},fill:function(slot,component){this.fills.push({slot:slot,...{render:function(){},onMount:function(){},onDemount:function(){},...component}})}};const getStepType=type=>{return Editor.stepTypes.hasOwnProperty(type)?Editor.stepTypes[type]:StepTypes.getType("error")};const Editor={activeAddType:"actions",view:"addingStep",activeStep:{},htmlModules:{},isEditingTitle:false,stepFlowContextMenu:null,stepOpenInContextMenu:null,funnel:{ID:0,data:{},steps:[]},origFunnel:{ID:0,data:{},steps:[]},stepTypes:{},undoStates:[],redoStates:[],stepErrors:{},stepWarnings:{},funnelErrors:[],htmlTemplates:{container:function(){return`
			<div id="funnel-editor" class="editor">
				<div class="editor-header">
					<div class="back-to-admin"></div>
					<div class="header-stuff">
						<div class="title-wrap">
						</div>
						<div class="header-actions">
							<div class="undo-and-redo"></div>
							<div class="publish-actions">
							</div>
						</div>
					</div>
				</div>
				<div class="flow-and-edit">
					<div class="step-flow">
						<div class="steps"></div>
						<div class="add-new-step-wrapper">
							<button
								class="gh-button secondary add-new-step">Add New Step
							</button>
						</div>
					</div>
					<div id="control-panel">
						<div class="step-add">
						</div>
					</div>
				</div>
			</div>`},undoRedoActions:function(){return`
			<div class="undo-and-redo">
				<button class="redo dashicon-button" ${Editor.redoStates.length?"":"disabled"}><span
					class="dashicons dashicons-redo"></span></button>
				<button class="undo dashicon-button" ${Editor.undoStates.length?"":"disabled"}><span
					class="dashicons dashicons-undo"></span></button>
			</div>`},publishActions:function(status){if(status==="inactive"){return`
			  <button class="gh-button action update-and-launch">Launch
				  <svg viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					  <path
						  d="M8.888 7.173a21.621 21.621 0 017.22-4.783m-7.22 4.783a21.766 21.766 0 00-2.97 3.697m2.97-3.697c-1.445-.778-4.935-1.2-7.335 3.334l2.364 2.364 2-2m10.19-8.481A21.709 21.709 0 0123.22.843a21.708 21.708 0 01-1.546 7.112M16.108 2.39l5.565 5.565M5.917 10.87l1.885 4.057m9.088.248a21.62 21.62 0 004.783-7.22m-4.783 7.22a21.771 21.771 0 01-3.698 2.97m3.698-2.97c.778 1.445 1.2 4.934-3.334 7.335l-2.364-2.364 2-2m0 0L9.136 16.26m0 0l-1.334-1.334m1.334 1.334l-2.71 2.71-.667-.666-.667-.667 2.71-2.71m6.42-5.087a1.886 1.886 0 112.668-2.667 1.886 1.886 0 01-2.668 2.667z"
						  stroke="currentColor" stroke-width="1.5"/>
				  </svg>
			  </button>`}else{return`
			  <button class="deactivate gh-button text danger">Deactivate</button>
			  <button class="update gh-button primary"
			          ${objectEquals(Editor.funnel.steps,Editor.origFunnel.steps)||Object.keys(Editor.stepErrors).length>0?"disabled":""}>
				  <svg viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
					  <path
						  d="M1 21.956V2.995c0-.748.606-1.355 1.354-1.355H17.93l4.74 4.74v15.576c0 .748-.606 1.354-1.354 1.354H2.354A1.354 1.354 0 011 21.956z"
						  stroke="currentColor" stroke-width="1.5"/>
					  <path d="M14.544 16.539a2.709 2.709 0 11-5.418 0 2.709 2.709 0 015.418 0z" stroke="#fff"
					        stroke-width="1.5"/>
					  <path fill="currentColor" d="M5.619 6.298h9.634v2.846H5.619z"/>
				  </svg>
				  Update
			  </button>
			  <button id="more-menu" class="gh-button secondary text icon">
				  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 384">
					  <circle fill="currentColor" cx="192" cy="42.7" r="42.7"/>
					  <circle fill="currentColor" cx="192" cy="192" r="42.7"/>
					  <circle fill="currentColor" cx="192" cy="341.3" r="42.7"/>
				  </svg>
			  </button>`}},funnelTitleEdit:function(title,isEditing){const titleEdit=()=>{return input({id:"funnel-title-edit",name:"funnel_title",value:title})};const titleDisplay=()=>{return`<span id="title">${specialChars(title)}</span><span class="dashicons dashicons-edit"></span>`};return`<h1 class="breadcrumbs"><span class="root">Funnels</span><span class="sep">/</span>${isEditing?titleEdit():titleDisplay()}</h1>`},stepEditPanel:function(step){const{ID:ID,data:data,meta:meta}=step;const{step_type:step_type,step_title:step_title,step_group:step_group}=data;const StepType=getStepType(step_type);let hasErrors=false;let errors=[];let hasWarnings=false;let warnings=[];if(Editor.stepErrors.hasOwnProperty(ID)&&Editor.stepErrors[ID].length>0){hasErrors=true;errors=Editor.stepErrors[ID]}if(Editor.stepWarnings.hasOwnProperty(ID)&&Editor.stepWarnings[ID].length>0){hasWarnings=true;warnings=Editor.stepWarnings[ID]}const updateStepMeta=(meta,reRenderStepEdit=false)=>{return Editor.updateCurrentStepMeta(meta,reRenderStepEdit)};const updateStep=(data,reRenderStepEdit=false)=>{return Editor.updateCurrentStep(data,reRenderStepEdit)};const benchmarkPanel=()=>{return`
			  <div class="panel benchmark-settings">
				  <div class="row">
					  <label class="row-label">Allow contacts to enter the funnel at this step?</label>
					  ${toggle({name:"is_entry_point",id:"is-entry-point",checked:meta.is_entry_point,onLabel:"YES",offLabel:"NO"})}
				  </div>
				  <div class="row">
					  <label class="row-label">Track a conversion whenever this step is completed.</label>
					  ${toggle({name:"is_conversion",id:"is-conversion",checked:Editor.funnel.data.conversion_step===ID,onLabel:"YES",offLabel:"NO"})}
					  <p class="description">Only one step can be recorded as the conversion step.</p>
				  </div>
			  </div>`};const slotArgs=[step,updateStepMeta,updateStep];return`
			${hasErrors?`<div class="step-errors">
                <ul>
                    ${errors.map(error=>`<li class="step-error"><span class="dashicons dashicons-warning"></span> ${error}</li>`).join("")}
                </ul>
            </div>`:""}
			${hasWarnings?`<div class="step-warnings">
                <ul>
                    ${warnings.map(warning=>`<li class="step-warning"><span class="dashicons dashicons-warning"></span> ${warning}</li>`).join("")}
                </ul>
            </div>`:""}
			<div class="step-edit ${step_type} ${step_group}">
				<div class="settings">
					${slot("beforeStepSettings",...slotArgs)}
					${slot(`beforeStepSettings.${step_type}`,...slotArgs)}
					${StepType.edit(...slotArgs)}
					${slot(`afterStepSettings.${step_type}`,...slotArgs)}
					${slot("afterStepSettings",...slotArgs)}
				</div>
				<div class="actions-and-notes">
					${slot("beforeStepNotes",...slotArgs)}
					${slot(`beforeStepNotes.${step_type}`,...slotArgs)}
					<div class="panel">
						<label class="row-label"><span class="dashicons dashicons-admin-comments"></span> Notes</label>
						<textarea rows="4" id="step-notes" class="notes full-width"
						          name="step_notes">${specialChars(meta.step_notes||"")}</textarea>
					</div>
					${step_group==="benchmark"?benchmarkPanel():""}
					${slot(`afterStepNotes.${step_type}`,...slotArgs)}
					${slot("afterStepNotes",...slotArgs)}
				</div>
			</div>`},stepAddPanel:function(activeType,search="",pack=""){return`
			<div class="step-add">
				<div class="step-add-filters">
					<div class="type-select">
						<button class="select-type actions ${activeType==="actions"&&"active"}" data-type="actions">
							${"Actions"}
						</button>
						<button class="select-type benchmarks ${activeType==="benchmarks"&&"active"}"
						        data-type="benchmarks">
							${"Benchmarks"}
						</button>
					</div>
					${input({id:"search-steps",name:"search_steps",type:"search",className:"search-steps",placeholder:"Search...",value:search})}
					${select({id:"pack-filter",name:"pack_filter"},[{text:"Filter by pack...",value:""},...Object.values(StepPacks.packs).map(pack=>({value:pack.id,text:pack.name}))],pack)}
				</div>
				<div id="types" class="types">
				</div>
			</div>`},stepTypeSelect:function(type){return`
			<div class="type-select">
				<button class="select-type actions ${type==="actions"&&"active"}" data-type="actions">
					${"Actions"}
				</button>
				<button class="select-type benchmarks ${type==="benchmarks"&&"active"}" data-type="benchmarks">
					${"Benchmarks"}
				</button>
			</div>`},addStepCard:function(step){const pack=StepPacks.get(step.pack);return`
			<div class="add-step ${step.type} ${step.group}" data-type="${step.type}" data-group="${step.group}"
			     title="${step.name}">
				${slot("beforeAddStepCard",step)}
				${slot("beforeAddStepCard."+step.type,step)}
				${typeof pack!=="undefined"&&pack.id!=="core"?`<div class="pack">${pack.svg?pack.svg:`<span class="pack-name">${pack.name}</span>`}</div>`:""}
				${Editor.stepTypes[step.type].hasOwnProperty("svg")?`<div class="step-icon-svg">${Editor.stepTypes[step.type].svg}</div>`:`<img alt="${Editor.stepTypes[step.type].name}" class="step-icon"
				     src="${Editor.stepTypes[step.type].icon}"/>`}
				<p>${step.name}</p>
				${slot("afterAddStepCard."+step.type,step)}
				${slot("afterAddStepCard",step)}
			</div>`},stepFlowCard:function(step,activeStep){const{ID:ID,data:data,meta:meta}=step;const{step_type:step_type,step_title:step_title,step_group:step_group,step_order:step_order}=data;const StepType=getStepType(step_type);const origStep=Editor.origFunnel.steps.find(s=>s.ID===ID);let status;let hasErrors=false;let hasWarnings=false;if(Editor.stepErrors.hasOwnProperty(ID)&&Editor.stepErrors[ID].length>0){status="config-error";hasErrors=true}else if(Editor.stepWarnings.hasOwnProperty(ID)&&Editor.stepWarnings[ID].length>0){status="config-warning";hasWarnings=true}else if(origStep&&!objectEquals(step,origStep)){status="edited"}else if(!origStep){status="new"}else if(StepType.type==="error"){hasErrors=true}const nextStep=Editor.funnel.steps.find(step=>step.data.step_order===step_order+1);const prevStep=Editor.funnel.steps.find(step=>step.data.step_order===step_order-1);return`
			${step_group==="benchmark"?step_order===1?`<div class="text-helper until-helper"><span class="dashicons dashicons-filter"></span> Start the funnel when...</div>`:prevStep&&prevStep.data.step_group!=="benchmark"?'<div class="until-helper text-helper">Until...</div>':"":""}
			<div
				class="step ${step_type} ${step_group} ${activeStep===ID?"active":""} ${hasErrors?"has-errors":""} ${hasWarnings?"has-warnings":""}"
				data-id="${ID}">
				${StepType.hasOwnProperty("svg")?`<div class="icon-svg">${StepType.svg}</div>`:`<img alt="${StepType.name}" class="icon"
				     src="${StepType.icon}"/>`}
				<div class="details">
					<div class="step-title">${StepType.title(step)}</div>
					<div class="step-type">${StepType.name}</div>
					<div tabindex="0" class="step-menu-button">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 384">
							<circle fill="currentColor" cx="192" cy="42.7" r="42.7"/>
							<circle fill="currentColor" cx="192" cy="192" r="42.7"/>
							<circle fill="currentColor" cx="192" cy="341.3" r="42.7"/>
						</svg>
					</div>
				</div>
				<div class="step-status ${status}"></div>
			</div>
			${step_group==="benchmark"&&nextStep?nextStep.data.step_group==="benchmark"?`<div class="or-helper text-helper">Or...</div>`:'<div class="then-helper text-helper">Then...</div>':""}
        `}},init:function(){this.loadingClose=loadingModal().close;var self=this;var $doc=$(document);this.loadFunnel(this.funnel);$doc.on("click",".step-add .select-type",function(){self.saveUndoState();self.activeAddType=$(this).data("type");self.renderStepAdd()});$doc.on("click",".step-flow .steps .step",function(e){const $step=$(this);const step=self.funnel.steps.find(step=>step.ID===parseInt($step.data("id")));const setStepEdit=()=>{if(step.ID===self.activeStep){return}self.saveUndoState();self.previousActiveStep=self.activeStep;self.activeStep=step.ID;self.view="editingStep";self.renderStepFlow();self.renderStepEdit()};if(clickInsideElement(e,".step-menu-button")){moreMenu(this,{items:[{key:"edit",text:"Edit"},{key:"move-up",text:"Move up"},{key:"move-down",text:"Move down"},{key:"duplicate",text:"Duplicate"},{key:"delete",text:'<span class="gh-text danger">Delete</span>'}],onSelect:key=>{switch(key){case"move-up":self.moveStepUp(step);break;case"move-down":self.moveStepDown(step);break;case"duplicate":const newStep=copyObject(step);newStep.ID=uniqid();self.addStep(newStep);break;case"delete":self.deleteStep(step.ID);break;case"edit":setStepEdit();break}}})}else{setStepEdit()}});$doc.on("click",".step-flow .add-new-step",function(){self.activeStep=null;self.view="addingStep";self.renderStepFlow();self.renderStepAdd()});$doc.on("click",".undo-and-redo .undo",function(){self.undo()});$doc.on("click",".undo-and-redo .redo",function(){self.redo()});$doc.on("click",".header-stuff #title",function(){if(!self.isEditingTitle){self.isEditingTitle=true;self.renderTitle()}});$doc.on("blur change keydown","#funnel-title-edit",function(e){if(e.type==="keydown"&&e.key!=="Enter"){self.resizeTitleEdit();return}self.saveUndoState();self.funnel.data.title=e.target.value;self.isEditingTitle=false;self.update({data:{title:e.target.value}},false);self.renderTitle()});$doc.on("click","#more-menu",()=>{moreMenu("#more-menu",{onSelect:key=>{switch(key){case"campaigns":const campaignContent=()=>{return`
					  <div class="manage-campaigns">
						  <p><b>Add this funnel to one or more campaigns...</b></p>
						  <p>${select({id:"manage-campaigns",multiple:true},this.funnel.campaigns.map(c=>({text:c.data.name,value:c.ID})),this.funnel.campaigns.map(c=>c.ID))}</p>
					  </div>`};modal({content:campaignContent()});campaignPicker("#manage-campaigns",true,items=>{CampaignsStore.itemsFetched(items)}).on("select2:select",async e=>{let campaign=e.params.data;if(!CampaignsStore.hasItem(campaign.id)){campaign=await CampaignsStore.post({data:{name:campaign.id}}).then(c=>({id:c.ID}))}apiPost(`${apiRoutes.funnels}/${this.funnel.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then(r=>this.loadFunnel(r.item))}).on("select2:unselect",async e=>{let campaign=e.params.data;apiDelete(`${apiRoutes.funnels}/${this.funnel.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then(r=>this.loadFunnel(r.item))});break;case"export":window.location.href=this.funnel.links.export;break;case"share":break;case"reports":window.location.href=this.funnel.links.report;break;case"delete":dangerConfirmationModal({alert:`<p><b>Delete this funnel?</b></p>
				  <p>Any associated events, steps, and reports will also be deleted.</p>
				  <p>This action cannot be undone. Are you sure?</p>`,confirmText:"Delete",onConfirm:()=>{console.log("yikes")}});break;case"archive":dangerConfirmationModal({alert:`<p><b>Archive this funnel?</b></p>
				  <p>Any active contacts will be removed from the funnel permanently.</p>
				  <p>The funnel will become un-editable until restored.</p>`,confirmText:"Archive",onConfirm:()=>{console.log("yikes")}});break}},items:[{key:"campaigns",text:`
				  <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
					  <defs/>
					  <path
						  d="M343.2 49.7A45.1 45.1 0 00300 82L71.8 130a15 15 0 00-12 14.7v17.1H15a15 15 0 00-15 15V256a15 15 0 0015 15h44.9v21a15 15 0 0011.9 14.8l23.6 5v107.8a42.6 42.6 0 0069.2 33.5 42.5 42.5 0 0016.2-33.5V400h3c34 0 62.8-23.4 70.9-55l45.3 9.5a45.1 45.1 0 0088.3-12.5V94.7a45 45 0 00-45-45zM60 241H30v-49.2h29.9zm91 178.6a12.7 12.7 0 01-15.7 12.4 12.7 12.7 0 01-9.8-12.4V318l25.4 5.4v96.2zm33-49.5h-3v-40.5l44.4 9.4c-5.3 18-21.9 31-41.5 31zm114.3-46.5L89.9 280V157L298.2 113zm60 18.5a15 15 0 01-30 0V94.7a15 15 0 0130 0zM446.3 117a15 15 0 009.5-3.4l30.2-25a15 15 0 00-19.1-23l-30.2 24.8a15 15 0 009.6 26.6zM486 344.2l-30.2-25a15 15 0 00-19 23.2l30 25a15 15 0 0021.2-2 15 15 0 00-2-21.2zM497 201.4h-63.6a15 15 0 000 30H497a15 15 0 000-30z"/>
				  </svg> Campaigns`},{key:"export",text:`
				  <svg height="20" width="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 367 367">
					  <defs/>
					  <path
						  fill="currentColor"
						  stroke-width="1"
						  d="M363.6 247l.4-.5.5-.7.4-.6.3-.6.4-.7.3-.7.2-.6c0-.3.2-.5.3-.7l.1-.7.2-.8.1-.8.1-.6.1-1.5V236l-.2-.6v-.8l-.3-.8-.1-.7-.3-.7-.2-.6-.3-.7-.4-.7-.3-.6-.4-.6-.5-.7-.4-.5a15 15 0 00-1-1v-.1l-37.5-37.5a15 15 0 00-21.2 21.2l11.9 11.9H270v-78.6-.4a15 15 0 00-3.4-9.5 15.2 15.2 0 00-1-1.2c-.2 0-.3-.2-.4-.4L155.6 23a15 15 0 00-1-.9l-.3-.2a14.9 14.9 0 00-1.9-1.3l-.3-.2-1.1-.6-.5-.1a14.5 14.5 0 00-2.2-.7l-.4-.1-1.2-.2h-1.4l-.3-.1H15a15 15 0 00-15 15v300a15 15 0 0015 15h240a15 15 0 0015-15v-81h45.8l-12 11.9a15 15 0 0021.3 21.2l37.5-37.5 1-1zM160 69.7l58.8 58.8H160V69.7zm80 248.8H30v-270h100v95a15 15 0 0015 15h95v64h-65a15 15 0 000 30h65v66z"/>
				  </svg> Export`},{key:"share",text:`
				  <svg height="20" width="20" xmlns="http://www.w3.org/2000/svg" viewBox="-33 0 512 512">
					  <path fill="currentColor"
					        d="M361.8 344.4a83.6 83.6 0 00-62 27.4l-138-85.4a83.3 83.3 0 000-60.8l138-85.4a83.6 83.6 0 00145.8-56.4 83.9 83.9 0 10-161.9 30.4l-138 85.4A83.6 83.6 0 000 256a83.9 83.9 0 00145.8 56.4l138 85.4a83.9 83.9 0 10161.9 30.4 83.9 83.9 0 00-83.9-83.8zM308.6 83.8a53.3 53.3 0 11106.6.1 53.3 53.3 0 01-106.6-.1zM83.8 309.2a53.3 53.3 0 11.1-106.6 53.3 53.3 0 01-.1 106.6zm224.8 119a53.3 53.3 0 11106.6.1 53.3 53.3 0 01-106.6-.1zm0 0"/>
				  </svg> Share`},{key:"reports",text:`
				  <svg height="20" width="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 510 510">
					  <path fill="currentColor"
					        d="M495 420h-14V161.8a15 15 0 00-15-15h-82.2a15 15 0 00-15 15V420h-42.3V75a15 15 0 00-15-15h-82.3a15 15 0 00-15 15v345H172V232.2a15 15 0 00-15-15H74.7a15 15 0 00-15 15V420H30V75a15 15 0 00-30 0v360a15 15 0 0015 15h480a15 15 0 000-30zm-405.3 0V247.2h52.2V420zm154.5 0V90h52.2v330zm154.6 0V176.8H451V420z"/>
				  </svg> Reports`},{key:"archive",text:`
				  <svg class="danger" height="20" width="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 520 520">
					  <defs/>
					  <path fill="currentColor"
					        d="M475 125V90a45 45 0 00-45-45H219.4l-7.9-12.8a15 15 0 00-12.7-7.2H45A45 45 0 000 70v380a45 45 0 0045 45h430a45 45 0 0045-45V170a45 45 0 00-45-45zm-45-50a15 15 0 0115 15v35H268.4l-20-32.8L237.7 75zm60 375a15 15 0 01-15 15H45a15 15 0 01-15-15V70a15 15 0 0115-15h145.3l7.9 12.8 29 47.3 20 32.8A15 15 0 00260 155h215a15 15 0 0115 15v280z"/>
				  </svg><span class="gh-text danger">Archive</span>`},{key:"delete",text:`
				  <svg class="danger" height="20" width="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
					  <defs/>
					  <path fill="currentColor"
					        d="M436 60h-75V45a45 45 0 00-45-45H196a45 45 0 00-45 45v15H76a45 45 0 00-14 87.8l26.8 323a45.3 45.3 0 0044.8 41.2h244.8c23.2 0 43-18.1 44.8-41.3l26.8-323A45 45 0 00436 60zM181 45a15 15 0 0115-15h120a15 15 0 0115 15v15H181V45zm212.3 423.2a15 15 0 01-14.9 13.8H133.6a15 15 0 01-15-13.7L92.4 150h327.4l-26.4 318.2zM436 120H76a15 15 0 010-30h360a15 15 0 010 30z"/>
					  <path fill="currentColor"
					        d="M196 436l-15-242a15 15 0 00-30 2l15 242a15 15 0 1030-2zM256 180a15 15 0 00-15 15v242a15 15 0 0030 0V195a15 15 0 00-15-15zM347 180a15 15 0 00-16 14l-15 242a15 15 0 0030 2l15-242a15 15 0 00-14-16z"/>
				  </svg><span class="gh-text danger">Delete</span>`}]})});$doc.on("click",".publish-actions .deactivate",function(){dangerConfirmationModal({alert:`<p><b>Are you sure you want to deactivate the funnel?</b></p>
		  <p>Active contacts will be paused until the funnel is reactivated.</p>`,confirmText:"Deactivate",onConfirm:()=>{self.deactivate()}})});$doc.on("click",".publish-actions .update-and-launch, .publish-actions .update",function(){confirmationModal({alert:`<p><b>Are you sure you want to commit these changes?</b></p><p>The changes made will take immediate
				effect to anyone currently in the funnel.</p>`,onConfirm:()=>{self.commitChanges()}})});improveTinyMCE();self.setupStepTypes();self.maybePreloadTagsAndEmails()},renderContainer:function(){$("#app").html(this.htmlTemplates.container());this.setupSortable()},render:function(){this.renderContainer();this.renderTitle();this.renderPublishActions();this.renderStepFlow();this.renderStepAdd();this.renderStepEdit();this.loadingClose();$(window).trigger("resize")},maybePreloadTagsAndEmails:async function(){const preloadTags=[];const preloadEmails=[];const promises=[];this.funnel.steps.forEach(step=>{const{meta:meta,data:data}=step;const{tags:tags,email_id:email_id}=meta;if(tags){preloadTags.push(...tags)}else if(email_id){preloadEmails.push(email_id)}const type=StepTypes.getType(data.step_type);const promise=type.preload(step);if(typeof promise!=="undefined"){if(Array.isArray(promise)){promises.push(...promise)}else{promises.push(promise)}}});if(preloadEmails.length===0&&preloadTags.length===0&&promises.length===0){this.render();return}if(preloadTags.length>0){promises.push(TagsStore.fetchItems({include:preloadTags}))}if(preloadEmails.length>0){promises.push(EmailsStore.fetchItems({include:preloadEmails}))}if(promises.length>0){await Promise.all(promises)}this.render()},loadFunnel:function(funnel){this.funnel=funnel;this.origFunnel=copyObject(funnel);if(this.funnel.meta.edited){this.funnel.steps=this.funnel.meta.edited.steps}},setupSortable:function(){var self=this;$(".step-flow .steps").sortable({placeholder:"step-placeholder",cancel:".text-helper",start:function(e,ui){ui.placeholder.height(ui.item.height());ui.placeholder.width(ui.item.width())},receive:function(e,ui){self.saveUndoState();var type=$(ui.helper).data("type");var group=$(ui.helper).data("group");var id=Date.now();$(ui.helper).addClass("step");$(ui.helper).data("id",id);self.addStep({ID:id,data:{ID:id,funnel_id:Editor.funnel.ID,step_title:Editor.stepTypes[type].name,step_type:type,step_group:group,step_order:$(ui.helper).prevAll(".step").length},meta:StepTypes.getType(type).defaults})},update:function(e,ui){self.saveUndoState();self.syncOrderWithFlow();self.autoSaveEditedFunnel();self.renderStepFlow();self.renderStepEdit()}}).disableSelection()},setupStepTypes:function(){for(var prop in this.stepTypes){if(Object.prototype.hasOwnProperty.call(this.stepTypes,prop)&&Object.prototype.hasOwnProperty.call(StepTypes,prop)){Object.assign(this.stepTypes[prop],{...StepTypes.default,...StepTypes[prop]});Object.assign(StepTypes[prop],{...this.stepTypes[prop]})}else{Object.assign(this.stepTypes[prop],StepTypes.default)}}},getStepType:function(type){},initStepFlowContextMenu:function(){var self=this;this.stepFlowContextMenu=createContextMenu({menuClassName:"step-context-menu",targetSelector:".step-flow .steps .step",items:[{key:"duplicate",text:"Duplicate"},{key:"delete",text:"Delete"}],onOpen:function(e,el){self.stepOpenInContextMenu=parseInt(el.dataset.id)},onSelect:function(key){switch(key){case"delete":self.deleteStep(self.stepOpenInContextMenu);break;case"duplicate":const stepToCopy=self.funnel.steps.find(step=>step.ID===self.stepOpenInContextMenu);const newStep=copyObject(stepToCopy);newStep.ID=uniqid();self.addStep(newStep);break}}});this.stepFlowContextMenu.init()},renderStepFlow:function(){var self=this;this.checkForStepErrors();var steps=this.funnel.steps.sort((a,b)=>a.data.step_order-b.data.step_order).map(step=>self.htmlTemplates.stepFlowCard(step,self.activeStep)).join("");$(".step-flow .steps").html(steps);this.renderPublishActions()},addStepError:function(id,error){if(!this.stepErrors.hasOwnProperty(id)){this.stepErrors[id]=[]}this.stepErrors[id].push(error)},addStepWarning:function(id,error){if(!this.stepWarnings.hasOwnProperty(id)){this.stepWarnings[id]=[]}this.stepWarnings[id].push(error)},checkForStepErrors:function(){const self=this;this.stepErrors={};this.stepWarnings={};this.funnel.steps.forEach(step=>{const addError=error=>{this.addStepError(step.ID,error)};const addWarning=warning=>{this.addStepWarning(step.ID,warning)};const{step_group:step_group,step_order:step_order,step_type:step_type}=step.data;const typeHandler=getStepType(step_type);if(step_group==="action"&&step_order===1){addError("Actions cannot be at the start of a funnel.")}else if(typeHandler.type==="error"){addError("Settings not found.")}if(typeHandler){typeHandler.validate(step,addError,addWarning)}})},mountStep:function(step){step=step||this.funnel.steps.find(s=>s.ID===this.activeStep);if(!step){return}const updateStepMeta=(meta,reRenderStepEdit=false)=>{return this.updateCurrentStepMeta(meta,reRenderStepEdit)};const updateStep=(data,reRenderStepEdit=false)=>{return this.updateCurrentStep(data,reRenderStepEdit)};$("#step-notes").on("change",function(e){updateStepMeta({step_notes:$(this).val()})});if(step.data.step_group==="benchmark"){$("#is-entry-point").on("change",e=>{updateStepMeta({is_entry_point:e.target.checked})})}const StepType=getStepType(step.data.step_type);StepType.onMount(step,updateStepMeta,updateStep);this.lastStepEditMounted=this.activeStep},demountStep:function(step){step=step||this.funnel.steps.find(s=>s.ID===this.lastStepEditMounted);if(!step){return}const updateStepMeta=meta=>{return this.updateCurrentStepMeta(meta)};const updateStep=data=>{return this.updateCurrentStep(data)};const StepType=getStepType(step.data.step_type);StepType.onDemount(step,updateStepMeta,updateStep);this.lastStepEditMounted=null},renderStepEdit:function(){if(this.view!=="editingStep"){return}var self=this;const step=this.funnel.steps.find(step=>step.ID===this.activeStep);const previousStep=this.funnel.steps.find(step=>step.ID===this.previousActiveStep);if(!step){this.activeStep=false;this.previousActiveStep=false;this.view="addingStep";this.renderStepAdd();return}if(this.activeStep===this.lastStepEditMounted){this.demountStep(step)}else if(previousStep){this.demountStep(previousStep)}slotsDemounted();$("#control-panel").html(this.htmlTemplates.stepEditPanel(step));this.mountStep(step);slotsMounted()},renderStepAdd:function(){if(this.view!=="addingStep"){return}const self=this;self.demountStep();$("#control-panel").html(self.htmlTemplates.stepAddPanel(self.activeAddType,self.stepSearch,self.packFilter));self.renderStepFlow();const mountSteps=()=>{const sr=regexp(self.stepSearch);$("#types").html(Object.values(Editor.stepTypes).filter(step=>step.group+"s"===self.activeAddType).filter(step=>step.name.match(sr)||step.pack.match(sr)).filter(step=>!self.packFilter||step.pack===self.packFilter).map(Editor.htmlTemplates.addStepCard).join(""));const addStepHere=({type:type,group:group,order:order})=>{var id=Date.now();self.addStep({ID:id,data:{ID:id,funnel_id:Editor.funnel.ID,step_title:Editor.stepTypes[type].name,step_type:type,step_group:group,step_order:order},meta:StepTypes.getType(type).defaults})};const $addSteps=$(".add-step");$addSteps.draggable({connectToSortable:".step-flow .steps",helper:"clone",revert:"invalid",revertDuration:0});$addSteps.on("click",function(){const $button=$(this);var type=$button.data("type");var group=$button.data("group");addStepHere({type:type,group:group,order:self.addingStepOrder||self.funnel.steps.length});self.addingStepOrder=false})};mountSteps();$("#search-steps").on("input",e=>{this.stepSearch=e.target.value;mountSteps()});$("#pack-filter").on("change",e=>{this.packFilter=e.target.value;mountSteps()})},renderEmailTemplatePicker:function(updateStepMeta){this.demountStep();const picker=Groundhogg.EmailTemplatePicker({selector:"#app",breadcrumbs:["Funnels",`<span id="back-to-funnel" style="cursor: pointer">${specialChars(this.funnel.data.title)}</span>`,"Add Email"],onSelect:email=>{this.render();EmailsStore.itemsFetched([email]);updateStepMeta({email_id:email.ID},true);this.renderEmailEditor(email)},afterHeaderActions:toEditorButton(),onMount:()=>{$("#back-to-funnel,#close-email-editor").on("click",()=>{this.render()})}});picker.mount()},renderEmailEditor:function(email){this.demountStep();const editor=Groundhogg.EmailEditor({selector:"#app",email:email,onChange:email=>{console.log(email)},onCommit:email=>{console.log(email)},onHeaderMount:()=>{$("#back-to-funnel,#close-email-editor").on("click",()=>{editor.demount();this.render()})},breadcrumbs:["Funnels",`<span id="back-to-funnel" style="cursor: pointer">${specialChars(this.funnel.data.title)}</span>`],afterPublishActions:toEditorButton()});editor.mount()},renderTitle:function(){$(".header-stuff .title-wrap").html(this.htmlTemplates.funnelTitleEdit(this.funnel.data.title,this.isEditingTitle));if(this.isEditingTitle){$("#funnel-title-edit").focus();this.resizeTitleEdit()}},resizeTitleEdit:function(){$("#funnel-title-edit").width(this.funnel.data.title.length+1+"ch")},renderPublishActions:function(){$(".publish-actions").html(this.htmlTemplates.publishActions(this.funnel.data.status));$(".undo-and-redo").replaceWith(this.htmlTemplates.undoRedoActions())},syncOrderWithFlow:function(){var self=this;$(".step-flow .steps .step").each(function(i){self.funnel.steps.find(step=>step.ID===$(this).data("id")).data.step_order=i+1});this.fixStepOrders()},currentState:function(){const{view:view,funnel:funnel,activeStep:activeStep,activeAddType:activeAddType,isEditingTitle:isEditingTitle}=this;return{view:view,activeStep:activeStep,isEditingTitle:isEditingTitle,activeAddType:activeAddType,funnel:copyObject(funnel)}},saveUndoState:function(){this.undoStates.push(this.currentState())},undo:function(){var lastState=this.undoStates.pop();if(!lastState){return}this.redoStates.push(this.currentState());Object.assign(this,lastState);this.render()},redo:function(){var lastState=this.redoStates.pop();if(!lastState){return}this.undoStates.push(this.currentState());Object.assign(this,lastState);this.render()},update:function(data,reload=true){var self=this;return apiPost(`${apiRoutes.funnels}/${self.funnel.ID}`,data).then(data=>{self.setLastSaved();if(data.item&&reload){self.loadFunnel(data.item);self.render()}})},activate:function(){const{close:close}=loadingModal("Launching");this.update({data:{status:"active"}}).then(()=>close())},deactivate:function(){const{close:close}=loadingModal("Deactivating");this.update({data:{status:"inactive"}}).then(()=>close())},commitChanges:function(){var self=this;if(objectEquals(this.funnel.steps,this.origFunnel.steps)){return this.activate()}if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}else if(this.abortController){this.abortController.abort()}const{close:close}=savingModal();apiPost(`${apiRoutes.funnels}/${self.funnel.ID}/commit`,{edited:{steps:self.funnel.steps}}).then(data=>{self.setLastSaved();if(data.item){self.loadFunnel(data.item);self.render()}else if(data.code==="error"){const{errors:errors}=data.data.data;const errorHTML=errors.map(({errors:errors,error_data:error_data})=>{return`<p>${Object.keys(errors).map(code=>errors[code][0])}</p>`});errors.forEach(error=>{const{errors:errors,error_data:error_data}=error;for(const code in errors){if(errors.hasOwnProperty(code)){self.addStepError(error_data[code].step.ID,errors[code][0])}}});self.render();confirmationModal({alert:`<p>Your funnel could not be launched due to <b>${errors.length}</b> errors. Please rectify the
				  following errors and try again.</p>
			  <div class="commit-errors">${errorHTML}</div>`})}}).then(()=>close())},setLastSaved:function(){clearInterval(self.lastSavedTimer);self.lastSavedTimer=setInterval(this.updateLastSaved,30*1e3,new Date);this.updateLastSaved(new Date)},updateLastSaved:function(lastSaved){var delta=Math.round((+new Date-lastSaved)/1e3);var minute=60,hour=minute*60,day=hour*24,week=day*7;var fuzzy="Saved ";if(delta<30){fuzzy+="just now"}else if(delta<minute){fuzzy+=delta+" seconds ago"}else if(delta<2*minute){fuzzy+="a minute ago"}else if(delta<hour){fuzzy+=Math.floor(delta/minute)+" minutes ago."}else if(Math.floor(delta/hour)==1){fuzzy+="1 hour ago"}else if(delta<day){fuzzy=Math.floor(delta/hour)+" hours ago."}else if(delta<day*2){fuzzy+="yesterday"}$(".header-actions").attr("data-lastSaved",fuzzy)},addStep:function(step){if(!step){return}this.saveUndoState();this.funnel.steps.push(step);this.fixStepOrders();delete this.addingStepOrder;this.renderStepFlow();this.autoSaveEditedFunnel()},moveStep:function(step,direction){if(!step){return}const move="up"===direction?-1.1:1.1;this.saveUndoState();step.data.step_order=step.data.step_order+move;window.console.log("steps",this.funnel.steps);this.fixStepOrders();this.renderStepFlow();this.autoSaveEditedFunnel()},moveStepUp:function(step){this.moveStep(step,"up")},moveStepDown:function(step){this.moveStep(step,"down")},insertPlaceholderStep:function(step,beforeAfter){const self=this;self.previousActiveStep=step.ID;self.view="addingStep";self.addingStepOrder="before"===beforeAfter?parseInt(step.data.step_order)-.1:parseInt(step.data.step_order)+.1;self.renderStepFlow();self.renderStepAdd();const $html=$(`<div class="step-placeholder">Choose a step to add here &rarr;<button type="button" class="button button-secondary">Cancel</button></div>`);$("button",$html).on("click",function(){delete self.addingStepOrder;$html.remove();self.activeStep=self.previousActiveStep;self.view="editingStep";self.renderStepFlow();self.renderStepEdit()});if("before"===beforeAfter){$html.insertBefore(`.steps [data-id="${step.ID}"]`)}else{$html.insertAfter(`.steps [data-id="${step.ID}"]`)}},fixStepOrders:function(){let newOrder=1;this.funnel.steps.sort((a,b)=>a.data.step_order-b.data.step_order).forEach(step=>{step.data.step_order=newOrder;newOrder++})},deleteStep:function(stepId){if(!stepId){return}const removeStep=()=>{this.saveUndoState();this.funnel.steps=this.funnel.steps.filter(step=>step.ID!==stepId);this.fixStepOrders();this.renderStepFlow();if(this.activeStep===stepId){this.view="addingStep";this.renderStepAdd();this.activeStep=null}this.autoSaveEditedFunnel()};const origStep=Editor.origFunnel.steps.find(s=>s.ID===stepId);if(origStep){dangerConfirmationModal({alert:`
          <p><b>Delete this step?</b></p>
          <p>Active contacts at this step will be removed from the funnel when it is updated.</p> 
        `,confirmText:"Delete",onConfirm:()=>{removeStep()}})}else{removeStep()}},getStep:function(stepId){return this.funnel.steps.find(step=>step.ID===stepId)},getSteps:function(){return this.funnel.steps},getCurrentStep:function(){return this.getStep(this.activeStep)},updateStep:function(stepId,newData){const step=this.getStep(stepId);const newStep={...step,...newData};newStep.data.step_title=StepTypes.getType(newStep.data.step_type).title(newStep);var toReplace=this.funnel.steps.findIndex(step=>step.ID===stepId);this.autoSaveEditedFunnel();this.saveUndoState();if(toReplace!==-1){this.funnel.steps[toReplace]=newStep}this.renderStepFlow();return newStep},updateCurrentStep:function(newData,reRenderStepEdit=false){const step=this.updateStep(this.activeStep,newData);if(reRenderStepEdit){this.renderStepEdit()}return step},updateCurrentStepMeta:function(newMeta,reRenderStepEdit=false){const{data:data,meta:meta}=this.getCurrentStep();const step=this.updateStep(this.activeStep,{meta:{...meta,...newMeta}});if(reRenderStepEdit){this.renderStepEdit()}return step},autoSaveTimeout:null,abortController:null,autoSaveEditedFunnel:function(){var self=this;if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}this.autoSaveTimeout=setTimeout(()=>{self.autoSaveTimeout=null;self.abortController=new AbortController;const{signal:signal}=self.abortController;apiPost(`${apiRoutes.funnels}/${self.funnel.ID}/meta`,{edited:{steps:self.funnel.steps,title:self.funnel.data.title}},{signal:signal}).then(data=>{self.setLastSaved();self.abortController=null})},3e3)},...Funnel};$(function(){Editor.init()});function copyObject(object,initial){initial=initial||{};return $.extend(true,initial,object)}function objectEquals(a,b){return JSON.stringify(a)===JSON.stringify(b)}function uniqid(){return Date.now()}function andList(array,text="and"){if(array.length===1){return array[0]}return`${array.slice(0,-1).join(", ")} ${text} ${array[array.length-1]}`}function orList(array){return andList(array,"or")}function isString(string){return typeof string==="string"}const specialChars=string=>{if(!isString(string)){return string}return string.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;")};const kebabize=str=>{return str.split("").map((letter,idx)=>{return letter.toUpperCase()===letter?`${idx!==0?"-":""}${letter.toLowerCase()}`:letter}).join("")};const objectToStyle=object=>{const props=[];for(const prop in object){if(object.hasOwnProperty(prop)){props.push(`${kebabize(prop)}:${specialChars(object[prop])}`)}}return props.join(";")};const objectToProps=object=>{const props=[];for(const prop in object){if(object.hasOwnProperty(prop)){switch(prop){case"className":props.push(`class="${specialChars(object[prop])}"`);break;case"style":props.push(`style="${specialChars(objectToStyle(object[prop]))}"`);break;default:props.push(`${kebabize(prop)}="${specialChars(object[prop])}"`);break}}}return props.join(" ")};const Elements={input:function(props){props={type:"text",className:"input",...props};return`<input ${objectToProps(props)}/>`},select:function(props,options,selected){return`<select ${objectToProps(props)}>${createOptions(options,selected)}</select>`},option:function(value,text,selected){return`
		  <option value="${specialChars(value)}" ${selected?"selected":""}>${text}
		  </option>`},mappableFields:function(props,selected){return Elements.select(props,{0:"-- Do not map --",...Groundhogg.fields.mappable},selected)},inputWithReplacementsAndEmojis:function({type:type="text",name:name,id:id,value:value,className:className,placeholder:placeholder=""},replacements=true,emojis=true){const classList=[replacements&&"input-with-replacements",emojis&&"input-with-emojis"];return`
		  <div class="input-wrap ${classList.filter(c=>c).join(" ")}">
			  <input type="${type}" id="${id}" name="${name}" value="${specialChars(value)||""}" class="${className}"
			         placeholder="${specialChars(placeholder)}">
			  ${emojis?`<button class="emoji-picker-start" title="insert emoji"><span class="dashicons dashicons-smiley"></span>
			  </button>`:""}
			  ${replacements?`<button class="replacements-picker-start" title="insert replacement"><span
				  class="dashicons dashicons-admin-users"></span></button>`:""}
		  </div>`},inputWithReplacements:function(atts){return Elements.inputWithReplacementsAndEmojis(atts,true,false)},inputWithEmojis:function(atts){return Elements.inputWithReplacementsAndEmojis(atts,false,true)},textAreaWithReplacementsAndEmojis:function({name:name,id:id,value:value}){},textAreaWithReplacements:function({name:name,id:id,value:value}){},textAreaWithEmojis:function({name:name,id:id,value:value}){}};const createOptions=(options,selected)=>{const optionsString=[];if(Array.isArray(options)){options.forEach(option=>{optionsString.push(Elements.option(option,option,Array.isArray(selected)?selected.indexOf(option)!==-1:option===selected))})}else{for(const option in options){if(options.hasOwnProperty(option)){optionsString.push(Elements.option(option,options[option],Array.isArray(selected)?selected.indexOf(option)!==-1:option===selected))}}}return optionsString.join("")};function ordinal_suffix_of(i){var j=i%10,k=i%100;if(j==1&&k!=11){return i+"st"}if(j==2&&k!=12){return i+"nd"}if(j==3&&k!=13){return i+"rd"}return i+"th"}const tagWithConditionOnMount=(step,updateStepMeta)=>{tagOnMount(step,updateStepMeta);$("#condition").change(function(e){updateStepMeta({condition:$(this).val()})})};const tagOnMount=(step,updateStepMeta)=>{return tagPicker("#tags",true,items=>{console.log(items);TagsStore.itemsFetched(items)}).on("change",function(e){const tags=$(this).val();const newTags=tags.filter(tag=>!TagsStore.hasItem(parseInt(tag)));if(newTags.length>0){TagsStore.validate(tags).then(tags=>{updateStepMeta({tags:tags.map(tag=>tag.ID)})})}else{updateStepMeta({tags:tags.map(tag=>parseInt(tag))})}})};const delayTimerDefaults={delay_amount:3,delay_type:"days",run_on_type:"any",run_when:"now",run_time:"09:00:00",send_in_timezone:false,run_time_to:"17:00:00",run_on_dow_type:"any",run_on_dow:[],run_on_month_type:"any",run_on_months:[],run_on_dom:[]};const delayTimerName=({delay_amount:delay_amount,delay_type:delay_type,run_on_type:run_on_type,run_when:run_when,run_time:run_time,send_in_timezone:send_in_timezone,run_time_to:run_time_to,run_on_dow_type:run_on_dow_type,run_on_dow:run_on_dow,run_on_month_type:run_on_month_type,run_on_months:run_on_months,run_on_dom:run_on_dom})=>{const preview=[];if(delay_type==="none"&&run_on_type==="any"){switch(run_when){default:case"now":return`Run at any time`;case"later":return`Run at <b>${run_time}</b>`;case"between":return`Run between <b>${run_time}</b> and <b>${run_time_to}</b>`}}if(delay_type!=="none"){preview.push(`Wait at least <b>${delay_amount} ${delay_type}</b> and then`)}if(run_on_type!=="any"){preview.push(preview.length>0?"run on":"Run on")}switch(run_on_type){default:case"any":preview.push("run");break;case"weekday":preview.push("<b>a weekday</b>");break;case"weekend":preview.push("<b>a weekend</b>");break;case"day_of_week":let dowList=orList(run_on_dow.map(i=>`<b>${i}</b>`));dowList=`${run_on_dow_type==="any"?`any ${dowList}`:`the ${run_on_dow_type} ${dowList}`}`;if(run_on_month_type==="specific"){preview.push(`${dowList} in ${orList(run_on_months.map(i=>`<b>${i}</b>`))}`)}else{preview.push(`${dowList} of <b>any month</b>`)}break;case"day_of_month":const dayList=run_on_dom.length>0?`the ${orList(run_on_dom.map(i=>`<b>${ordinal_suffix_of(i)}</b>`))}`:`<b>any day</b>`;if(run_on_month_type==="specific"){preview.push(`${dayList} in ${orList(run_on_months.map(i=>`<b>${i}</b>`))}`)}else{preview.push(`${dayList} of <b>any month</b>`)}break}switch(run_when){default:case"now":preview.push(`at any time`);break;case"later":preview.push(`at <b>${run_time}</b>`);break;case"between":preview.push(`between <b>${run_time}</b> and <b>${run_time_to}</b>`);break}return preview.join(" ")};const StepPacks={packs:{},add:function(id,name="",svg=""){this.packs[id]={id:id,name:name,svg:svg}},get:function(id){return this.packs[id]}};StepPacks.add("core","Groundhogg");const StepTypes={register:function(type,opts){this[type]={type:type,...opts}},getType:function(type){if(!this.hasOwnProperty(type)){return this.default}return Object.assign({},this.default,this[type])},error:{svg:`
		  <svg viewBox="0 0 20 15" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M10.733.534a1 1 0 00-1.656 0L.462 13.25a1 1 0 00.828 1.56h17.23a1 1 0 00.827-1.56L10.733.534z"
			        fill="#E91F4F"/>
			  <path
				  d="M10.48 9.322a.092.092 0 00-.011.036c0 .008-.004.016-.012.024-.016.016-.076.024-.18.024h-.888c-.032 0-.048-.008-.048-.024-.024-.024-.036-.092-.036-.204l-.168-5.496c-.008-.168 0-.268.024-.3.024-.032.092-.048.204-.048h1.068c.112 0 .176.016.192.048.024.032.032.132.024.3l-.168 5.496v.144zm-.587 2.496a.794.794 0 01-.6-.252.8.8 0 01-.24-.589.84.84 0 01.24-.6.794.794 0 01.6-.252c.24 0 .44.085.6.252a.82.82 0 01.252.6.78.78 0 01-.252.588.794.794 0 01-.6.253z"
				  fill="#fff"/>
		  </svg>`,name:"Error",type:"error",title:function({data:data}){return`<b>${data.step_type}</b> settings not found`},edit:function({ID:ID,data:data,meta:meta}){return`
			<div class="panel">
				<p>The settings for this step could not be found. This may be because you deactivated an extension or
					integration which registered this step type.</p>
				<p>Reactivate the plugin or delete this step to continue.</p>
			</div>`},onMount:function(){}},default:{pack:"core",promiseController:null,title:function({ID:ID,data:data,meta:meta}){return data.step_title},edit:function({ID:ID,data:data,meta:meta}){return`
			<div class="panel">
				<form id="settings-form" method="post" action="">
					<div id="dynamic-step-settings">
						<div class="gh-loader"></div>
					</div>
				</form>
			</div>`},onMount:function(step){var self=this;self.promiseController=new AbortController;const{signal:signal}=self.promiseController;apiPost(`${apiRoutes.steps}/html`,step,{signal:signal}).then(r=>{$("#dynamic-step-settings").html(r.html);$(document).trigger("gh-init-pickers");const $form=$("#settings-form");$form.on("submit",function(e){e.preventDefault();return false}).on("change",function(e){e.preventDefault();const meta=$(this).serializeFormJSON();Editor.updateCurrentStepMeta(meta)});self.promiseController=null}).catch(()=>{})},onDemount:function(){if(this.promiseController){this.promiseController.abort()}},validate:function(step,addError,addWarning){},preload:function(step){},defaults:{}},apply_note:{defaults:{note_text:""},svg:`
		  <svg viewBox="0 0 42 37" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M41.508 31.654h-10m5-5v10" stroke="currentColor" stroke-width="2"/>
			  <path
				  d="M27.508 11.988h1a1 1 0 00-.293-.708l-.707.708zm-7.084-7.084l.708-.707a1 1 0 00-.708-.293v1zm0 7.084h-1v1h1v-1zm7.084 17.416h-1 1zm-18.834 2h17.834v-2H8.674v2zm-2-25.5v23.5h2v-23.5h-2zm21.834 23.5V11.988h-2v17.416h2zm-8.084-25.5H8.674v2h11.75v-2zm7.79 7.376l-7.082-7.083-1.415 1.414 7.084 7.084 1.414-1.415zm-8.79-6.376v7.084h2V4.904h-2zm1 8.084h7.084v-2h-7.084v2zm-8.5 5.666h11.334v-2H11.925v2zm0 5.667h11.334v-2H11.925v2zm14.584 7.083a2 2 0 002-2h-2v2zm-17.834-2h-2a2 2 0 002 2v-2zm0-23.5v-2a2 2 0 00-2 2h2z"
				  fill="currentColor"/>
		  </svg>`,title:function({meta:meta}){return"Apply Note"},edit:function({meta:meta}){const{note_text:note_text}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="note_text">Add the following note the the contact...</label>
					<textarea id="note_text" name="note_text">${note_text||""}</textarea>
				</div>
			</div>`},onMount:function(step,updateStepMeta){let saveTimer;tinymceElement("note_text",{tinymce:true,quicktags:true},content=>{clearTimeout(saveTimer);saveTimer=setTimeout(function(){updateStepMeta({note_text:content})},300)})},onDemount:function(){wp.editor.remove("note_text")}},admin_notification:{svg:`
		  <svg viewBox="0 0 31 43" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <mask id="a" fill="#fff">
				  <path d="M16.956 12.576a1.368 1.368 0 11-2.737 0h2.737z"/>
			  </mask>
			  <path
				  d="M16.956 12.576h1.5v-1.5h-1.5v1.5zm-2.737 0v-1.5h-1.5v1.5h1.5zm1.237 0c0-.072.059-.131.131-.131v3a2.868 2.868 0 002.869-2.869h-3zm.131-.131c.073 0 .132.059.132.131h-3a2.868 2.868 0 002.868 2.869v-3zm-1.368 1.631H16.955v-1.5-1.5h-.001-.001-.002-.003-.001-.001-.001-.001-.001-.001-.001-.004-.001-.004-.002-.001-.002-.001-.002-.002-.001-.002-.002-.003-.002-.002-.002-.002-.002-.002-.002-.005-.002-.002-.005-.002-.005-.005-.005-.003-.005-.003-.003-.011-.003-.003-.003-.003-.016-.02-.007-.007H16.76 16.683 14.22v3z"
				  fill="currentColor" mask="url(#a)"/>
			  <path
				  d="M20.376 11.208v.75A.75.75 0 0021 10.792l-.624.416zm-1.369-2.053h-.75a.75.75 0 00.126.417l.624-.417zm-6.842 0l.624.417a.75.75 0 00.126-.417h-.75zm-1.368 2.053l-.624-.416a.75.75 0 00.624 1.166v-.75zm2.118-4.79a2.671 2.671 0 012.671-2.67v-1.5a4.171 4.171 0 00-4.17 4.17h1.5zm2.671-2.67a2.671 2.671 0 012.671 2.67h1.5a4.171 4.171 0 00-4.17-4.17v1.5zm-3.42 8.21h6.841v-1.5h-6.842v1.5zm6.841 0h1.369v-1.5h-1.369v1.5zm.75-2.803V6.42h-1.5v2.736h1.5zM21 10.792L19.63 8.74l-1.248.833 1.369 2.052L21 10.792zM11.415 6.42v2.736h1.5V6.42h-1.5zm.126 2.32l-1.368 2.053 1.248.832 1.368-2.052-1.248-.833zm-.744 3.22h1.368v-1.5h-1.368v1.5zm5.54-8.961V.945h-1.5v2.053h1.5z"
				  fill="currentColor"/>
			  <path d="M29.413 14.097L1.08 25.43l8.5 2.5 19.833-13.833zm0 0l-12.75 26.916-2.5-8.5 15.25-18.416z"
			        stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
		  </svg>`,defaults:{to:"{owner_email}",from:"{owner_email}",reply_to:"{email}",subject:'Notification from "{first}"',note_text:""},title:function({meta:meta}){const{to:to}=meta;return`Send notification to ${andList(to.split(",").map(address=>`<b>${address.trim()}</b>`))}`},edit:function({meta:meta}){return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="to">Send this notification to...</label>
					${Elements.inputWithReplacements({type:"text",id:"to",name:"to",className:"regular-text",value:meta.to})}
					<p class="description">Comma separated list of emails addresses.</p>
				</div>
				<div class="row">
					<label class="row-label" for="from">This notification should be sent from...</label>
					${Elements.inputWithReplacements({type:"text",id:"from",name:"from",className:"regular-text",value:meta.from})}
					<p class="description">A single email address which you'd like the notification to come from.</p>
				</div>
				<div class="row">
					<label class="row-label" for="reply-to">Replies should go to...</label>
					${Elements.inputWithReplacements({type:"text",id:"reply-to",name:"reply_to",className:"regular-text",value:meta.reply_to})}
					<p class="description">A single email address which replies to this notification should be sent
						to.</p>
				</div>
				<div class="row">
					<label class="row-label" for="subject">Subject line</label>
					${Elements.inputWithReplacementsAndEmojis({type:"text",id:"subject",name:"subject",className:"regular-text",value:meta.subject})}
					<p class="description">The subject line of the notification.</p>
				</div>
				<div class="row">
					<textarea id="note_text" name="note_text">${specialChars(meta.note_text)}</textarea>
				</div>
			</div>`},onMount:function(step,updateStepMeta){$("#subject, #reply-to, #from, #to").on("change",function(e){const $this=$(this);updateStepMeta({[$this.prop("name")]:$this.val()})});let saveTimer;tinymceElement("note_text",{tinymce:true,quicktags:true},content=>{clearTimeout(saveTimer);saveTimer=setTimeout(function(){updateStepMeta({note_text:content})},300)})},onDemount:function(){wp.editor.remove("note_text")}},account_created:{defaults:{role:[]},svg:`
		  <svg viewBox="0 0 32 31" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M1.473 29.667l-.96-.284a1 1 0 00.96 1.284v-1zm25.5 0v1a1 1 0 00.959-1.284l-.96.284zM14.223 14.5a6.083 6.083 0 01-6.084-6.083h-2a8.083 8.083 0 008.084 8.083v-2zM8.139 8.417a6.083 6.083 0 016.084-6.084v-2a8.083 8.083 0 00-8.084 8.084h2zM2.431 29.95c1.59-5.368 6.297-9.201 11.792-9.201v-2c-6.471 0-11.894 4.505-13.71 10.633l1.918.568zm11.792-9.201c5.495 0 10.2 3.833 11.79 9.2l1.918-.567c-1.815-6.128-7.237-10.633-13.708-10.633v2zm-12.75 9.917h25.5v-2h-25.5v2zm12.75-28.334a6.05 6.05 0 013.04.814l1.002-1.732A8.05 8.05 0 0014.223.333v2z"
				  fill="currentColor"/>
			  <path d="M31.223 9.833H17.057M24.14 2.75v14.167" stroke="currentColor" stroke-width="2"/>
		  </svg>
      `,title:function({ID:ID,data:data,meta:meta}){const roles=Editor.stepTypes.account_created.context.roles;if(meta.role&&meta.role.length===1){return`<b>${roles[meta.role[0]]}</b> is created`}else if(meta.role&&meta.role.length>1){return`${orList(meta.role.map(role=>`<b>${roles[role]}</b>`))} is created`}else{return"User Created"}},edit:function({ID:ID,data:data,meta:meta}){let roles=Editor.stepTypes.account_created.context.roles;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="roles">Select user roles.</label>
					${select({id:"roles",name:"role",multiple:true},roles,meta.role)}
					<p class="description">Runs when a new user is created with any of the defined roles.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){$("#roles").select2().on("change",function(e){let roles=$(this).val();updateStepMeta({role:roles})})}},apply_tag:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 35 37" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.682 20.946L18.848 7.78a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.598 30.863a1 1 0 01-1.414 0L5.682 22.36a1 1 0 010-1.414z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 24.1 12.445)" stroke="currentColor" stroke-width="1.2"/>
			  <path d="M34.246 31.738h-10m5-5v10" stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){let{tags:tags}=meta;if(tags){tags=tags.map(id=>parseInt(id))}if(!tags||tags.length===0){return"Apply tag"}else if(tags.length<4&&TagsStore.hasItems(tags)){return`Apply ${andList(tags.map(id=>`<b>${TagsStore.get(id).data.tag_name}</b>`))}`}else{return`Apply <b>${tags.length}</b> tags`}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.getItems().map(tag=>{return{text:tag.data.tag_name,value:tag.ID}});return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">Select tags to add.</label>
					${select({name:"tags",id:"tags",multiple:true},options,meta.tags?meta.tags.map(id=>parseInt(id)):[])}
					<p class="description">All of the defined tags will be added to the contact.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagOnMount(step,updateStepMeta)}},remove_tag:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.682 20.946L18.848 7.78a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.598 30.863a1 1 0 01-1.414 0L5.682 22.36a1 1 0 010-1.414z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 24.1 12.445)" stroke="currentColor" stroke-width="1.2"/>
			  <path d="M34.246 31.738h-10" stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){let{tags:tags}=meta;tags=tags.map(id=>parseInt(id));if(tags.length===0){return"Remove tags"}else if(tags.length<4&&TagsStore.hasItems(tags)){return`Remove ${andList(tags.map(id=>`<b>${TagsStore.get(id).data.tag_name}</b>`))}`}else{return`Remove <b>${tags.length}</b> tags`}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.getItems().map(tag=>{return{text:tag.data.tag_name,value:tag.ID}});return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">Select tags to remove.</label>
					${select({name:"tags",id:"tags",multiple:true},options,meta.tags.map(id=>parseInt(id)))}
					<p class="description">All of the defined tags will be removed from the contact.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagOnMount(step,updateStepMeta)}},tag_applied:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 39 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.356 21.311L18.522 8.145a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.272 31.228a1 1 0 01-1.414 0l-8.502-8.502a1 1 0 010-1.415z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 23.773 12.81)" stroke="currentColor" stroke-width="1.2"/>
			  <path d="M38.105 23.435l-8.5 8.5-4.25-4.25" stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){let{tags:tags=[],condition:condition="any"}=meta;tags=tags.map(id=>parseInt(id));if(!tags){return"Tag is applied"}else if(tags.length>=4){return condition==="all"?`<b>${tags.length}</b> tags are applied`:`Any of <b>${tags.length}</b> tags are applied`}else if(tags.length>1&&tags.length<4&&TagsStore.hasItems(tags)){const tagNames=tags.map(tag=>`<b>${TagsStore.get(tag).data.tag_name}</b>`);return condition==="all"?`${andList(tagNames)} are applied`:`${orList(tagNames)} is applied`}else if(tags.length===1){return`<b>${TagsStore.get(tags[0]).data.tag_name}</b> is applied`}else{return"Tag is applied"}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.getItems().map(tag=>{return{text:tag.data.tag_name,value:tag.ID}});const{tags:tags=[],condition:condition="any"}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">When <select id="condition">
						<option value="any" ${condition==="any"?"selected":""}>Any
						</option>
						<option value="all" ${condition==="all"?"selected":""}>All
						</option>
					</select> of the defined tags are applied</label>
					${select({name:"tags",id:"tags",multiple:true},options,tags.map(id=>parseInt(id)))}
					<p class="description">Runs when ${condition||"any"} of the provided tags are applied.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagWithConditionOnMount(step,updateStepMeta)}},tag_removed:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 37 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.649 21.311L18.815 8.145a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.565 31.228a1 1 0 01-1.414 0l-8.502-8.502a1 1 0 010-1.415z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 24.066 12.81)" stroke="currentColor" stroke-width="1.2"/>
			  <path
				  d="M33.703 27.6a.6.6 0 10-.848-.848l.848.848zm-4.354 2.657a.6.6 0 10.849.848l-.849-.848zm3.506.848a.6.6 0 10.848-.848l-.848.848zm-2.657-4.353a.6.6 0 10-.849.848l.849-.848zm2.657 0l-3.506 3.505.849.848 3.505-3.505-.848-.848zm.848 3.505l-3.505-3.505-.849.848 3.506 3.505.848-.848zm1.724-1.35a3.9 3.9 0 01-3.9 3.901v1.2a5.1 5.1 0 005.1-5.1h-1.2zm-3.9 3.901a3.9 3.9 0 01-3.902-3.9h-1.2a5.1 5.1 0 005.101 5.1v-1.2zm-3.902-3.9a3.9 3.9 0 013.901-3.902v-1.2a5.1 5.1 0 00-5.1 5.101h1.2zm3.901-3.902a3.9 3.9 0 013.901 3.901h1.2a5.1 5.1 0 00-5.1-5.1v1.2z"
				  fill="currentColor"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){let{tags:tags,condition:condition}=meta;tags=tags.map(id=>parseInt(id));if(!tags){return"Tag is removed"}else if(tags.length>=4){return condition==="all"?`<b>${tags.length}</b> tags are removed`:`Any of <b>${tags.length}</b> tags are removed`}else if(tags.length>1&&tags.length<4&&TagsStore.hasItems(tags)){const tagNames=tags.map(tag=>`<b>${TagsStore.get(tag).data.tag_name}</b>`);return condition==="all"?`${andList(tagNames)} are applied`:`${orList(tagNames)} is removed`}else if(tags.length===1){return`<b>${TagsStore.get(tags[0]).data.tag_name}</b> is removed`}else{return"Tag is removed"}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.getItems().map(tag=>{return{text:tag.data.tag_name,value:tag.ID}});const{condition:condition}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">When <select id="condition">
						<option value="any" ${condition==="any"?"selected":""}>Any
						</option>
						<option value="all" ${condition==="all"?"selected":""}>All
						</option>
					</select> of the defined tags are removed</label>
					${select({name:"tags",id:"tags",multiple:true},options,meta.tags.map(id=>parseInt(id)))}
					<p class="description">Runs when ${condition||"any"} of the provided tags are removed.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagWithConditionOnMount(step,updateStepMeta)}},delay_timer:{defaults:{...delayTimerDefaults},svg:`
		  <svg viewBox="0 0 15 18" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M7.327 4.489c3.468 0 6.279 2.652 6.279 5.923s-2.811 5.923-6.279 5.923c-3.467 0-6.278-2.652-6.278-5.923a5.7 5.7 0 011.427-3.76m1.997 1.337l2.854 2.961M5.33 1.335h4.28"
				  stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
		  </svg>
      `,title:function({meta:meta}){return delayTimerName({...delayTimerDefaults,...meta})},edit:function({ID:ID,data:data,meta:meta}){const{delay_amount:delay_amount,delay_type:delay_type,run_on_type:run_on_type,run_when:run_when,run_time:run_time,send_in_timezone:send_in_timezone,run_time_to:run_time_to,run_on_dow_type:run_on_dow_type,run_on_dow:run_on_dow,run_on_month_type:run_on_month_type,run_on_months:run_on_months,run_on_dom:run_on_dom}={...delayTimerDefaults,...meta};const delayTypes={minutes:"Minutes",hours:"Hours",days:"Days",weeks:"Weeks",months:"Months",years:"Years",none:"No delay"};const runOnTypes={any:"Any day",weekday:"Weekday",weekend:"Weekend",day_of_week:"Day of week",day_of_month:"Day of month"};const runWhenTypes={now:"Any time",later:"Specific time"};if(delay_type==="minutes"||delay_type==="hours"){runWhenTypes.between="Between"}const runOnDOWTypes={any:"Any",first:"First",second:"Second",third:"Third",fourth:"Fourth",last:"Last"};const runOnDaysOfMonth={};for(let i=1;i<32;i++){runOnDaysOfMonth[i]=i}runOnDaysOfMonth.last="last";const runOnMonthTypes={any:"Of any month",specific:"Of specific month(s)"};const runOnDaysOfWeek={monday:"Monday",tuesday:"Tuesday",wednesday:"Wednesday",thursday:"Thursday",friday:"Friday",saturday:"Saturday",sunday:"Sunday"};const runOnMonths={january:"January",february:"February",march:"March",april:"April",may:"May",june:"June",july:"July",august:"August",september:"September",october:"October",november:"November",december:"December"};const runOnMonthOptions=`
			<div style="margin-top: 10px"><select
				class="delay-input re-render"
				name="run_on_month_type">
				${createOptions(runOnMonthTypes,run_on_month_type)}</select>
				${run_on_month_type==="specific"?`<select class="select2" name="run_on_months" multiple>${createOptions(runOnMonths,run_on_months)}</select>`:""}
			</div>`;const daysOfWeekOptions=`
			<div style="margin-top: 10px"><select
				class="delay-input" name="run_on_dow_type">
				${createOptions(runOnDOWTypes,run_on_dow_type)}</select>
				<select class="select2" name="run_on_dow"
				        multiple>${createOptions(runOnDaysOfWeek,run_on_dow)}</select></div>
			${runOnMonthOptions}`;const daysOfMonthOptions=`
			<div style="margin-top: 10px"><select class="select2"
			                                      name="run_on_dom"
			                                      multiple>${createOptions(runOnDaysOfMonth,run_on_dom)}</select></div>
			${runOnMonthOptions}`;return`
			<div class="panel">
				<div class="row">
					<h3 class="delay-preview" style="font-weight: normal">${delayTimerName({...delayTimerDefaults,...meta})}</h3>
				</div>
				<div class="row">
					<label class="row-label">Wait at least...</label>
					<input class="delay-input" type="number" name="delay_amount" value="${delay_amount||3}"
					       placeholder="3"
					       ${delay_type==="none"?"disabled":""}>
					<select class="delay-input re-render" name="delay_type">
						${createOptions(delayTypes,delay_type)}
					</select>
				</div>
				<div class="row">
					<label class="row-label">Then run on...</label>
					<select class="delay-input re-render" name="run_on_type">
						${createOptions(runOnTypes,run_on_type)}
					</select>
					${run_on_type==="day_of_week"?daysOfWeekOptions:""}
					${run_on_type==="day_of_month"?daysOfMonthOptions:""}
				</div>
				<div class="row">
					<label class="row-label">Then run at...</label>
					${select({className:"delay-input re-render",name:"run_when"},runWhenTypes,run_when)}
					${run_when==="later"?`<input class="delay-input" type="time" name="run_time" value="${run_time}">`:""}
					${run_when==="between"?`<input class="delay-input" type="time" name="run_time" value="${run_time}"> and <input class="delay-input" type="time" name="run_time_to" value="${run_time_to}">`:""}
				</div>
			</div>`},onMount:function(step,updateStepMeta){const updatePreview=()=>{const{meta:meta}=Editor.getCurrentStep();$(".delay-preview").html(delayTimerName({...delayTimerDefaults,...meta}))};$(".select2").select2().on("change",function(e){Editor.updateCurrentStepMeta({[$(this).attr("name")]:$(this).val()});updatePreview()});$(".delay-input").on("change",function(e){Editor.updateCurrentStepMeta({[e.target.name]:e.target.value});if(e.target.classList.contains("re-render")){Editor.renderStepEdit();$(`[name=${e.target.name}]`).focus()}else{updatePreview()}});$(".delay-input").on("blur",function(e){updatePreview()})}},send_email:{defaults:{email_id:null},svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M32.007 16.695V8.487a1 1 0 00-1-1H4.674a1 1 0 00-1 1V26.32a1 1 0 001 1H17.84"
			        stroke="currentColor"
			        stroke-width="2"/>
			  <path d="M3.674 8.903l14.166 8.5 14.167-8.5M20.674 24.487h11.333m0 0l-4.25-4.25m4.25 4.25l-4.25 4.25"
			        stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){const{email_id:email_id}=meta;const email=EmailsStore.get(parseInt(email_id));const title=email_id&&email?email.data.title:"an email";return`Send <b>${title}</b>`},edit:function({ID:ID,data:data,meta:meta}){const{email_id:email_id}=meta;const email=EmailsStore.get(parseInt(email_id));const iframePreview=email=>{const{context:context}=email;return`
			  <div class="panel">
				  <div class="row">
					  <h3 class="subject-line">${email.data.subject}</h3>
					  <div id="from-line">
						  <img class="avatar" alt="avatar" src="${context.avatar}"/>
						  <div class="from">
							  <span class="from-name">${context.from_name}</span>
							  <span class="from-email">&lt;${context.from_email}&gt;</span>
						  </div>
					  </div>
				  </div>
				  <iframe id="email-preview"></iframe>
			  </div>`};return`
			${email_id&&email?iframePreview(email):""}
			<div class="panel">
				<div class="row with-columns">
					<div class="column">
						<label
							class="row-label">${email?"Select a different email to send...":"Select an email to send..."}</label>
						${select({id:"email-picker",name:"email_id"},EmailsStore.getItems().map(item=>{return{text:item.data.title,value:item.ID}},parseInt(email_id)))}
					</div>
					<div class="column">
						<label class="row-label">Or...</label>
						<button id="add-new-email" class="gh-button secondary">Create a new email</button>
					</div>
				</div>
			</div>`},onMount:function({meta:meta},updateStepMeta){const{email_id:email_id}=meta;const email=EmailsStore.get(parseInt(email_id));emailPicker("#email-picker",false,items=>{EmailsStore.itemsFetched(items)}).on("change",function(e){$(this).select2("close");updateStepMeta({email_id:parseInt($(this).val())},true)});$("#add-new-email").on("click",()=>{Editor.renderEmailTemplatePicker(updateStepMeta)});const fullFrame=frame=>{frame.height=frame.contentWindow.document.body.offsetHeight;frame.style.height=frame.contentWindow.document.body.offsetHeight+"px"};if(email){const frame=document.querySelector("iframe#email-preview");setFrameContent(frame,email.context.built);setTimeout(()=>{fullFrame(frame)},100);$("#render-email-edit").on("click",function(){Editor.renderEmailEditor(email)})}},validate:function({meta:meta},addError,addWarning){const{email_id:email_id}=meta;const email=EmailsStore.get(email_id);if(email_id&&email&&email.data.status!=="ready"){addWarning("Email is in draft mode. Please update status to ready!")}}},link_click:{defaults:{redirect_to:""},svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M8.594 4.671v22.305l5.329-5.219 3.525 8.607 3.278-1.23-3.688-8.718h7.14L8.593 4.67z"
			        stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({meta:meta}){const{redirect_to:redirect_to}=meta;if(redirect_to){const targetUrl=new URL(redirect_to);const homeUrl=new URL(Groundhogg.managed_page.root);if(targetUrl.hostname===homeUrl.hostname){return`Clicked to <b>${targetUrl.pathname}</b>`}else{return`Clicked to <b>${targetUrl.hostname}</b>`}}else{return"Clicked a tracking link"}},edit:function({meta:meta}){return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="copy-this">Copy this link</label>
					<input type="url" id="copy-this" class="code input regular-text"
					       value="${Groundhogg.managed_page.root}link/click/${"some-value"}" onfocus="this.select()"
					       readonly>
					<p class="description">Paste this link in any email or page. Once a contact clicks it the benchmark
						will be completed and the contact will be redirected to the page set below.</p>
				</div>
				<div class="row">
					<label class="row-label" for="copy">Then redirect contacts to...</label>
					${Elements.inputWithReplacements({type:"url",id:"redirect-to",name:"redirect_to",className:"regular-text",value:meta.redirect_to})}
					<p class="description">Upon clicking the tracking link contacts will be redirected to this page.</p>
				</div>
			</div>`},onMount:function({meta:meta},updateStepMeta){linkPicker("#redirect-to").on("change",function(e){updateStepMeta({redirect_to:$(this).val()})})}},email_confirmed:{svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M31.685 16.81V8.6a1 1 0 00-1-1H4.352a1 1 0 00-1 1v17.834a1 1 0 001 1h13.166"
			        stroke="currentColor"
			        stroke-width="2"/>
			  <path d="M3.352 9.018l14.166 8.5 14.167-8.5M33.102 20.35l-8.5 8.5-4.25-4.25" stroke="currentColor"
			        stroke-width="2"/>
		  </svg>`,edit:function({}){return`
			<div class="panel">
				<p>This benchmark is completed whenever a <a target="_blank"
				                                             href="https://help.groundhogg.io/article/381-how-to-confirm-an-email-address">contact
					confirms their email address.</a> It does not have any settings.</p>
			</div>`}},form_fill:{svg:`
		  <svg viewBox="0 0 35 31" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M1.5 29.802a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h32a.25.25 0 01.25.25v6a.25.25 0 01-.25.25h-32z"
				  fill="currentColor" stroke="currentColor" stroke-width="1.5"/>
			  <path
				  d="M1.5 7.733a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h32a.25.25 0 01.25.25v6a.25.25 0 01-.25.25h-32zm0 11a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h32a.25.25 0 01.25.25v6a.25.25 0 01-.25.25h-32z"
				  stroke="currentColor" stroke-width="1.5"/>
		  </svg>`,title:function({meta:meta}){return`Submits <b>${meta.form_name||"a form"}</b>`},edit:function({meta:meta}){const redirectToURL=`<label class="row-label">Redirect to this URL...</label>
		${Elements.inputWithReplacements({id:"success-page",name:"success_page",className:"regular-text",value:meta.success_page||""})}`;const stayOnPage=`<label class="row-label">Show this message...</label>
		${textAreaWithReplacementsAndEmojis({id:"success-message",name:"success_message",className:"regular-text",value:meta.success_message||""})}`;return`
			<div class="inline-label form-name" tabindex="0">
				<label>Form name:</label>
				<div class="input-wrap">
					${input({name:"form_name",id:"form-name",placeholder:"Form name...",value:meta.form_name||""})}
				</div>
			</div>
			<div id="edit-form"></div>
			<div class="panel">
				<div class="row">
					<p>Stay on page after submitting? ${toggle({name:"enable_ajax",id:"enable-ajax",checked:meta.enable_ajax,onLabel:"YES",offLabel:"NO"})}</p>
				</div>
				<div class="row">
					${meta.enable_ajax?stayOnPage:redirectToURL}
				</div>
			</div>`},onMount:function({meta:meta},updateStepMeta){linkPicker("#success-page").on("change",e=>{updateStepMeta({success_page:e.target.value})});$("#success-message").on("change",e=>{updateStepMeta({success_message:e.target.value})});$("#enable-ajax").on("change",e=>{updateStepMeta({enable_ajax:e.target.checked},true)});$("#form-name").on("change",e=>{updateStepMeta({form_name:e.target.value})});const editor=formBuilder("#edit-form",copyObject(meta.form),form=>{updateStepMeta({form:form})});editor.init()}}};for(const func in Editor){if(Editor.hasOwnProperty(func)&&typeof func==="function"){Editor[func]=Editor[func].bind(Editor)}}const fieldMappingTable=({fields:fields={},fieldMap:fieldMap={}})=>{const mappable=fields.map(({id:id,label:label},i)=>{return`<tr>
				<td><code>${specialChars(id)}</code></td>
				<td><code>${specialChars(label)}</code></td>
				<td>${Elements.mappableFields({dataKey:id,className:"mappable-field"},fieldMap&&fieldMap.hasOwnProperty(id)?fieldMap[id]:Groundhogg.fields.mappable.hasOwnProperty(id)?Groundhogg.fields.mappable[id]:[])}
				</td>
			</tr>`});return`
		<table class="mapping-table">
			<thead>
			<tr>
				<th>Field ID</th>
				<th>Field Label</th>
				<th>Map to</th>
			</tr>
			</thead>
			<tbody>${mappable.join("")}</tbody>
		</table>`};const fieldMappingTableOnMount=updateStepMeta=>{$(".mappable-field").select2().on("change",function(e){const{meta:meta}=Editor.getCurrentStep();updateStepMeta({field_map:{...meta.field_map,[$(this).data("key")]:$(this).val()}})})};const formPicker=(selector,type,onReceiveItems=i=>{})=>{return apiPicker(selector,`${apiRoutes.funnels}/form-integration`,false,false,getResults=d=>{onReceiveItems(d.forms);return d.forms.map(form=>({id:form.id,text:form.name}))},getParams=q=>({...q,type:type}))};const formsCache={_cache:{},set:function(type,forms){this._cache[type]=forms},getAll:function(type){return this._cache[type]},hasType:function(type){return typeof this._cache[type]!=="undefined"},get:function(type,id){return this.hasType(type)?this._cache[type].find(f=>f.id===id):false},fetch:function(type){return apiGet(`${apiRoutes.funnels}/form-integration`,{type:type}).then(d=>this.set(type,d.forms))}};const registerFormIntegration=(type,opts)=>{StepTypes.register(type,FormIntegration({type:type,...opts}))};const FormIntegration=({type:type,...rest})=>({type:type,defaults:{form_id:0,field_map:{}},title:function({meta:meta}){const{form_id:form_id}=meta;const form=formsCache.get(type,form_id);if(form){return`Submits <b>${form.name}</b>`}else{return`Submits <b></b>`}},edit:function({meta:meta}){const{form_id:form_id,field_map:field_map}=meta;const form=formsCache.get(type,form_id);return`
		  <div class="panel">
			  <div class="row">
				  <label class="row-label">Select a form...</label>
				  ${select({id:"form-id",name:"form_id"},formsCache.hasType(type)?formsCache.getAll(type).map(form=>({value:form.id,text:form.name})):[],form_id)}
			  </div>
			  <div class="row">
				  <div id="field-mapping">
					  ${form?fieldMappingTable({fields:form.fields,fieldMap:field_map}):""}
				  </div>
			  </div>
		  </div>`},onMount:function(step,updateStepMeta){formPicker("#form-id",type,items=>{formsCache.set(type,items)}).on("change",e=>{updateStepMeta({form_id:parseInt(e.target.value)},true)});fieldMappingTableOnMount(updateStepMeta)},preload:function({meta:meta}){if(meta.form_id){return formsCache.fetch(type)}},...rest});fill("beforeStepNotes.send_email",{render:function({ID:ID,meta:meta}){const{email_id:email_id}=meta;const email=EmailsStore.get(email_id);if(!email_id||!email){return""}return`
		  <button style="width: 100%" id="edit-email-right" class="gh-button secondary">Edit Email</button>
      `},onMount:function({ID:ID,meta:meta}){const{email_id:email_id}=meta;const email=EmailsStore.get(email_id);if(email_id&&email){$("#edit-email-right").on("click",()=>{Editor.renderEmailEditor(email)})}}});fill("beforeStepNotes.form_fill",{render:function({ID:ID,meta:meta}){if(!stepIsReal(ID)){return""}const copyValue=toCopy=>{return input({className:"code",value:toCopy,onfocus:"this.select()",readonly:true})};return`
		  <div id="form-embed-options" class="panel">
			  <div class="row">
				  <label class="row-label">Embed via Shortcode</label>
				  <div class="embed-option">${copyValue(`[gh_form id="${ID}"]`)}
				  </div>
			  </div>
			  <div class="row">
				  <label class="row-label">Embed via iFrame</label>
				  <div class="embed-option">${copyValue(`[gh_form id="${ID}"]`)}
				  </div>
			  </div>
		  </div>`}});Groundhogg.helpers={objectToProps:objectToProps,specialChars:specialChars,isString:isString};Groundhogg.funnelEditor=Editor;Groundhogg.funnelEditor.functions={slot:slot,fill:fill,slotsDemounted:slotsDemounted,slotsMounted:slotsMounted,FormIntegration:FormIntegration,registerFormIntegration:registerFormIntegration,getSteps:function(){return Editor.getSteps()},stepTitle:function(step){return StepTypes.getType(step.data.step_type).title(step)},registerStepType:function(type,opts){return StepTypes.register(type,opts)},registerStepPack:function(id,name,svg){return StepPacks.add(id,name,svg)},updateCurrentStepMeta:function(newMeta){return Editor.updateCurrentStepMeta(newMeta)},renderStepEdit:function(){return Editor.renderStepEdit()},getCurrentStep:function(){return Editor.getCurrentStep()},getCurrentStepMeta:function(){return Editor.getCurrentStep().meta},getProceedingSteps:function(stepId){const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return Editor.getSteps().filter(_step=>_step.data.step_order>step.data.step_order).sort((a,b)=>a.data.step_order-b.data.step_order)},getPrecedingSteps:function(stepId){const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return Editor.getSteps().filter(_step=>_step.data.step_order<step.data.step_order).sort((a,b)=>a.data.step_order-b.data.step_order)}};Groundhogg.funnelEditor.elements=Elements})(GroundhoggFunnel,jQuery);