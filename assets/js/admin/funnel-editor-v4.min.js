(function(Funnel,$){const TagsStore=Groundhogg.stores.tags;const EmailsStore=Groundhogg.stores.emails;const apiGet=Groundhogg.api.get;const apiPost=Groundhogg.api.post;const apiRoutes=Groundhogg.api.routes.v4;const{tinymceElement:tinymceElement,select:select}=Groundhogg.element;const{linkPicker:linkPicker,emailPicker:emailPicker,tagPicker:tagPicker}=Groundhogg.pickers;$.fn.serializeFormJSON=function(){var o={};var a=this.serializeArray();$.each(a,function(){if(o[this.name]){if(!o[this.name].push){o[this.name]=[o[this.name]]}o[this.name].push(this.value||"")}else{o[this.name]=this.value||""}});return o};const slot=(name,...args)=>{return SlotFillProvider.slot(name,...args)};const fill=(name,component)=>{return SlotFillProvider.fill(name,component)};const slotsMounted=()=>{return SlotFillProvider.slotsMounted()};const slotsDemounted=()=>{return SlotFillProvider.slotsDemounted()};const SlotFillProvider={fills:[],_slotsMounted:[],_slotsDemounted:[],slot:function(slotName,...args){this._slotsMounted.push({name:slotName,args:args});return this.fills.filter(fill=>fill.slot===slotName).map(fill=>fill.render(...args)).join("")},slotsMounted:function(){let slot;while(this._slotsMounted.length>0){slot=this._slotsMounted.pop();this.fills.filter(fill=>fill.slot===slot.name).forEach(fill=>{fill.onMount(...slot.args)});this._slotsDemounted.push(slot)}},slotsDemounted:function(){let slot;while(this._slotsDemounted.length>0){slot=this._slotsDemounted.pop();this.fills.filter(fill=>fill.slot===slot.name).forEach(fill=>{fill.onDemount(...slot.args)})}},fill:function(slot,component){this.fills.push({slot:slot,...{render:function(){},onMount:function(){},onDemount:function(){},...component}})}};const getStepType=type=>{return Editor.stepTypes.hasOwnProperty(type)?Editor.stepTypes[type]:StepTypes.getType("error")};const Editor={activeAddType:"actions",view:"addingStep",activeStep:{},htmlModules:{},isEditingTitle:false,stepFlowContextMenu:null,stepOpenInContextMenu:null,funnel:{ID:0,data:{},steps:[]},origFunnel:{ID:0,data:{},steps:[]},stepTypes:{},undoStates:[],redoStates:[],stepErrors:{},funnelErrors:[],htmlTemplates:{publishActions:function(status){if(status==="inactive"){return`
			  <button class="update-and-launch">Launch
				  <svg viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					  <path
						  d="M8.888 7.173a21.621 21.621 0 017.22-4.783m-7.22 4.783a21.766 21.766 0 00-2.97 3.697m2.97-3.697c-1.445-.778-4.935-1.2-7.335 3.334l2.364 2.364 2-2m10.19-8.481A21.709 21.709 0 0123.22.843a21.708 21.708 0 01-1.546 7.112M16.108 2.39l5.565 5.565M5.917 10.87l1.885 4.057m9.088.248a21.62 21.62 0 004.783-7.22m-4.783 7.22a21.771 21.771 0 01-3.698 2.97m3.698-2.97c.778 1.445 1.2 4.934-3.334 7.335l-2.364-2.364 2-2m0 0L9.136 16.26m0 0l-1.334-1.334m1.334 1.334l-2.71 2.71-.667-.666-.667-.667 2.71-2.71m6.42-5.087a1.886 1.886 0 112.668-2.667 1.886 1.886 0 01-2.668 2.667z"
						  stroke="currentColor" stroke-width="1.5"/>
				  </svg>
			  </button>`}else{return`
			  <button class="update">
				  <svg viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
					  <path
						  d="M1 21.956V2.995c0-.748.606-1.355 1.354-1.355H17.93l4.74 4.74v15.576c0 .748-.606 1.354-1.354 1.354H2.354A1.354 1.354 0 011 21.956z"
						  stroke="currentColor" stroke-width="1.5"/>
					  <path d="M14.544 16.539a2.709 2.709 0 11-5.418 0 2.709 2.709 0 015.418 0z" stroke="#fff"
					        stroke-width="1.5"/>
					  <path fill="currentColor" d="M5.619 6.298h9.634v2.846H5.619z"/>
				  </svg>
				  Update
			  </button>
			  <button class="deactivate">Deactivate
				  <svg viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
					  <path d="M16.337 15.535h-4.8V.735h4.8v14.8zm-10 0h-4.8V.735h4.8v14.8z" fill="currentColor"
					        stroke="currentColor"
					        stroke-width="1.2"/>
				  </svg>
			  </button>`}},funnelTitleEdit:function(title,isEditing){if(isEditing){return`<input type="text" class="funnel-title-edit regular-text" id="funnel-title-edit" name="funnel_title"
		                 value="${specialChars(title)}">`}else{return`<span class="title-inner">${specialChars(title)}</span><span class="pencil"><span class="dashicons dashicons-edit"></span></span>`}},stepEditPanel:function(step){const{ID:ID,data:data,meta:meta}=step;const{step_type:step_type,step_title:step_title,step_group:step_group}=data;const StepType=getStepType(step_type);let hasErrors=false;let errors=[];if(Editor.stepErrors.hasOwnProperty(ID)&&Editor.stepErrors[ID].length>0){hasErrors=true;errors=Editor.stepErrors[ID]}const updateStepMeta=meta=>{return Editor.updateCurrentStepMeta(meta)};const updateStep=data=>{return Editor.updateCurrentStep(data)};const slotArgs=[step,updateStepMeta,updateStep];return`
			${hasErrors?`<div class="step-errors">
                <ul>
                    ${errors.map(error=>`<li class="step-error"><span class="dashicons dashicons-warning"></span> ${error}</li>`).join("")}
                </ul>
            </div>`:""}
			<div class="step-edit">
				<div class="settings">
					${slot("beforeStepSettings",...slotArgs)}
					${slot(`beforeStepSettings.${step_type}`,...slotArgs)}
					${StepType.edit(...slotArgs)}
					${slot(`afterStepSettings.${step_type}`,...slotArgs)}
					${slot("afterStepSettings",...slotArgs)}
				</div>
				<div class="actions-and-notes">
					${slot("beforeStepNotes",...slotArgs)}
					${slot(`beforeStepNotes.${step_type}`,...slotArgs)}
					<div class="panel">
						<label class="row-label"><span class="dashicons dashicons-admin-comments"></span> Notes</label>
						<textarea rows="4" id="step-notes" class="notes full-width"
						          name="step_notes">${specialChars(meta.step_notes||"")}</textarea>
					</div>
					${slot(`afterStepNotes.${step_type}`,...slotArgs)}
					${slot("afterStepNotes",...slotArgs)}
				</div>
			</div>`},stepAddPanel:function(activeType){return`
			<div class="step-add">
				<div class="type-select">
					<button class="select-type actions ${activeType==="actions"&&"active"}" data-type="actions">
						${"Actions"}
					</button>
					<button class="select-type benchmarks ${activeType==="benchmarks"&&"active"}"
					        data-type="benchmarks">
						${"Benchmarks"}
					</button>
				</div>
				<div class="types">
					${Object.values(Editor.stepTypes).filter(step=>step.group+"s"===activeType).map(Editor.htmlTemplates.addStepCard).join("")}
				</div>
			</div>`},stepTypeSelect:function(type){return`
			<div class="type-select">
				<button class="select-type actions ${type==="actions"&&"active"}" data-type="actions">
					${"Actions"}
				</button>
				<button class="select-type benchmarks ${type==="benchmarks"&&"active"}" data-type="benchmarks">
					${"Benchmarks"}
				</button>
			</div>`},addStepCard:function(step){return`
			<div class="add-step ${step.type} ${step.group}" data-type="${step.type}" data-group="${step.group}"
			     title="${step.name}">
				${Editor.stepTypes[step.type].hasOwnProperty("svg")?`<div class="step-icon-svg">${Editor.stepTypes[step.type].svg}</div>`:`<img alt="${Editor.stepTypes[step.type].name}" class="step-icon"
				     src="${Editor.stepTypes[step.type].icon}"/>`}
				<p>${step.name}</p></div>`},stepFlowCard:function(step,activeStep){const{ID:ID,data:data,meta:meta}=step;const{step_type:step_type,step_title:step_title,step_group:step_group,step_order:step_order}=data;const StepType=getStepType(step_type);const origStep=Editor.origFunnel.steps.find(s=>s.ID===ID);let status;let hasErrors=false;if(Editor.stepErrors.hasOwnProperty(ID)&&Editor.stepErrors[ID].length>0){status="config-error";hasErrors=true}else if(origStep&&!objectEquals(step,origStep)){status="edited"}else if(!origStep){status="new"}else if(StepType.type==="error"){hasErrors=true}const nextStep=Editor.funnel.steps.find(step=>step.data.step_order===step_order+1);const prevStep=Editor.funnel.steps.find(step=>step.data.step_order===step_order-1);return`
			${step_group==="benchmark"?step_order===1?`<div class="text-helper until-helper"><span class="dashicons dashicons-filter"></span> Start the funnel when...</div>`:prevStep&&prevStep.data.step_group!=="benchmark"?'<div class="until-helper text-helper">Until...</div>':"":""}
			<div
				class="step ${step_type} ${step_group} ${activeStep===ID?"active":""} ${hasErrors?"has-errors":""}"
				data-id="${ID}">
				${StepType.hasOwnProperty("svg")?`<div class="icon-svg">${StepType.svg}</div>`:`<img alt="${StepType.name}" class="icon"
				     src="${StepType.icon}"/>`}
				<div class="details">
					<div class="step-title">${StepType.title(step)}</div>
					<div class="step-type">${StepType.name}</div>
				</div>
				<div class="step-status ${status}"></div>
				<div class="step-menu">
					<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"
					     fill-rule="evenodd" clip-rule="evenodd">
						<path
							d="M12 16a3.001 3.001 0 010 6 3.001 3.001 0 010-6zm0 1a2 2 0 11-.001 4.001A2 2 0 0112 17zm0-8a3.001 3.001 0 010 6 3.001 3.001 0 010-6zm0 1a2 2 0 11-.001 4.001A2 2 0 0112 10zm0-8a3.001 3.001 0 010 6 3.001 3.001 0 010-6zm0 1a2 2 0 11-.001 4.001A2 2 0 0112 3z"/>
					</svg>
					<ul>
						<li class="step-menu-edit">Edit</li>
						<li class="step-menu-move-up">Move up</li>
						<li class="step-menu-move-up">Move down</li>
						<li class="step-menu-new-step-before">Insert a step before</li>
						<li class="step-menu-new-step-after">Insert a step after</li>
						<li class="step-menu-duplicate">Duplicate</li>
						<li class="step-menu-delete">Delete</li>
					</ul>
				</div>
			</div>
			${step_group==="benchmark"&&nextStep?nextStep.data.step_group==="benchmark"?`<div class="or-helper text-helper">Or...</div>`:'<div class="then-helper text-helper">Then...</div>':""}
        `}},init:function(){var self=this;var $doc=$(document);this.loadFunnel(this.funnel);$doc.on("click",".step-add .select-type",function(){self.saveUndoState();self.activeAddType=$(this).data("type");self.renderStepAdd()});$doc.on("mouseleave",".step-flow .steps .step",function(e){const $step=$(this);$(".step-menu ul",$step).hide()});$doc.on("click",".step-flow .steps .step",function(e){const $step=$(this);switch(true){case $(e.target).is(".step-menu-duplicate"):const stepToCopy=self.funnel.steps.find(step=>step.ID===parseInt($step.data("id")));const newStep=copyObject(stepToCopy);newStep.ID=uniqid();self.addStep(newStep);break;case $(e.target).is(".step-menu-delete"):self.deleteStep(parseInt($step.data("id")));break;case $(e.target).is(".step-menu")||$(e.target).parent(".step-menu").length>0:$(".step-menu ul",$step).toggle();break;case $(e.target).is(".step-menu-edit"):default:const clickedStep=parseInt($step.data("id"));if(clickedStep===self.activeStep){return}self.saveUndoState();self.previousActiveStep=self.activeStep;self.activeStep=clickedStep;self.view="editingStep";self.renderStepFlow();self.renderStepEdit()}});$doc.on("click",".step-flow .add-new-step",function(){self.activeStep=null;self.view="addingStep";self.renderStepFlow();self.renderStepAdd()});$doc.on("click",".undo-and-redo .undo",function(){self.undo()});$doc.on("click",".undo-and-redo .redo",function(){self.redo()});$doc.on("click",".header-stuff .title",function(){if(!self.isEditingTitle){self.isEditingTitle=true;self.renderTitle()}});$doc.on("click",".publish-actions .deactivate",function(){self.deactivate()});$doc.on("click",".publish-actions .update-and-launch, .publish-actions .update",function(){self.commitChanges()});$(document).on("tinymce-editor-setup",function(event,editor){editor.settings.toolbar1="formatselect,bold,italic,bullist,numlist,blockquote,alignleft,aligncenter,alignright,link,spellchecker,wp_adv,dfw,groundhoggreplacementbtn,groundhoggemojibtn";editor.settings.toolbar2="strikethrough,hr,forecolor,pastetext,removeformat,charmap,outdent,indent,undo,redo,wp_help";editor.settings.height=200;editor.on("click",function(ed,e){$(document).trigger("to_mce")})});$doc.on("blur change keydown",".funnel-title-edit",function(e){if(e.type==="keydown"&&e.keyCode!==13){self.resizeTitleEdit();return}self.saveUndoState();self.funnel.data.title=e.target.value;self.isEditingTitle=false;self.update({data:{title:e.target.value}},false);self.renderTitle()});self.setupSortable();self.setupStepTypes();self.initStepFlowContextMenu();if(self.funnel.steps.find(step=>step.meta.tags&&step.meta.tags.length>0)){const preloadTags=self.funnel.steps.reduce((tagsArr,{meta:meta})=>{const{tags:tags}=meta;if(tags){tagsArr.push(...tags)}return tagsArr},[]);TagsStore.fetchItems({include:preloadTags,limit:preloadTags.length}).then(()=>{self.render()})}else{self.render()}},loadFunnel:function(funnel){this.funnel=funnel;this.origFunnel=copyObject(funnel);if(this.funnel.meta.edited){this.funnel.steps=this.funnel.meta.edited.steps}},setupSortable:function(){var self=this;$(".step-flow .steps").sortable({placeholder:"step-placeholder",cancel:".text-helper",start:function(e,ui){ui.placeholder.height(ui.item.height());ui.placeholder.width(ui.item.width())},receive:function(e,ui){self.saveUndoState();var type=$(ui.helper).data("type");var group=$(ui.helper).data("group");var id=Date.now();$(ui.helper).addClass("step");$(ui.helper).data("id",id);self.addStep({ID:id,data:{ID:id,funnel_id:Editor.funnel.ID,step_title:Editor.stepTypes[type].name,step_type:type,step_group:group,step_order:$(ui.helper).prevAll(".step").length},meta:StepTypes.getType(type).defaults})},update:function(e,ui){self.saveUndoState();self.syncOrderWithFlow();self.autoSaveEditedFunnel();self.renderStepFlow();self.renderStepEdit()}}).disableSelection()},setupStepTypes:function(){for(var prop in this.stepTypes){if(Object.prototype.hasOwnProperty.call(this.stepTypes,prop)&&Object.prototype.hasOwnProperty.call(StepTypes,prop)){Object.assign(this.stepTypes[prop],{...StepTypes.default,...StepTypes[prop]});Object.assign(StepTypes[prop],{...this.stepTypes[prop]})}else{Object.assign(this.stepTypes[prop],StepTypes.default)}}},getStepType:function(type){},initStepFlowContextMenu:function(){var self=this;this.stepFlowContextMenu=createContextMenu({menuClassName:"step-context-menu",targetSelector:".step-flow .steps .step",items:[{key:"duplicate",text:"Duplicate"},{key:"delete",text:"Delete"}],onOpen:function(e,el){self.stepOpenInContextMenu=parseInt(el.dataset.id)},onSelect:function(key){switch(key){case"delete":self.deleteStep(self.stepOpenInContextMenu);break;case"duplicate":const stepToCopy=self.funnel.steps.find(step=>step.ID===self.stepOpenInContextMenu);const newStep=copyObject(stepToCopy);newStep.ID=uniqid();self.addStep(newStep);break}}});this.stepFlowContextMenu.init()},renderStepFlow:function(){var self=this;this.checkForStepErrors();var steps=this.funnel.steps.sort((a,b)=>a.data.step_order-b.data.step_order).map(step=>self.htmlTemplates.stepFlowCard(step,self.activeStep)).join("");$(".step-flow .steps").html(steps)},addStepError:function(id,error){if(!this.stepErrors.hasOwnProperty(id)){this.stepErrors[id]=[]}this.stepErrors[id].push(error)},checkForStepErrors:function(){const self=this;this.stepErrors=[];this.funnel.steps.forEach(step=>{const errors=[];const{step_group:step_group,step_order:step_order,step_type:step_type}=step.data;const typeHandler=getStepType(step_type);if(step_group==="action"&&step_order===1){errors.push("Actions cannot be at the start of a funnel.")}else if(typeHandler.type==="error"){errors.push("Settings not found.")}if(typeHandler){typeHandler.validate(step,errors)}errors.forEach(error=>this.addStepError(step.ID,error))})},mountStep:function(step){step=step||this.funnel.steps.find(s=>s.ID===this.activeStep);if(!step){return}const updateStepMeta=meta=>{return this.updateCurrentStepMeta(meta)};const updateStep=data=>{return this.updateCurrentStep(data)};const StepType=getStepType(step.data.step_type);StepType.onMount(step,updateStepMeta,updateStep);this.lastStepEditMounted=this.activeStep},demountStep:function(step){step=step||this.funnel.steps.find(s=>s.ID===this.lastStepEditMounted);if(!step){return}const updateStepMeta=meta=>{return this.updateCurrentStepMeta(meta)};const updateStep=data=>{return this.updateCurrentStep(data)};const StepType=getStepType(step.data.step_type);StepType.onDemount(step,updateStepMeta,updateStep);this.lastStepEditMounted=null},renderStepEdit:function(){if(this.view!=="editingStep"){return}var self=this;const step=this.funnel.steps.find(step=>step.ID===this.activeStep);const previousStep=this.funnel.steps.find(step=>step.ID===this.previousActiveStep);if(this.activeStep===this.lastStepEditMounted){this.demountStep(step)}else if(previousStep){this.demountStep(previousStep)}slotsDemounted();$("#control-panel").html(this.htmlTemplates.stepEditPanel(step));this.mountStep(step);$("#step-notes").on("change",function(e){self.updateCurrentStepMeta({step_notes:$(this).val()})});slotsMounted()},renderStepAdd:function(){if(this.view!=="addingStep"){return}this.demountStep();$("#control-panel").html(this.htmlTemplates.stepAddPanel(this.activeAddType));this.renderStepFlow();$(".add-step").draggable({connectToSortable:".step-flow .steps",helper:"clone",revert:"invalid",revertDuration:0})},renderTitle:function(){$(".header-stuff .title").html(this.htmlTemplates.funnelTitleEdit(this.funnel.data.title,this.isEditingTitle));if(this.isEditingTitle){$(".funnel-title-edit").focus();this.resizeTitleEdit()}},resizeTitleEdit:function(){$(".funnel-title-edit").width(this.funnel.data.title.length+1+"ch")},render:function(){this.renderTitle();this.renderPublishActions();this.renderStepFlow();this.renderStepAdd();this.renderStepEdit()},renderPublishActions:function(){$(".publish-actions").html(this.htmlTemplates.publishActions(this.funnel.data.status))},syncOrderWithFlow:function(){var self=this;$(".step-flow .steps .step").each(function(i){self.funnel.steps.find(step=>step.ID===$(this).data("id")).data.step_order=i+1});this.fixStepOrders()},saveUndoState:function(){const{view:view,funnel:funnel,activeStep:activeStep,activeAddType:activeAddType,isEditingTitle:isEditingTitle}=this;this.undoStates.push({view:view,activeStep:activeStep,isEditingTitle:isEditingTitle,activeAddType:activeAddType,funnel:copyObject(funnel)})},undo:function(){var lastState=this.undoStates.pop();if(!lastState){return}Object.assign(this,lastState);this.redoStates.push(lastState);this.render()},redo:function(){var lastState=this.redoStates.pop();if(!lastState){return}Object.assign(this,lastState);this.undoStates.push(lastState);this.render()},update:function(data,reload=true){var self=this;apiPost(`${apiRoutes.funnels}/${self.funnel.ID}`,data).then(data=>{if(data.item&&reload){self.loadFunnel(data.item);self.render()}})},activate:function(){this.update({data:{status:"active"}})},deactivate:function(){this.update({data:{status:"inactive"}})},commitChanges:function(){var self=this;if(objectEquals(this.funnel.steps,this.origFunnel.steps)){return this.activate()}if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}else if(this.abortController){this.abortController.abort()}apiPost(`${apiRoutes.funnels}/${self.funnel.ID}/commit`,{edited:{steps:self.funnel.steps}}).then(data=>{if(data.item){self.loadFunnel(data.item);self.render()}else if(data.code==="error"){const{errors:errors}=data.data.data;errors.forEach(error=>{const{errors:errors,error_data:error_data}=error;for(const code in errors){if(errors.hasOwnProperty(code)){self.addStepError(error_data[code].step.ID,errors[code][0])}}});self.render()}})},addStep:function(step){if(!step){return}this.saveUndoState();this.funnel.steps.push(step);this.fixStepOrders();this.renderStepFlow();this.autoSaveEditedFunnel()},fixStepOrders:function(){let newOrder=1;this.funnel.steps.sort((a,b)=>a.data.step_order-b.data.step_order).forEach(step=>{step.data.step_order=newOrder;newOrder++})},deleteStep:function(stepId){if(!stepId){return}this.saveUndoState();this.funnel.steps=this.funnel.steps.filter(step=>step.ID!==stepId);this.fixStepOrders();this.renderStepFlow();if(this.activeStep===stepId){this.view="addingStep";this.renderStepAdd();this.activeStep=null}this.autoSaveEditedFunnel()},getStep:function(stepId){return this.funnel.steps.find(step=>step.ID===stepId)},getSteps:function(){return this.funnel.steps},getCurrentStep:function(){return this.getStep(this.activeStep)},updateStep:function(stepId,newData){const step=this.getStep(stepId);const newStep={...step,...newData};newStep.data.step_title=StepTypes.getType(newStep.data.step_type).title(newStep);var toReplace=this.funnel.steps.findIndex(step=>step.ID===stepId);this.autoSaveEditedFunnel();this.saveUndoState();if(toReplace!==-1){this.funnel.steps[toReplace]=newStep}this.renderStepFlow()},updateCurrentStep:function(newData){this.updateStep(this.activeStep,newData)},updateCurrentStepMeta:function(newMeta){const{data:data,meta:meta}=this.getCurrentStep();this.updateStep(this.activeStep,{meta:{...meta,...newMeta}})},autoSaveTimeout:null,abortController:null,autoSaveEditedFunnel:function(){var self=this;if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}this.autoSaveTimeout=setTimeout(()=>{self.autoSaveTimeout=null;self.abortController=new AbortController;const{signal:signal}=self.abortController;apiPost(`${apiRoutes.funnels}/${self.funnel.ID}/meta`,{edited:{steps:self.funnel.steps,title:self.funnel.data.title}},{signal:signal}).then(data=>self.abortController=null)},3e3)},...Funnel};$(function(){Editor.init()});function copyObject(object,initial){initial=initial||{};return $.extend(true,initial,object)}function objectEquals(a,b){return JSON.stringify(a)===JSON.stringify(b)}function uniqid(){return Date.now()}function andList(array,text="and"){if(array.length===1){return array[0]}return`${array.slice(0,-1).join(", ")} ${text} ${array[array.length-1]}`}function orList(array){return andList(array,"or")}function isString(string){return typeof string==="string"}const specialChars=string=>{if(!isString(string)){return string}return string.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;")};const kebabize=str=>{return str.split("").map((letter,idx)=>{return letter.toUpperCase()===letter?`${idx!==0?"-":""}${letter.toLowerCase()}`:letter}).join("")};const objectToStyle=object=>{const props=[];for(const prop in object){if(object.hasOwnProperty(prop)){props.push(`${kebabize(prop)}:${specialChars(object[prop])}`)}}return props.join(";")};const objectToProps=object=>{const props=[];for(const prop in object){if(object.hasOwnProperty(prop)){switch(prop){case"className":props.push(`class="${specialChars(object[prop])}"`);break;case"style":props.push(`style="${specialChars(objectToStyle(object[prop]))}"`);break;default:props.push(`${kebabize(prop)}="${specialChars(object[prop])}"`);break}}}return props.join(" ")};const Elements={input:function(props){props={type:"text",className:"input",...props};return`<input ${objectToProps(props)}/>`},select:function(props,options,selected){return`<select ${objectToProps(props)}>${createOptions(options,selected)}</select>`},option:function(value,text,selected){return`
		  <option value="${specialChars(value)}" ${selected?"selected":""}>${text}</option>`},mappableFields:function(props,selected){return Elements.select(props,{0:"-- Do not map --",...Groundhogg.fields.mappable},selected)},inputWithReplacementsAndEmojis:function({type:type="text",name:name,id:id,value:value,className:className,placeholder:placeholder=""},replacements=true,emojis=true){const classList=[replacements&&"input-with-replacements",emojis&&"input-with-emojis"];return`
		  <div class="input-wrap ${classList.filter(c=>c).join(" ")}">
			  <input type="${type}" id="${id}" name="${name}" value="${specialChars(value)||""}" class="${className}"
			         placeholder="${specialChars(placeholder)}">
			  ${emojis?`<button class="emoji-picker-start" title="insert emoji"><span class="dashicons dashicons-smiley"></span>
			  </button>`:""}
			  ${replacements?`<button class="replacements-picker-start" title="insert replacement"><span
				  class="dashicons dashicons-admin-users"></span></button>`:""}
		  </div>`},inputWithReplacements:function(atts){return Elements.inputWithReplacementsAndEmojis(atts,true,false)},inputWithEmojis:function(atts){return Elements.inputWithReplacementsAndEmojis(atts,false,true)},textAreaWithReplacementsAndEmojis:function({name:name,id:id,value:value}){},textAreaWithReplacements:function({name:name,id:id,value:value}){},textAreaWithEmojis:function({name:name,id:id,value:value}){}};const createOptions=(options,selected)=>{const optionsString=[];if(Array.isArray(options)){options.forEach(option=>{optionsString.push(Elements.option(option,option,Array.isArray(selected)?selected.indexOf(option)!==-1:option===selected))})}else{for(const option in options){if(options.hasOwnProperty(option)){optionsString.push(Elements.option(option,options[option],Array.isArray(selected)?selected.indexOf(option)!==-1:option===selected))}}}return optionsString.join("")};function ordinal_suffix_of(i){var j=i%10,k=i%100;if(j==1&&k!=11){return i+"st"}if(j==2&&k!=12){return i+"nd"}if(j==3&&k!=13){return i+"rd"}return i+"th"}const tagWithConditionOnMount=(step,updateStepMeta)=>{tagOnMount(step,updateStepMeta);$("#condition").change(function(e){updateStepMeta({condition:$(this).val()})})};const tagOnMount=(step,updateStepMeta)=>{return tagPicker("#tags").on("change",function(e){const tags=$(this).val();const newTags=tags.filter(tag=>!TagsStore.hasItem(parseInt(tag)));if(newTags.length>0){TagsStore.validate(tags).then(tags=>{updateStepMeta({tags:tags.map(tag=>tag.ID)})})}else{updateStepMeta({tags:tags.map(tag=>parseInt(tag))})}})};const delayTimerDefaults={delay_amount:3,delay_type:"days",run_on_type:"any",run_when:"now",run_time:"09:00:00",send_in_timezone:false,run_time_to:"17:00:00",run_on_dow_type:"any",run_on_dow:[],run_on_month_type:"any",run_on_months:[],run_on_dom:[]};const delayTimerName=({delay_amount:delay_amount,delay_type:delay_type,run_on_type:run_on_type,run_when:run_when,run_time:run_time,send_in_timezone:send_in_timezone,run_time_to:run_time_to,run_on_dow_type:run_on_dow_type,run_on_dow:run_on_dow,run_on_month_type:run_on_month_type,run_on_months:run_on_months,run_on_dom:run_on_dom})=>{const preview=[];if(delay_type==="none"&&run_on_type==="any"){switch(run_when){default:case"now":return`Run at any time`;case"later":return`Run at <b>${run_time}</b>`;case"between":return`Run between <b>${run_time}</b> and <b>${run_time_to}</b>`}}if(delay_type!=="none"){preview.push(`Wait at least <b>${delay_amount} ${delay_type}</b> and then`)}if(run_on_type!=="any"){preview.push(preview.length>0?"run on":"Run on")}switch(run_on_type){default:case"any":preview.push("run");break;case"weekday":preview.push("<b>a weekday</b>");break;case"weekend":preview.push("<b>a weekend</b>");break;case"day_of_week":let dowList=orList(run_on_dow.map(i=>`<b>${i}</b>`));dowList=`${run_on_dow_type==="any"?`any ${dowList}`:`the ${run_on_dow_type} ${dowList}`}`;if(run_on_month_type==="specific"){preview.push(`${dowList} in ${orList(run_on_months.map(i=>`<b>${i}</b>`))}`)}else{preview.push(`${dowList} of <b>any month</b>`)}break;case"day_of_month":const dayList=run_on_dom.length>0?`the ${orList(run_on_dom.map(i=>`<b>${ordinal_suffix_of(i)}</b>`))}`:`<b>any day</b>`;if(run_on_month_type==="specific"){preview.push(`${dayList} in ${orList(run_on_months.map(i=>`<b>${i}</b>`))}`)}else{preview.push(`${dayList} of <b>any month</b>`)}break}switch(run_when){default:case"now":preview.push(`at any time`);break;case"later":preview.push(`at <b>${run_time}</b>`);break;case"between":preview.push(`between <b>${run_time}</b> and <b>${run_time_to}</b>`);break}return preview.join(" ")};const StepTypes={register:function(type,opts){this[type]={type:type,...opts}},getType:function(type){if(!this.hasOwnProperty(type)){return this.default}return Object.assign({},this.default,this[type])},error:{svg:`
		  <svg viewBox="0 0 20 15" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M10.733.534a1 1 0 00-1.656 0L.462 13.25a1 1 0 00.828 1.56h17.23a1 1 0 00.827-1.56L10.733.534z"
			        fill="#E91F4F"/>
			  <path
				  d="M10.48 9.322a.092.092 0 00-.011.036c0 .008-.004.016-.012.024-.016.016-.076.024-.18.024h-.888c-.032 0-.048-.008-.048-.024-.024-.024-.036-.092-.036-.204l-.168-5.496c-.008-.168 0-.268.024-.3.024-.032.092-.048.204-.048h1.068c.112 0 .176.016.192.048.024.032.032.132.024.3l-.168 5.496v.144zm-.587 2.496a.794.794 0 01-.6-.252.8.8 0 01-.24-.589.84.84 0 01.24-.6.794.794 0 01.6-.252c.24 0 .44.085.6.252a.82.82 0 01.252.6.78.78 0 01-.252.588.794.794 0 01-.6.253z"
				  fill="#fff"/>
		  </svg>`,name:"Error",type:"error",title:function({data:data}){return`<b>${data.step_type}</b> settings not found`},edit:function({ID:ID,data:data,meta:meta}){return`
			<div class="panel">
				<p>The settings for this step could not be found. This may be because you deactivated an extension or
					integration which registered this step type.</p>
				<p>Reactivate the plugin or delete this step to continue.</p>
			</div>`},onMount:function(){}},default:{promiseController:null,title:function({ID:ID,data:data,meta:meta}){return data.step_title},edit:function({ID:ID,data:data,meta:meta}){return`
			<div class="panel">
				<form id="settings-form" method="post" action="">
					<div id="dynamic-step-settings">
						<div class="gh-loader"></div>
					</div>
				</form>
			</div>`},onMount:function(step){var self=this;self.promiseController=new AbortController;const{signal:signal}=self.promiseController;apiPost(`${apiRoutes.steps}/html`,step,{signal:signal}).then(r=>{$("#dynamic-step-settings").html(r.html);$(document).trigger("gh-init-pickers");const $form=$("#settings-form");$form.on("submit",function(e){e.preventDefault();return false}).on("change",function(e){e.preventDefault();const meta=$(this).serializeFormJSON();Editor.updateCurrentStepMeta(meta)});self.promiseController=null}).catch(()=>{})},onDemount:function(){if(this.promiseController){this.promiseController.abort()}},validate:function(step,errors){},defaults:{}},apply_note:{defaults:{note_text:""},svg:`
		  <svg viewBox="0 0 42 37" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M41.508 31.654h-10m5-5v10" stroke="currentColor" stroke-width="2"/>
			  <path
				  d="M27.508 11.988h1a1 1 0 00-.293-.708l-.707.708zm-7.084-7.084l.708-.707a1 1 0 00-.708-.293v1zm0 7.084h-1v1h1v-1zm7.084 17.416h-1 1zm-18.834 2h17.834v-2H8.674v2zm-2-25.5v23.5h2v-23.5h-2zm21.834 23.5V11.988h-2v17.416h2zm-8.084-25.5H8.674v2h11.75v-2zm7.79 7.376l-7.082-7.083-1.415 1.414 7.084 7.084 1.414-1.415zm-8.79-6.376v7.084h2V4.904h-2zm1 8.084h7.084v-2h-7.084v2zm-8.5 5.666h11.334v-2H11.925v2zm0 5.667h11.334v-2H11.925v2zm14.584 7.083a2 2 0 002-2h-2v2zm-17.834-2h-2a2 2 0 002 2v-2zm0-23.5v-2a2 2 0 00-2 2h2z"
				  fill="currentColor"/>
		  </svg>`,title:function({meta:meta}){return"Apply Note"},edit:function({meta:meta}){const{note_text:note_text}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="note_text">Add the following note the the contact...</label>
					<textarea id="note_text" name="note_text">${note_text||""}</textarea>
				</div>
			</div>`},onMount:function(step,updateStepMeta){let saveTimer;tinymceElement("note_text",{tinymce:true,quicktags:true},content=>{clearTimeout(saveTimer);saveTimer=setTimeout(function(){updateStepMeta({note_text:content})},300)})},onDemount:function(){wp.editor.remove("note_text")}},admin_notification:{svg:`
		  <svg viewBox="0 0 31 43" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <mask id="a" fill="#fff">
				  <path d="M16.956 12.576a1.368 1.368 0 11-2.737 0h2.737z"/>
			  </mask>
			  <path
				  d="M16.956 12.576h1.5v-1.5h-1.5v1.5zm-2.737 0v-1.5h-1.5v1.5h1.5zm1.237 0c0-.072.059-.131.131-.131v3a2.868 2.868 0 002.869-2.869h-3zm.131-.131c.073 0 .132.059.132.131h-3a2.868 2.868 0 002.868 2.869v-3zm-1.368 1.631H16.955v-1.5-1.5h-.001-.001-.002-.003-.001-.001-.001-.001-.001-.001-.001-.004-.001-.004-.002-.001-.002-.001-.002-.002-.001-.002-.002-.003-.002-.002-.002-.002-.002-.002-.002-.005-.002-.002-.005-.002-.005-.005-.005-.003-.005-.003-.003-.011-.003-.003-.003-.003-.016-.02-.007-.007H16.76 16.683 14.22v3z"
				  fill="currentColor" mask="url(#a)"/>
			  <path
				  d="M20.376 11.208v.75A.75.75 0 0021 10.792l-.624.416zm-1.369-2.053h-.75a.75.75 0 00.126.417l.624-.417zm-6.842 0l.624.417a.75.75 0 00.126-.417h-.75zm-1.368 2.053l-.624-.416a.75.75 0 00.624 1.166v-.75zm2.118-4.79a2.671 2.671 0 012.671-2.67v-1.5a4.171 4.171 0 00-4.17 4.17h1.5zm2.671-2.67a2.671 2.671 0 012.671 2.67h1.5a4.171 4.171 0 00-4.17-4.17v1.5zm-3.42 8.21h6.841v-1.5h-6.842v1.5zm6.841 0h1.369v-1.5h-1.369v1.5zm.75-2.803V6.42h-1.5v2.736h1.5zM21 10.792L19.63 8.74l-1.248.833 1.369 2.052L21 10.792zM11.415 6.42v2.736h1.5V6.42h-1.5zm.126 2.32l-1.368 2.053 1.248.832 1.368-2.052-1.248-.833zm-.744 3.22h1.368v-1.5h-1.368v1.5zm5.54-8.961V.945h-1.5v2.053h1.5z"
				  fill="currentColor"/>
			  <path d="M29.413 14.097L1.08 25.43l8.5 2.5 19.833-13.833zm0 0l-12.75 26.916-2.5-8.5 15.25-18.416z"
			        stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
		  </svg>`,defaults:{to:"{owner_email}",from:"{owner_email}",reply_to:"{email}",subject:'Notification from "{first}"',note_text:""},title:function({meta:meta}){const{to:to}=meta;return`Send notification to ${andList(to.split(",").map(address=>`<b>${address.trim()}</b>`))}`},edit:function({meta:meta}){return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="to">Send this notification to...</label>
					${Elements.inputWithReplacements({type:"text",id:"to",name:"to",className:"regular-text",value:meta.to})}
					<p class="description">Comma separated list of emails addresses.</p>
				</div>
				<div class="row">
					<label class="row-label" for="from">This notification should be sent from...</label>
					${Elements.inputWithReplacements({type:"text",id:"from",name:"from",className:"regular-text",value:meta.from})}
					<p class="description">A single email address which you'd like the notification to come from.</p>
				</div>
				<div class="row">
					<label class="row-label" for="reply-to">Replies should go to...</label>
					${Elements.inputWithReplacements({type:"text",id:"reply-to",name:"reply_to",className:"regular-text",value:meta.reply_to})}
					<p class="description">A single email address which replies to this notification should be sent
						to.</p>
				</div>
				<div class="row">
					<label class="row-label" for="subject">Subject line</label>
					${Elements.inputWithReplacementsAndEmojis({type:"text",id:"subject",name:"subject",className:"regular-text",value:meta.subject})}
					<p class="description">The subject line of the notification.</p>
				</div>
				<div class="row">
					<textarea id="note_text" name="note_text">${specialChars(meta.note_text)}</textarea>
				</div>
			</div>`},onMount:function(step,updateStepMeta){$("#subject, #reply-to, #from, #to").on("change",function(e){const $this=$(this);updateStepMeta({[$this.prop("name")]:$this.val()})});let saveTimer;tinymceElement("note_text",{tinymce:true,quicktags:true},content=>{clearTimeout(saveTimer);saveTimer=setTimeout(function(){updateStepMeta({note_text:content})},300)})},onDemount:function(){wp.editor.remove("note_text")}},account_created:{defaults:{role:[]},svg:`
		  <svg viewBox="0 0 35 35" xmlns="http://www.w3.org/2000/svg">
			  <g clip-path="url(#clip0)">
				  <path
					  d="M4.473 31.684l-.96-.284a1 1 0 00.96 1.284v-1zm25.5 0v1a1 1 0 00.959-1.284l-.96.284zm-12.75-15.166a6.083 6.083 0 01-6.084-6.084h-2a8.083 8.083 0 008.084 8.084v-2zm-6.084-6.084a6.083 6.083 0 016.084-6.083v-2a8.083 8.083 0 00-8.084 8.083h2zM5.431 31.968c1.59-5.368 6.297-9.2 11.792-9.2v-2c-6.471 0-11.894 4.505-13.71 10.632l1.918.568zm11.792-9.2c5.495 0 10.2 3.832 11.79 9.2l1.918-.568c-1.815-6.127-7.237-10.632-13.708-10.632v2zm-12.75 9.916h25.5v-2h-25.5v2zm12.75-28.333a6.05 6.05 0 013.04.813l1.002-1.731a8.05 8.05 0 00-4.042-1.082v2z"
					  fill="currentColor"/>
				  <path d="M34.223 11.85H20.057m7.083-7.082v14.166" stroke="currentColor" stroke-width="2"/>
			  </g>
			  <defs>
				  <clipPath id="clip0">
					  <path fill="#fff" transform="translate(.223 .518)" d="M0 0h34v34H0z"/>
				  </clipPath>
			  </defs>
		  </svg>
      `,title:function({ID:ID,data:data,meta:meta}){const roles=Editor.stepTypes.account_created.context.roles;if(meta.role&&meta.role.length===1){return`<b>${roles[meta.role[0]]}</b> is created`}else if(meta.role&&meta.role.length>1){return`${orList(meta.role.map(role=>`<b>${roles[role]}</b>`))} is created`}else{return"User Created"}},edit:function({ID:ID,data:data,meta:meta}){let options=[];let roles=Editor.stepTypes.account_created.context.roles;for(var role in roles){if(Object.prototype.hasOwnProperty.call(roles,role)){options.push(Elements.option(role,roles[role],meta.role.indexOf(role)>=0))}}return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="roles">Select user roles.</label>
					<select name="role" id="roles" multiple>
						${options.join("")}
					</select>
					<p class="description">Runs when a new user is created with any of the defined roles.</p>
				</div>
			</div>`},onMount:function(){const $roles=$("#roles");$roles.select2();$roles.on("change",function(e){let roles=$(this).val();Editor.updateCurrentStep({meta:{role:roles}})})}},create_user:{title:function({ID:ID,data:data,meta:meta}){const roles=Editor.stepTypes.account_created.context.roles;if(meta.role){return`Create <b>${roles[meta.role]}</b>`}else{return"Create user"}},edit:function({ID:ID,data:data,meta:meta}){let options=[];let roles=Editor.stepTypes.account_created.context.roles;for(var role in roles){if(Object.prototype.hasOwnProperty.call(roles,role)){options.push(Elements.option(role,roles[role],meta.role===role))}}return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="roles">Select the role of the new user.</label>
					<select name="role" id="role">
						${options.join("")}
					</select>
					<p class="description">Runs when a new user is created with any of the defined roles.</p>
				</div>
			</div>
			<div class="panel">
				<div class="row">
					<label for="disable-notification">
						<input type="checkbox" id="disable-notification" value="1"
						       ${meta.disable_notification?"checked":""}>
						Disable the account created notification sent to the user.</label>
				</div>
			</div>`},onMount:function(){const $role=$("#role");$role.select2();$role.on("change",function(e){let role=$(this).val();Editor.updateCurrentStep({meta:{...Editor.getCurrentStep().meta,role:role}})});$("#disable-notification").on("change",function(e){var checked=this.checked;Editor.updateCurrentStep({meta:{...Editor.getCurrentStep().meta,disable_notification:checked}})})}},apply_tag:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 35 37" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.682 20.946L18.848 7.78a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.598 30.863a1 1 0 01-1.414 0L5.682 22.36a1 1 0 010-1.414z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 24.1 12.445)" stroke="currentColor" stroke-width="1.2"/>
			  <path d="M34.246 31.738h-10m5-5v10" stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){const{tags:tags}=meta;if(tags.length===0){return"Apply tags"}else if(tags.length<4&&TagsStore.hasItems()){return`Apply ${andList(tags.map(id=>`<b>${TagsStore.get(id).data.tag_name}</b>`))}`}else{return`Apply <b>${tags.length}</b> tags`}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.items.map(tag=>Elements.option(tag.ID,tag.data.tag_name,meta.tags&&meta.tags.indexOf(tag.ID)!==-1));return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">Select tags to add.</label>
					<select name="tags" id="tags" multiple>${options.join("")}</select>
					<p class="description">All of the defined tags will be added to the contact.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagOnMount(step,updateStepMeta)}},remove_tag:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.682 20.946L18.848 7.78a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.598 30.863a1 1 0 01-1.414 0L5.682 22.36a1 1 0 010-1.414z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 24.1 12.445)" stroke="currentColor" stroke-width="1.2"/>
			  <path d="M34.246 31.738h-10" stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){const{tags:tags}=meta;if(tags.length===0){return"Remove tags"}else if(tags.length<4&&TagsStore.hasItems()){return`Remove ${andList(tags.map(id=>`<b>${TagsStore.get(id).data.tag_name}</b>`))}`}else{return`Remove <b>${tags.length}</b> tags`}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.items.map(tag=>Elements.option(tag.ID,tag.data.tag_name,meta.tags&&meta.tags.indexOf(tag.ID)!==-1));return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">Select tags to remove.</label>
					<select name="tags" id="tags" multiple>${options.join("")}</select>
					<p class="description">All of the defined tags will be removed from the contact.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagOnMount(step,updateStepMeta)}},tag_applied:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 39 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.356 21.311L18.522 8.145a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.272 31.228a1 1 0 01-1.414 0l-8.502-8.502a1 1 0 010-1.415z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 23.773 12.81)" stroke="currentColor" stroke-width="1.2"/>
			  <path d="M38.105 23.435l-8.5 8.5-4.25-4.25" stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){if(!meta.tags){return"Tag is applied"}const{tags:tags,condition:condition}=meta;if(tags.length>1){return condition==="all"?`<b>${tags.length}</b> tags are applied`:`Any of <b>${tags.length}</b> tags are applied`}else if(tags.length===1){return`<b>${tags.length}</b> tag is applied`}else{return"Tag is applied"}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.items.map(tag=>Elements.option(tag.ID,tag.data.tag_name,meta.tags&&meta.tags.indexOf(tag.ID)!==-1));const{condition:condition}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">When <select id="condition">
						<option value="any" ${condition==="any"?"selected":""}>Any</option>
						<option value="all" ${condition==="all"?"selected":""}>All</option>
					</select> of the defined tags are applied</label>
					<select name="tags" id="tags" multiple>${options.join("")}</select>
					<p class="description">Runs when ${condition||"any"} of the provided tags are applied.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagWithConditionOnMount(step,updateStepMeta)}},tag_removed:{defaults:{tags:[]},svg:`
		  <svg viewBox="0 0 37 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M5.649 21.311L18.815 8.145a1 1 0 01.707-.293h8.503a1 1 0 011 1v8.502a1 1 0 01-.293.707L15.565 31.228a1 1 0 01-1.414 0l-8.502-8.502a1 1 0 010-1.415z"
				  stroke="currentColor" stroke-width="2"/>
			  <circle r="1.525" transform="matrix(-1 0 0 1 24.066 12.81)" stroke="currentColor" stroke-width="1.2"/>
			  <path
				  d="M33.703 27.6a.6.6 0 10-.848-.848l.848.848zm-4.354 2.657a.6.6 0 10.849.848l-.849-.848zm3.506.848a.6.6 0 10.848-.848l-.848.848zm-2.657-4.353a.6.6 0 10-.849.848l.849-.848zm2.657 0l-3.506 3.505.849.848 3.505-3.505-.848-.848zm.848 3.505l-3.505-3.505-.849.848 3.506 3.505.848-.848zm1.724-1.35a3.9 3.9 0 01-3.9 3.901v1.2a5.1 5.1 0 005.1-5.1h-1.2zm-3.9 3.901a3.9 3.9 0 01-3.902-3.9h-1.2a5.1 5.1 0 005.101 5.1v-1.2zm-3.902-3.9a3.9 3.9 0 013.901-3.902v-1.2a5.1 5.1 0 00-5.1 5.101h1.2zm3.901-3.902a3.9 3.9 0 013.901 3.901h1.2a5.1 5.1 0 00-5.1-5.1v1.2z"
				  fill="currentColor"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){if(!meta.tags){return"Tag is removed"}const{tags:tags,condition:condition}=meta;if(tags.length>1){return condition==="all"?`<b>${tags.length}</b> tags are removed`:`Any of <b>${tags.length}</b> tags are removed`}else if(tags.length===1){return`<b>${tags.length}</b> tag is removed`}else{return"Tag is removed"}},edit:function({ID:ID,data:data,meta:meta}){let options=TagsStore.items.map(tag=>Elements.option(tag.ID,tag.data.tag_name,meta.tags&&meta.tags.indexOf(tag.ID)!==-1));const{condition:condition}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="tags">When <select id="condition">
						<option value="any" ${condition==="any"?"selected":""}>Any</option>
						<option value="all" ${condition==="all"?"selected":""}>All</option>
					</select> of the defined tags are removed</label>
					<select name="tags" id="tags" multiple>${options.join("")}</select>
					<p class="description">Runs when ${condition||"any"} of the provided tags are removed.</p>
				</div>
			</div>`},onMount:function(step,updateStepMeta){tagWithConditionOnMount(step,updateStepMeta)}},delay_timer:{defaults:{...delayTimerDefaults},svg:`
		  <svg viewBox="0 0 15 18" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M7.327 4.489c3.468 0 6.279 2.652 6.279 5.923s-2.811 5.923-6.279 5.923c-3.467 0-6.278-2.652-6.278-5.923a5.7 5.7 0 011.427-3.76m1.997 1.337l2.854 2.961M5.33 1.335h4.28"
				  stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round"/>
		  </svg>
      `,title:function({meta:meta}){return delayTimerName({...delayTimerDefaults,...meta})},edit:function({ID:ID,data:data,meta:meta}){const{delay_amount:delay_amount,delay_type:delay_type,run_on_type:run_on_type,run_when:run_when,run_time:run_time,send_in_timezone:send_in_timezone,run_time_to:run_time_to,run_on_dow_type:run_on_dow_type,run_on_dow:run_on_dow,run_on_month_type:run_on_month_type,run_on_months:run_on_months,run_on_dom:run_on_dom}={...delayTimerDefaults,...meta};const delayTypes={minutes:"Minutes",hours:"Hours",days:"Days",weeks:"Weeks",months:"Months",years:"Years",none:"No delay"};const runOnTypes={any:"Any day",weekday:"Weekday",weekend:"Weekend",day_of_week:"Day of week",day_of_month:"Day of month"};const runWhenTypes={now:"Any time",later:"Specific time"};if(delay_type==="minutes"||delay_type==="hours"){runWhenTypes.between="Between"}const runOnDOWTypes={any:"Any",first:"First",second:"Second",third:"Third",fourth:"Fourth",last:"Last"};const runOnDaysOfMonth={};for(let i=1;i<32;i++){runOnDaysOfMonth[i]=i}runOnDaysOfMonth.last="last";const runOnMonthTypes={any:"Of any month",specific:"Of specific month(s)"};const runOnDaysOfWeek={monday:"Monday",tuesday:"Tuesday",wednesday:"Wednesday",thursday:"Thursday",friday:"Friday",saturday:"Saturday",sunday:"Sunday"};const runOnMonths={january:"January",february:"February",march:"March",april:"April",may:"May",june:"June",july:"July",august:"August",september:"September",october:"October",november:"November",december:"December"};const runOnMonthOptions=`
			<div style="margin-top: 10px"><select
				class="delay-input re-render"
				name="run_on_month_type">
				${createOptions(runOnMonthTypes,run_on_month_type)}</select>
				${run_on_month_type==="specific"?`<select class="select2" name="run_on_months" multiple>${createOptions(runOnMonths,run_on_months)}</select>`:""}
			</div>`;const daysOfWeekOptions=`
			<div style="margin-top: 10px"><select
				class="delay-input" name="run_on_dow_type">
				${createOptions(runOnDOWTypes,run_on_dow_type)}</select>
				<select class="select2" name="run_on_dow"
				        multiple>${createOptions(runOnDaysOfWeek,run_on_dow)}</select></div>
			${runOnMonthOptions}`;const daysOfMonthOptions=`
			<div style="margin-top: 10px"><select class="select2"
			                                      name="run_on_dom"
			                                      multiple>${createOptions(runOnDaysOfMonth,run_on_dom)}</select></div>
			${runOnMonthOptions}`;return`
			<div class="panel">
				<div class="row">
					<h3 class="delay-preview" style="font-weight: normal">${delayTimerName({...delayTimerDefaults,...meta})}</h3>
				</div>
				<div class="row">
					<label class="row-label">Wait at least...</label>
					<input class="delay-input" type="number" name="delay_amount" value="${delay_amount||3}"
					       placeholder="3"
					       ${delay_type==="none"?"disabled":""}>
					<select class="delay-input re-render" name="delay_type">
						${createOptions(delayTypes,delay_type)}
					</select>
				</div>
				<div class="row">
					<label class="row-label">Then run on...</label>
					<select class="delay-input re-render" name="run_on_type">
						${createOptions(runOnTypes,run_on_type)}
					</select>
					${run_on_type==="day_of_week"?daysOfWeekOptions:""}
					${run_on_type==="day_of_month"?daysOfMonthOptions:""}
				</div>
				<div class="row">
					<label class="row-label">Then run at...</label>
					<select class="delay-input re-render" name="run_when">
						${createOptions(runWhenTypes,run_when)}
					</select>
					${run_when==="later"?`<input class="delay-input" type="time" name="run_time" value="${run_time}">`:""}
					${run_when==="between"?`<input class="delay-input" type="time" name="run_time" value="${run_time}"> and <input class="delay-input" type="time" name="run_time_to" value="${run_time_to}">`:""}
				</div>
			</div>`},onMount:function(step){const updatePreview=()=>{const{meta:meta}=Editor.getCurrentStep();$(".delay-preview").html(delayTimerName({...delayTimerDefaults,...meta}))};$(".select2").select2().on("change",function(e){Editor.updateCurrentStepMeta({[$(this).attr("name")]:$(this).val()});updatePreview()});$(".delay-input").on("change",function(e){Editor.updateCurrentStepMeta({[e.target.name]:e.target.value});if(e.target.classList.contains("re-render")){Editor.renderStepEdit();$(`[name=${e.target.name}]`).focus()}else{updatePreview()}});$(".delay-input").on("blur",function(e){updatePreview()})}},send_email:{defaults:{email_id:null},svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M32.007 16.695V8.487a1 1 0 00-1-1H4.674a1 1 0 00-1 1V26.32a1 1 0 001 1H17.84"
			        stroke="currentColor"
			        stroke-width="2"/>
			  <path d="M3.674 8.903l14.166 8.5 14.167-8.5M20.674 24.487h11.333m0 0l-4.25-4.25m4.25 4.25l-4.25 4.25"
			        stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({ID:ID,data:data,meta:meta}){return`Send Email`},edit:function({ID:ID,data:data,meta:meta}){const{email_id:email_id}=meta;return`
			<div class="panel">
				<div class="row">
					<label class="row-label">Select an email to send...</label>
					${select({id:"email-picker",name:"email_id"})}
				</div>
			</div>`},onMount:function(step,updateStepMeta){emailPicker("#email-picker").on("change",function(e){updateStepMeta({email_id:parseInt($(this).val())});Editor.renderStepEdit()})}},link_click:{defaults:{redirect_to:""},svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M8.594 4.671v22.305l5.329-5.219 3.525 8.607 3.278-1.23-3.688-8.718h7.14L8.593 4.67z"
			        stroke="currentColor" stroke-width="2"/>
		  </svg>`,title:function({meta:meta}){const{redirect_to:redirect_to}=meta;if(redirect_to){const targetUrl=new URL(redirect_to);const homeUrl=new URL(Groundhogg.managed_page.root);if(targetUrl.hostname===homeUrl.hostname){return`Clicked to <b>${targetUrl.pathname}</b>`}else{return`Clicked to <b>${targetUrl.hostname}</b>`}}else{return"Clicked a tracking link"}},edit:function({meta:meta}){return`
			<div class="panel">
				<div class="row">
					<label class="row-label" for="copy-this">Copy this link</label>
					<input type="url" id="copy-this" class="code input regular-text"
					       value="${Groundhogg.managed_page.root}/link/click/${"some-value"}" onfocus="this.select()"
					       readonly>
					<p class="description">Paste this link in any email or page. Once a contact clicks it the benchmark
						will be completed and the contact will be redirected to the page set below.</p>
				</div>
				<div class="row">
					<label class="row-label" for="copy">Then redirect contacts to...</label>
					${Elements.inputWithReplacements({type:"url",id:"redirect-to",name:"redirect_to",className:"regular-text",value:meta.redirect_to})}
					<p class="description">Upon clicking the tracking link contacts will be redirected to this page.</p>
				</div>
			</div>`},onMount:function({meta:meta},updateStepMeta){$("#redirect-to").on("change",function(e){updateStepMeta({redirect_to:$(this).val()})});linkPicker("#redirect-to")}},email_confirmed:{svg:`
		  <svg viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path d="M31.685 16.81V8.6a1 1 0 00-1-1H4.352a1 1 0 00-1 1v17.834a1 1 0 001 1h13.166"
			        stroke="currentColor"
			        stroke-width="2"/>
			  <path d="M3.352 9.018l14.166 8.5 14.167-8.5M33.102 20.35l-8.5 8.5-4.25-4.25" stroke="currentColor"
			        stroke-width="2"/>
		  </svg>`,edit:function({}){return`
			<div class="panel">
				<p>This benchmark is completed whenever a <a target="_blank"
				                                             href="https://help.groundhogg.io/article/381-how-to-confirm-an-email-address">contact
					confirms their email address.</a> It does not have any settings.</p>
			</div>`}},form_fill:{svg:`
		  <svg viewBox="0 0 35 31" fill="none" xmlns="http://www.w3.org/2000/svg">
			  <path
				  d="M1.5 29.802a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h32a.25.25 0 01.25.25v6a.25.25 0 01-.25.25h-32z"
				  fill="currentColor" stroke="currentColor" stroke-width="1.5"/>
			  <path
				  d="M1.5 7.733a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h32a.25.25 0 01.25.25v6a.25.25 0 01-.25.25h-32zm0 11a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h32a.25.25 0 01.25.25v6a.25.25 0 01-.25.25h-32z"
				  stroke="currentColor" stroke-width="1.5"/>
		  </svg>`,title:function({}){return"form"},edit:function({meta:meta}){return`
			<div id="edit-form"></div>
			<div class="panel">
				<div class=""></div>
			</div>`},onMount:function({}){}}};for(const func in Editor){if(Editor.hasOwnProperty(func)&&typeof func==="function"){Editor[func]=Editor[func].bind(Editor)}}Groundhogg.helpers={objectToProps:objectToProps,specialChars:specialChars,isString:isString};Groundhogg.funnelEditor=Editor;Groundhogg.funnelEditor.functions={slot:slot,fill:fill,slotsDemounted:slotsDemounted,slotsMounted:slotsMounted,getSteps:function(){return Editor.getSteps()},stepTitle:function(step){return StepTypes.getType(step.data.step_type).title(step)},registerStepType:function(type,opts){return StepTypes.register(type,opts)},updateCurrentStepMeta:function(newMeta){return Editor.updateCurrentStepMeta(newMeta)},renderStepEdit:function(){return Editor.renderStepEdit()},getCurrentStep:function(){return Editor.getCurrentStep()},getCurrentStepMeta:function(){return Editor.getCurrentStep().meta},getProceedingSteps:function(stepId){const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return Editor.getSteps().filter(_step=>_step.data.step_order>step.data.step_order).sort((a,b)=>a.data.step_order-b.data.step_order)},getPrecedingSteps:function(stepId){const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return Editor.getSteps().filter(_step=>_step.data.step_order<step.data.step_order).sort((a,b)=>a.data.step_order-b.data.step_order)}};Groundhogg.funnelEditor.elements=Elements})(GroundhoggFunnel,jQuery);