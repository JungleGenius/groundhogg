(function(Funnel,$){const{tags:TagsStore,emails:EmailsStore,funnels:FunnelsStore,campaigns:CampaignsStore,contacts:ContactsStore,searches:SearchesStore}=Groundhogg.stores;const{stepTypeSelect:stepTypeSelect}=Groundhogg;const{get:apiGet,post:apiPost,delete:apiDelete,patch:apiPatch,routes:routes}=Groundhogg.api;const{formatNumber:formatNumber,formatTime:formatTime,formatDate:formatDate,formatDateTime:formatDateTime}=Groundhogg.formatting;const{v4:apiRoutes}=routes;const{createFilters:createFilters}=Groundhogg.filters.functions;const{icons:icons,improveTinyMCE:improveTinyMCE,buttonToggle:buttonToggle,dialog:dialog,confirmationModal:confirmationModal,dangerConfirmationModal:dangerConfirmationModal,loadingModal:loadingModal,modal:modal,button:button,select:select,input:input,textarea:textarea,objectEquals:objectEquals,copyObject:copyObject,uniqid:uniqid,specialChars:specialChars,regexp:regexp,breadcrumbs:breadcrumbs,adminPageURL:adminPageURL,tooltip:tooltip,toggle:toggle,loadingDots:loadingDots,savingModal:savingModal,bold:bold,moreMenu:moreMenu,clickInsideElement:clickInsideElement,progressBar:progressBar}=Groundhogg.element;const{campaignPicker:campaignPicker,emailPicker:emailPicker,searchesPicker:searchesPicker}=Groundhogg.pickers;const{StepTypes:StepTypes,StepPacks:StepPacks}=Groundhogg;const{__:__,_x:_x,_n:_n,_nx:_nx,sprintf:sprintf}=wp.i18n;const toEditorButton=()=>`\n\t\t<button id="close-email-editor" class="gh-button secondary text icon">\n\t\t\t${icons.close}\n\t\t</button>`;const slot=(name,...args)=>SlotFillProvider.slot(name,...args);const fill=(name,component)=>SlotFillProvider.fill(name,component);const slotsMounted=()=>SlotFillProvider.slotsMounted();const slotsDemounted=()=>SlotFillProvider.slotsDemounted();const stepIsReal=stepId=>Editor.origFunnel.steps.find((step=>step.ID===stepId));const SlotFillProvider={fills:[],_slotsMounted:[],_slotsDemounted:[],slot(slotName,...args){this._slotsMounted.push({name:slotName,args:args});return this.fills.filter((fill=>fill.slot===slotName)).map((fill=>fill.render(...args))).join("")},slotsMounted(){let slot;while(this._slotsMounted.length>0){slot=this._slotsMounted.pop();this.fills.filter((fill=>fill.slot===slot.name)).forEach((fill=>{fill.onMount(...slot.args)}));this._slotsDemounted.push(slot)}},slotsDemounted(){let slot;while(this._slotsDemounted.length>0){slot=this._slotsDemounted.pop();this.fills.filter((fill=>fill.slot===slot.name)).forEach((fill=>{fill.onDemount(...slot.args)}))}},fill(slot,component){this.fills.push({slot:slot,...{render(){},onMount(){},onDemount(){},...component}})}};const Editor={activeAddType:"actions",view:"addingStep",activeStep:{},htmlModules:{},isEditingTitle:false,stepFlowContextMenu:null,stepOpenInContextMenu:null,funnel:{ID:0,data:{},steps:[]},origFunnel:{ID:0,data:{},steps:[]},undoStates:[],redoStates:[],stepErrors:{},stepWarnings:{},funnelErrors:[],htmlTemplates:{container(){return`\n\t\t\t<div id="funnel-editor" class="editor">\n\t\t\t\t<div class="editor-header">\n\t\t\t\t\t<div class="back-to-admin"></div>\n\t\t\t\t\t<div class="header-stuff">\n\t\t\t\t\t\t<div class="title-wrap">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="header-actions">\n\t\t\t\t\t\t\t<div class="undo-and-redo"></div>\n\t\t\t\t\t\t\t<div class="publish-actions">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="flow-and-edit">\n\t\t\t\t\t<div class="step-flow">\n\t\t\t\t\t\t<div class="steps"></div>\n\t\t\t\t\t\t<div class="add-new-step-wrapper">\n\t\t\t\t\t\t\t<button class="gh-button secondary add-new-step">\n\t\t\t\t\t\t\t\t${__("Add New Step","groundhogg")}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id="control-panel">\n\t\t\t\t\t\t<div class="step-add">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>`},undoRedoActions(){return`\n\t\t\t<div class="undo-and-redo">\n\t\t\t\t<button class="redo dashicon-button" ${Editor.redoStates.length?"":"disabled"}><span\n\t\t\t\t\tclass="dashicons dashicons-redo"></span></button>\n\t\t\t\t<button class="undo dashicon-button" ${Editor.undoStates.length?"":"disabled"}><span\n\t\t\t\t\tclass="dashicons dashicons-undo"></span></button>\n\t\t\t</div>`},publishActions(status){const moreMenu=`\n\t\t\t<button id="more-menu" class="gh-button secondary text icon">\n\t\t\t\t${icons.verticalDots}\n\t\t\t</button>`;if(status==="inactive"){return`\n\t\t\t  <button class="gh-button action update-and-launch">\n\t\t\t\t  ${_x("Launch","when publishing a funnel","groundhogg")}\n\t\t\t\t  ${icons.rocket}\n\t\t\t  </button>${moreMenu}`}else{return`\n\t\t\t  <button class="deactivate gh-button text danger">\n\t\t\t\t  ${_x("Deactivate","when deactivating a funnel","groundhogg")}\n\t\t\t  </button>\n\t\t\t  <button class="update gh-button primary"\n\t\t\t          ${objectEquals(Editor.funnel.steps,Editor.origFunnel.steps)||Object.keys(Editor.stepErrors).length>0?"disabled":""}>\n\t\t\t\t  ${icons.save}\n\t\t\t\t  ${_x("Update","funnel editor","groundhogg")}\n\t\t\t  </button>\n\t\t\t  ${moreMenu}`}},funnelTitleEdit(title,isEditing){const titleEdit=()=>input({id:"funnel-title-edit",name:"funnel_title",value:title});const titleDisplay=()=>`<span id="title">${specialChars(title)}</span><span class="dashicons dashicons-edit"></span>`;return`<h1 class="breadcrumbs">${breadcrumbs([__("Funnels","groundhogg"),isEditing?titleEdit():titleDisplay()])}</h1>`},stepEditPanel(step){const{ID:ID,data:data,meta:meta}=step;const{step_type:step_type,step_group:step_group}=data;const StepType=StepTypes.getType(step_type);let hasErrors=false;let errors=[];let hasWarnings=false;let warnings=[];if(Editor.stepErrors.hasOwnProperty(ID)&&Editor.stepErrors[ID].length>0){hasErrors=true;errors=Editor.stepErrors[ID]}if(Editor.stepWarnings.hasOwnProperty(ID)&&Editor.stepWarnings[ID].length>0){hasWarnings=true;warnings=Editor.stepWarnings[ID]}const updateStepMeta=(meta,reRenderStepEdit=false)=>Editor.updateCurrentStepMeta(meta,reRenderStepEdit);const updateStep=(data,reRenderStepEdit=false)=>Editor.updateCurrentStep(data,reRenderStepEdit);const benchmarkPanel=()=>`\n\t\t\t  <div class="panel benchmark-settings">\n\t\t\t\t  <div class="row">\n\t\t\t\t\t  ${isStartingStep(step.ID)?"":`<label class="row-label">${__("Allow contacts to enter the funnel at this step?","groundhogg")}</label>\n\t\t\t\t\t  ${toggle({name:"is_entry_point",id:"is-entry-point",checked:data.is_entry,onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}\n\t\t\t\t  </div>`}\n\t\t\t\t\t  <div class="row">\n\t\t\t\t\t\t  <label\n\t\t\t\t\t\t\t  class="row-label">${__("Track a conversion whenever this step is completed.","groundhogg")}</label>\n\t\t\t\t\t\t  ${toggle({name:"is_conversion",id:"is-conversion",checked:data.is_conversion,onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>`;const slotArgs=[step,updateStepMeta,updateStep];return`\n\t\t\t${hasErrors?`<div class="step-errors">\n                <ul>\n                    ${errors.map((error=>`<li class="step-error"><span class="dashicons dashicons-warning"></span> ${error}</li>`)).join("")}\n                </ul>\n            </div>`:""}\n\t\t\t${hasWarnings?`<div class="step-warnings">\n                <ul>\n                    ${warnings.map((warning=>`<li class="step-warning"><span class="dashicons dashicons-warning"></span> ${warning}</li>`)).join("")}\n                </ul>\n            </div>`:""}\n\t\t\t<div class="step-edit ${step_type} ${step_group}">\n\t\t\t\t<div class="settings">\n\t\t\t\t\t${slot("beforeStepSettings",...slotArgs)}\n\t\t\t\t\t${slot(`beforeStepSettings.${step_type}`,...slotArgs)}\n\t\t\t\t\t${StepType.edit(...slotArgs)}\n\t\t\t\t\t${slot(`afterStepSettings.${step_type}`,...slotArgs)}\n\t\t\t\t\t${slot("afterStepSettings",...slotArgs)}\n\t\t\t\t</div>\n\t\t\t\t<div class="actions-and-notes">\n\t\t\t\t\t${slot("beforeStepNotes",...slotArgs)}\n\t\t\t\t\t${slot(`beforeStepNotes.${step_type}`,...slotArgs)}\n\t\t\t\t\t<div class="panel">\n\t\t\t\t\t\t<label class="row-label"><span class="dashicons dashicons-admin-comments"></span> ${__("Notes","groundhogg")}</label>\n\t\t\t\t\t\t${textarea({rows:4,id:"step-notes",class:"notes full-width",name:"step_notes",value:meta.step_notes,placeholder:__("Notes about the step...","groundhogg")})}\t</div>\n\t\t\t\t\t${step_group==="benchmark"?benchmarkPanel():""}\n\t\t\t\t\t${slot(`afterStepNotes.${step_type}`,...slotArgs)}\n\t\t\t\t\t${slot("afterStepNotes",...slotArgs)}\n\t\t\t\t</div>\n\t\t\t</div>`},stepAddPanel(activeType,search="",pack=""){return`\n\t\t\t<div class="step-add">\n\t\t\t\t<div class="step-add-filters">\n\t\t\t\t\t<div class="type-select">\n\t\t\t\t\t\t<button class="select-type actions ${activeType==="actions"&&"active"}" data-type="actions">\n\t\t\t\t\t\t\t${_x("Actions","group of step types","groundhogg")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class="select-type benchmarks ${activeType==="benchmarks"&&"active"}"\n\t\t\t\t\t\t        data-type="benchmarks">\n\t\t\t\t\t\t\t${_x("Benchmarks","group of step types","groundhogg")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t${input({id:"search-steps",name:"search_steps",type:"search",className:"search-steps",placeholder:_x("Search...","groundhogg"),value:search})}\n\t\t\t\t\t${select({id:"pack-filter",name:"pack_filter"},[{text:__("Filter by pack...","groundhogg"),value:""},...Object.values(StepPacks.packs).map((pack=>({value:pack.id,text:pack.name})))],pack)}\n\t\t\t\t</div>\n\t\t\t\t<div id="types" class="types">\n\t\t\t\t</div>\n\t\t\t</div>`},addStepCard(step){const pack=StepPacks.get(step.pack);return`\n\t\t\t<div class="add-step ${step.type} ${step.group}" data-type="${step.type}" data-group="${step.group}"\n\t\t\t     title="${step.name}">\n\t\t\t\t${slot("beforeAddStepCard",step)}\n\t\t\t\t${slot("beforeAddStepCard."+step.type,step)}\n\t\t\t\t${typeof pack!=="undefined"&&pack.id!=="core"?`<div class="pack">${pack.svg?pack.svg:`<span class="pack-name">${pack.name}</span>`}</div>`:""}\n\t\t\t\t${step.hasOwnProperty("svg")?`<div class="step-icon-svg">${step.svg}</div>`:`<img alt="${step.name}" class="step-icon"\n\t\t\t\t     src="${step.icon}"/>`}\n\t\t\t\t<p>${step.name}</p>\n\t\t\t\t${slot("afterAddStepCard."+step.type,step)}\n\t\t\t\t${slot("afterAddStepCard",step)}\n\t\t\t</div>`},stepFlowCard(step,activeStep){const{ID:ID,data:data,meta:meta}=step;const{step_type:step_type,step_title:step_title,step_group:step_group,step_order:step_order,is_entry:is_entry}=data;const StepType=StepTypes.getType(step_type);const origStep=Editor.origFunnel.steps.find((s=>s.ID===ID));let status;let hasErrors=false;let hasWarnings=false;if(Editor.stepErrors.hasOwnProperty(ID)&&Editor.stepErrors[ID].length>0){status="config-error";hasErrors=true}else if(Editor.stepWarnings.hasOwnProperty(ID)&&Editor.stepWarnings[ID].length>0){status="config-warning";hasWarnings=true}else if(origStep&&!objectEquals(step,origStep)){status="edited"}else if(!origStep){status="new"}else if(StepType.type==="error"){hasErrors=true}const nextStep=Editor.funnel.steps.find((step=>step.data.step_order===step_order+1));const prevStep=Editor.funnel.steps.find((step=>step.data.step_order===step_order-1));return`\n\t\t\t${step_group==="benchmark"?step_order===1?`<div class="text-helper until-helper"><span class="dashicons dashicons-filter"></span>${_x("Start the funnel when...","showing at the top of the step flow","groundhogg")}\n          </div>`:prevStep&&prevStep.data.step_group!=="benchmark"?`<div class="until-helper text-helper">${_x("Until...","before a group of benchmarks in the step flow","groundhogg")}</div>`:"":""}\n\t\t\t<div\n\t\t\t\tclass="step ${step_type} ${step_group} ${activeStep===ID?"active":""} ${hasErrors?"has-errors":""} ${hasWarnings?"has-warnings":""}"\n\t\t\t\tdata-id="${ID}">\n\t\t\t\t${step_group==="benchmark"&&is_entry&&!isStartingStep(ID)?`<div class="is-entry"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\n  <path fill="currentColor" d="M260.5 329.5a24 24 0 0034 34L385 273a24 24 0 000-34l-90.5-90.5a24 24 0 00-34 0 24 24 0 000 34l49.6 49.5H48a24 24 0 00-24 24 24 24 0 0024 24h262z"/>\n  <path fill="currentColor" d="M448 24H224a40 40 0 00-40 40v32a24 24 0 0048 0V72h208v368H232v-24a24 24 0 00-48 0v32a40 40 0 0040 40h224a40 40 0 0040-40V64a40 40 0 00-40-40z"/>\n</svg></div>`:""}\n\t\t\t\t${slot("insideStepFlowCard."+step.type,step)}\n\t\t\t\t${slot("insideStepFlowCard",step)}\n\t\t\t\t${StepType.hasOwnProperty("svg")?`<div class="icon-svg">${StepType.svg}</div>`:`<img alt="${StepType.name}" class="icon"\n\t\t\t\t     src="${StepType.icon}"/>`}\n\t\t\t\t<div class="details">\n\t\t\t\t\t<div class="step-title">${StepType.title(step)}</div>\n\t\t\t\t\t<div class="step-type">${StepType.name}</div>\n\t\t\t\t\t<div tabindex="0" class="step-menu-button">\n\t\t\t\t\t\t<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 384">\n\t\t\t\t\t\t\t<circle fill="currentColor" cx="192" cy="42.7" r="42.7"/>\n\t\t\t\t\t\t\t<circle fill="currentColor" cx="192" cy="192" r="42.7"/>\n\t\t\t\t\t\t\t<circle fill="currentColor" cx="192" cy="341.3" r="42.7"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="step-status ${status}"></div>\n\t\t\t</div>\n\t\t\t${step_group==="benchmark"&&nextStep?nextStep.data.step_group==="benchmark"?`<div class="or-helper text-helper">`+_x("Or...","between to benchmarks in the step flow","groundhogg")+`</div>`:'<div class="then-helper text-helper">'+_x("Then...","before a group of actions in the step flow","groundhogg")+"</div>":""}\n        `}},init(){this.loadingClose=loadingModal().close;const self=this;const $doc=$(document);$doc.on("click",".step-add .select-type",(function(){self.saveUndoState();self.activeAddType=$(this).data("type");self.renderStepAdd()}));$doc.on("click",".step-flow .steps .step",(function(e){const $step=$(this);const step=self.funnel.steps.find((step=>step.ID===parseInt($step.data("id"))));const setStepEdit=()=>{if(step.ID===self.activeStep){return}self.saveUndoState();self.previousActiveStep=self.activeStep;self.activeStep=step.ID;self.view="editingStep";self.renderStepFlow();self.renderStepEdit()};if(clickInsideElement(e,".step-menu-button")){moreMenu(this,{items:[{key:"edit",text:__("Edit")},{key:"move-up",text:__("Move up","to move a step before another step","groundhogg")},{key:"move-down",text:_x("Move down","to move a step after another step","groundhogg")},{key:"duplicate",text:_x("Duplicate","to duplicate a step","groundhogg")},{key:"delete",text:'<span class="gh-text danger">'+__("Delete")+"</span>"}],onSelect:key=>{switch(key){case"move-up":self.moveStepUp(step);break;case"move-down":self.moveStepDown(step);break;case"duplicate":const newStep=copyObject(step);newStep.ID=uniqid();self.addStep(newStep);break;case"delete":self.deleteStep(step.ID);break;case"edit":setStepEdit();break}}})}else{setStepEdit()}}));$doc.on("click",".step-flow .add-new-step",(function(){self.activeStep=null;self.view="addingStep";self.renderStepFlow();self.renderStepAdd()}));$doc.on("click",".undo-and-redo .undo",(function(){self.undo()}));$doc.on("click",".undo-and-redo .redo",(function(){self.redo()}));$doc.on("click",".header-stuff #title",(function(){if(!self.isEditingTitle){self.isEditingTitle=true;self.renderTitle()}}));$doc.on("blur change keydown","#funnel-title-edit",(function(e){if(e.type==="keydown"&&e.key!=="Enter"){$("#funnel-title-edit").width((e.target.value.length+1)*.8+"ch");return}self.saveUndoState();self.funnel.data.title=e.target.value;self.isEditingTitle=false;self.update({data:{title:e.target.value}},false);self.renderTitle()}));$doc.on("click","#more-menu",(()=>{const handleOnSelect=key=>{switch(key){case"campaigns":const campaignContent=()=>`\n\t\t\t\t\t<div class="manage-campaigns" style="min-width: 400px">\n\t\t\t\t\t\t<h2>${__("Add this funnel to one or more campaigns...","groundhogg")}</h2>\n\t\t\t\t\t\t<p>${select({id:"manage-campaigns",multiple:true},this.funnel.campaigns.map((c=>({text:c.data.name,value:c.ID}))),this.funnel.campaigns.map((c=>c.ID)))}</p>\n\t\t\t\t\t</div>`;modal({content:campaignContent()});campaignPicker("#manage-campaigns",true,(items=>{CampaignsStore.itemsFetched(items)})).on("select2:select",(async e=>{let campaign=e.params.data;if(!CampaignsStore.hasItem(campaign.id)){campaign=await CampaignsStore.post({data:{name:campaign.id}}).then((c=>({id:c.ID,name:c.data.name})))}apiPost(`${apiRoutes.funnels}/${this.funnel.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then((r=>this.loadFunnel(r.item)))})).on("select2:unselect",(async e=>{let campaign=e.params.data;apiDelete(`${apiRoutes.funnels}/${this.funnel.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then((r=>this.loadFunnel(r.item)))}));break;case"export":window.location.href=this.funnel.links.export;break;case"share":const sharingModalOnMount=()=>{$("#sharing-enabled").on("change",(({target:target})=>{this.update({meta:{sharing:target.checked?"enabled":"disabled"}},false).then((()=>{setShareContent(sharingModalContent());sharingModalOnMount()}))}))};const sharingModalContent=()=>{if(this.funnel.meta.sharing!=="enabled"){return`\n\t\t\t\t\t  <div class="share">\n\t\t\t\t\t\t  <h2>${__("Sharing is not enabled","groundhogg")}</h2>\n\t\t\t\t\t\t  <p>${__("Enable sharing?","groundhogg")} ${toggle({name:"sharing",id:"sharing-enabled",checked:this.funnel.meta.sharing==="enabled",onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}</p>\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t\t  ${__("When sharing is enabled this funnel can be downloaded via a private link.","groundhogg")}</p>\n\t\t\t\t\t  </div>`}else{return`\n\t\t\t\t\t  <div class="share">\n\t\t\t\t\t\t  <h2>${__("Share this funnel","groundhogg")}</h2>\n\t\t\t\t\t\t  ${input({type:"url",className:"code full-width",readonly:true,value:this.funnel.links.export,onfocus:"this.select()"})}\n\t\t\t\t\t\t  <p>\n\t\t\t\t\t\t\t  ${__("Anyone with the above link will be able to download a copy of this funnel.","groundhogg")}</p>\n\t\t\t\t\t\t  <p>${__("Enable sharing?","groundhogg")} ${toggle({name:"sharing",id:"sharing-enabled",checked:this.funnel.meta.sharing==="enabled",onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}</p>\n\t\t\t\t\t  </div>`}};const{setContent:setShareContent}=modal({content:sharingModalContent()});sharingModalOnMount();break;case"reports":window.location.href=this.funnel.links.report;break;case"delete":dangerConfirmationModal({alert:`<p><b>${__("Delete this funnel?","groundhogg")}</b></p>\n\t\t\t\t<p>\n\t\t\t\t\t${__("Any associated events, steps, and reports will also be deleted.","groundhogg")}</p>\n\t\t\t\t<p>${__("This action cannot be undone. Are you sure?","groundhogg")}</p>`,confirmText:__("Delete"),onConfirm:()=>{console.log("yikes")}});break;case"archive":dangerConfirmationModal({alert:`\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<b>${_x("Archive this funnel?","archive is representing a verb in this phrase","groundhogg")}</b>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>${__("Any active contacts will be removed from the funnel permanently. The funnel will become un-editable until restored.","groundhogg")}</p>`,confirmText:_x("Archive","a verb meaning to add an item to an archive","groundhogg"),onConfirm:()=>{this.update({data:{status:"archived"}}).then((()=>{dialog({message:__("Funnel Archived","groundhogg")});window.location.href=adminPageURL("gh_funnels")}))}});break;case"contacts":if(this.funnel.data.status!=="active"){confirmationModal({alert:`<p>${__("You can only add contacts to an active funnel. Would you like to activate?","groundhogg")}</p>`,confirmText:__("Launch Funnel","groundhogg"),onConfirm:()=>{this.activate().then((()=>handleOnSelect("contacts")))}});break}let state={method:"filters",filters:[],search:false,step_id:0,total_contacts:0};const setState=(s,reRender=false)=>{state={...state,...s};if(reRender){setContent(addContactsToFunnel(state));addContactsOnMount(state)}};const addContactsOnMount=({method:method,filters:filters=[],search:search=false})=>{const totalContacts=query=>{ContactsStore.count(query).then((total=>{setState({total_contacts:total});$("#add-contacts-to-funnel-confirm").replaceWith(addConfirmButton(state));addConfirmListener()}))};stepTypeSelect("#select-step",{funnel_id:this.funnel.ID,edited:false,selected:state.step_id}).on("select2:select",(e=>{setState({step_id:e.params.data.ID},true)}));buttonToggle("#add-contacts",{active:method,onSelect:key=>{setState({method:key},true)},options:[{key:"filters",label:icons.filter+__("Filters","groundhogg")},{key:"searches",label:icons.contactSearch+__("Saved Search","groundhogg")}]});if(method==="filters"){createFilters("#add-via-filters",filters,(filters=>{setState({filters:filters});totalContacts({filters:filters})})).mount()}else{searchesPicker("#add-via-searches",(items=>SearchesStore.itemsFetched(items)),{},{placeholder:__("Select a saved search","groundhogg"),data:[{id:"",text:""},...SearchesStore.getItems().map((s=>({...s,text:s.name,selected:s.id===search})))]}).on("select2:select",(e=>{setState({search:e.params.data.id});totalContacts({saved_search:e.params.data.id})}))}const addConfirmListener=()=>{$("#add-contacts-to-funnel-confirm").on("click",(()=>{const adding=()=>`\n\t\t\t\t\t\t  <div style="min-width: 400px">\n\t\t\t\t\t\t\t  <h2 id="adding-contacts-header">${__("Adding contacts","groundhogg")}</h2>\n\t\t\t\t\t\t\t  <div id="progress-bar"></div>\n\t\t\t\t\t\t  </div>`;setContent(adding());const{stop:stopDots}=loadingDots("#adding-contacts-header");const{setProgress:setProgress}=progressBar("#progress-bar");let limit=500;let offset=0;let{method:method,total_contacts:total_contacts,step_id:step_id,search:search,filters:filters}=state;const scheduleEvents=()=>{FunnelsStore.addContacts({funnel_id:this.funnel.ID,step_id:step_id,query:{...method==="filters"?{filters:filters}:{saved_search:search},limit:limit,offset:offset}}).then((()=>{limit=Math.min(total_contacts-offset,limit);offset+=limit;setProgress(offset/total_contacts);if(offset>=total_contacts){closeAddContactsModal();stopDots();dialog({message:sprintf(__('%s contacts added to "%s"'),formatNumber(total_contacts),this.funnel.data.title)});return}scheduleEvents()}))};scheduleEvents()}))};addConfirmListener()};const addConfirmButton=({method:method,total_contacts:total_contacts,step_id:step_id})=>button({text:sprintf(_n("Add %s contact to funnel","Add %1$s contacts to %2$s",total_contacts,"groundhogg"),bold(formatNumber(total_contacts)),bold(this.funnel.data.title)),disabled:!total_contacts||!step_id,className:"primary",id:"add-contacts-to-funnel-confirm"});const addContactsToFunnel=({method:method,total_contacts:total_contacts,step_id:step_id})=>`\n\t\t\t\t\t<div style="min-width: 400px; min-height: 100px">\n\t\t\t\t\t\t<h2>${__("Add contacts to this funnel","groundhogg")}</h2>\n\t\t\t\t\t\t<div class="gh-rows-and-columns">\n\t\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t\t<p>${__("How do you want to select contacts to add?","groundhogg")}</p>\n\t\t\t\t\t\t\t\t\t<div id="add-contacts"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t\t${method==="filters"?'<div id="add-via-filters"></div>':'<select id="add-via-searches"></select>'}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t\t<p>${__("At what step should they be added?","groundhogg")}</p>\n\t\t\t\t\t\t\t\t\t<select id="select-step"></select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t\t${addConfirmButton({method:method,total_contacts:total_contacts,step_id:step_id})}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>`;const{setContent:setContent,close:closeAddContactsModal}=modal({content:addContactsToFunnel(state)});addContactsOnMount(state);break}};moreMenu("#more-menu",{onSelect:handleOnSelect,items:[{key:"campaigns",text:`${icons.megaphone} ${_x("Campaigns","noun meaning collection of marketing materials","groundhogg")}`},{key:"export",text:`${icons.export} ${_x("Export","a verb meaning to download","groundhogg")}`},{key:"share",text:`${icons.share} ${_x("Share","a verb meaning to share something","groundhogg")}`},{key:"reports",text:`${icons.chart} ${__("Reports","groundhogg")}`},{key:"contacts",text:`${icons.createContact} ${__("Add Contacts","groundhogg")}`},{key:"archive",text:`${icons.folder} <span\n\t\t\t\t  class="gh-text danger">${_x("Archive","a verb meaning to add an item to an archive","groundhogg")}</span>`},{key:"delete",text:`${icons.trash} <span class="gh-text danger">${__("Delete")}</span>`}]})}));$doc.on("click",".publish-actions .deactivate",(function(){dangerConfirmationModal({alert:`<p><b>${__("Are you sure you want to deactivate the funnel?","groundhogg")}</b></p>\n\t\t  <p>\n\t\t\t  ${__("Active contacts will be paused until the funnel is reactivated.","groundhogg")}</p>`,confirmText:_x("Deactivate","when deactivating a funnel","groundhogg"),onConfirm:()=>{self.deactivate()}})}));$doc.on("click",".publish-actions .update-and-launch, .publish-actions .update",(function(){confirmationModal({alert:`<p><b>${__("Are you sure you want to commit these changes?","groundhogg")}</b></p>\n\t\t\t<p>\n\t\t\t\t${__("The changes made will take immediate effect to anyone currently in the funnel.","groundhogg")}</p>`,onConfirm:()=>{self.commitChanges()}})}));StepTypes.setup();this.preloadFunnel()},renderContainer(){$("#app").html(this.htmlTemplates.container());this.setupSortable()},render(){this.renderContainer();this.renderTitle();this.renderPublishActions();this.renderStepFlow();this.renderStepAdd();this.renderStepEdit();this.loadingClose();$(window).trigger("resize")},preloadFunnel(){FunnelsStore.fetchItem(this.funnel.ID).then((item=>{this.loadFunnel(item);StepTypes.preloadSteps(this.funnel.steps).then((()=>this.render()))}))},loadFunnel(funnel){this.funnel=funnel;this.origFunnel=copyObject(funnel);if(this.funnel.meta.edited){this.funnel.steps=this.funnel.meta.edited.steps}},setupSortable(){const self=this;$(".step-flow .steps").sortable({placeholder:"step-placeholder",cancel:".text-helper",start:function(e,ui){ui.placeholder.height(ui.item.height());ui.placeholder.width(ui.item.width())},receive:function(e,ui){self.saveUndoState();const type=$(ui.helper).data("type");const group=$(ui.helper).data("group");const id=uniqid();$(ui.helper).addClass("step");$(ui.helper).data("id",id);self.addStep({ID:id,data:{ID:id,funnel_id:Editor.funnel.ID,step_title:StepTypes.getType(type).name,step_type:type,step_group:group,step_order:$(ui.helper).prevAll(".step").length},meta:StepTypes.getType(type).defaults})},update:function(e,ui){self.saveUndoState();self.syncOrderWithFlow();self.autoSaveEditedFunnel();self.renderStepFlow();self.renderStepEdit()}}).disableSelection()},initStepFlowContextMenu(){const self=this;this.stepFlowContextMenu=createContextMenu({menuClassName:"step-context-menu",targetSelector:".step-flow .steps .step",items:[{key:"duplicate",text:"Duplicate"},{key:"delete",text:"Delete"}],onOpen(e,el){self.stepOpenInContextMenu=parseInt(el.dataset.id)},onSelect(key){switch(key){case"delete":self.deleteStep(self.stepOpenInContextMenu);break;case"duplicate":const stepToCopy=self.funnel.steps.find((step=>step.ID===self.stepOpenInContextMenu));const newStep=copyObject(stepToCopy);newStep.ID=uniqid();self.addStep(newStep);break}}});this.stepFlowContextMenu.init()},renderStepFlow(){const self=this;this.checkForStepErrors();const steps=this.funnel.steps.sort(((a,b)=>a.data.step_order-b.data.step_order)).map((step=>self.htmlTemplates.stepFlowCard(step,self.activeStep))).join("");$(".step-flow .steps").html(steps);this.renderPublishActions()},addStepError(id,error){if(!this.stepErrors.hasOwnProperty(id)){this.stepErrors[id]=[]}this.stepErrors[id].push(error)},addStepWarning(id,error){if(!this.stepWarnings.hasOwnProperty(id)){this.stepWarnings[id]=[]}this.stepWarnings[id].push(error)},checkForStepErrors(){const self=this;this.stepErrors={};this.stepWarnings={};this.funnel.steps.forEach((step=>{const addError=error=>{this.addStepError(step.ID,error)};const addWarning=warning=>{this.addStepWarning(step.ID,warning)};const{step_group:step_group,step_order:step_order,step_type:step_type}=step.data;const typeHandler=StepTypes.getType(step_type);if(step_group==="action"&&step_order===1){addError(_x("Actions cannot be at the start of a funnel.","funnel editor","groundhogg"))}else if(typeHandler.type==="error"){addError(_x("Settings not found.","funnel editor","groundhogg"))}if(typeHandler){typeHandler.validate(step,addError,addWarning)}}))},mountStep(step){step=step||this.funnel.steps.find((s=>s.ID===this.activeStep));if(!step){return}const updateStepMeta=(meta,reRenderStepEdit=false)=>this.updateCurrentStepMeta(meta,reRenderStepEdit);const updateStepData=(data,reRenderStepEdit=false)=>this.updateCurrentStepData(data,reRenderStepEdit);const updateStep=(data,reRenderStepEdit=false)=>this.updateCurrentStep(data,reRenderStepEdit);const currentState=()=>this.getCurrentStep();$("#step-notes").on("change",(function(e){updateStepMeta({step_notes:$(this).val()})}));if(step.data.step_group==="benchmark"){$("#is-entry-point").on("change",(e=>{updateStepData({is_entry:e.target.checked})}));$("#is-conversion").on("change",(e=>{updateStepData({is_conversion:e.target.checked})}))}const StepType=StepTypes.getType(step.data.step_type);StepType.onMount(step,updateStepMeta,updateStep,currentState);this.lastStepEditMounted=this.activeStep},demountStep(step){step=step||this.funnel.steps.find((s=>s.ID===this.lastStepEditMounted));if(!step){return}const updateStepMeta=meta=>this.updateCurrentStepMeta(meta);const updateStep=data=>this.updateCurrentStep(data);const currentState=()=>this.getCurrentStep();const StepType=StepTypes.getType(step.data.step_type);StepType.onDemount(step,updateStepMeta,updateStep,currentState,this);this.lastStepEditMounted=null},renderStepEdit(){if(this.view!=="editingStep"){return}const step=this.funnel.steps.find((step=>step.ID===this.activeStep));const previousStep=this.funnel.steps.find((step=>step.ID===this.previousActiveStep));if(!step){this.activeStep=false;this.previousActiveStep=false;this.view="addingStep";this.renderStepAdd();return}if(this.activeStep===this.lastStepEditMounted){this.demountStep(step)}else if(previousStep){this.demountStep(previousStep)}slotsDemounted();$("#control-panel").html(this.htmlTemplates.stepEditPanel(step));this.mountStep(step);slotsMounted()},renderStepAdd(){if(this.view!=="addingStep"){return}const self=this;self.demountStep();$("#control-panel").html(self.htmlTemplates.stepAddPanel(self.activeAddType,self.stepSearch,self.packFilter));self.renderStepFlow();const mountSteps=()=>{const sr=regexp(self.stepSearch);$("#types").html(Object.values(StepTypes).filter((step=>typeof step==="object"&&step.hasOwnProperty("group"))).filter((step=>step.group+"s"===self.activeAddType)).filter((step=>step.name.match(sr))).filter((step=>!self.packFilter||step.pack===self.packFilter)).map(Editor.htmlTemplates.addStepCard).join(""));const addStepHere=({type:type,group:group,order:order})=>{const id=Date.now();self.addStep({ID:id,data:{ID:id,funnel_id:Editor.funnel.ID,step_title:StepTypes.getType(type).name,step_type:type,step_group:group,step_order:order},meta:StepTypes.getType(type).defaults})};const $addSteps=$(".add-step");$addSteps.draggable({connectToSortable:".step-flow .steps",helper:"clone",revert:"invalid",revertDuration:0});$addSteps.on("click",(function(){const $button=$(this);const type=$button.data("type");const group=$button.data("group");addStepHere({type:type,group:group,order:self.addingStepOrder||self.funnel.steps.length});self.addingStepOrder=false}))};mountSteps();$("#search-steps").on("input",(e=>{this.stepSearch=e.target.value;mountSteps()}));$("#pack-filter").on("change",(e=>{this.packFilter=e.target.value;mountSteps()}))},renderEmailTemplatePicker(updateStepMeta){this.demountStep();const picker=Groundhogg.EmailTemplatePicker({selector:"#app",breadcrumbs:[__("Funnels","groundhogg"),`<span id="back-to-funnel" style="cursor: pointer">${specialChars(this.funnel.data.title)}</span>`,__("Add Email","groundhogg")],onSelect:email=>{this.render();EmailsStore.itemsFetched([email]);updateStepMeta({email_id:email.ID});this.renderEmailEditor(email)},afterHeaderActions:toEditorButton(),onMount:()=>{$("#back-to-funnel,#close-email-editor").on("click",(()=>{this.render()}))}});picker.mount()},renderEmailEditor(email){this.demountStep();const editor=Groundhogg.EmailEditor({selector:"#app",email:email,onChange:email=>{console.log(email)},onCommit:email=>{console.log(email)},onHeaderMount:()=>{$("#back-to-funnel,#close-email-editor").on("click",(()=>{editor.demount();this.render()}))},breadcrumbs:["Funnels",`<span id="back-to-funnel" style="cursor: pointer">${specialChars(this.funnel.data.title)}</span>`],afterPublishActions:toEditorButton()});editor.mount()},renderTitle(){$(".header-stuff .title-wrap").html(this.htmlTemplates.funnelTitleEdit(this.funnel.data.title,this.isEditingTitle));if(this.isEditingTitle){$("#funnel-title-edit").focus();this.resizeTitleEdit()}},resizeTitleEdit(){$("#funnel-title-edit").width((this.funnel.data.title.length+1)*.8+"ch")},renderPublishActions(){$(".publish-actions").html(this.htmlTemplates.publishActions(this.funnel.data.status));$(".undo-and-redo").replaceWith(this.htmlTemplates.undoRedoActions());tooltip(".undo",{content:__("Undo")});tooltip(".redo",{content:__("Redo")})},syncOrderWithFlow(){const self=this;$(".step-flow .steps .step").each((function(i){self.funnel.steps.find((step=>step.ID===$(this).data("id"))).data.step_order=i+1}));this.fixStepOrders()},currentState(){const{view:view,funnel:funnel,activeStep:activeStep,activeAddType:activeAddType,isEditingTitle:isEditingTitle}=this;return{view:view,activeStep:activeStep,isEditingTitle:isEditingTitle,activeAddType:activeAddType,funnel:copyObject(funnel)}},saveUndoState(){this.undoStates.push(this.currentState())},undo(){const lastState=this.undoStates.pop();if(!lastState){return}this.redoStates.push(this.currentState());Object.assign(this,lastState);this.render()},redo(){const lastState=this.redoStates.pop();if(!lastState){return}this.undoStates.push(this.currentState());Object.assign(this,lastState);this.render()},update(data,reload=true){const self=this;return FunnelsStore.patch(this.funnel.ID,data).then((item=>{self.setLastSaved();if(item){self.loadFunnel(item)}if(reload){self.render()}})).catch((e=>{dialog({type:"error",message:__("Something went wrong","groundhogg")})}))},activate(){const{close:close}=loadingModal(__("Launching","groundhogg"));return this.update({data:{status:"active"}}).then((()=>close())).then((()=>dialog({message:__("Funnel activated!","groundhogg")})))},deactivate(){const{close:close}=loadingModal(__("Deactivating","groundhogg"));return this.update({data:{status:"inactive"}}).then((()=>close())).then((()=>dialog({message:__("Funnel deactivated!","groundhogg")})))},commitChanges(){const self=this;if(objectEquals(this.funnel.steps,this.origFunnel.steps)){return this.activate()}if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}else if(this.abortController){this.abortController.abort()}const{close:close}=savingModal();return FunnelsStore.commit(this.funnel.ID,{edited:{steps:self.funnel.steps}}).then((item=>{self.setLastSaved();if(item){self.loadFunnel(item);self.render();dialog({message:__("Funnel updated!","groundhogg")})}})).then((()=>close())).catch((e=>{close();dialog({type:"error",message:__("Something went wrong","groundhogg")})}))},setLastSaved(){clearInterval(this.lastSavedTimer);this.lastSavedTimer=setInterval(this.updateLastSaved,30*1e3,new Date);this.updateLastSaved(new Date)},updateLastSaved(lastSaved){$(".header-actions").attr("data-lastSaved",sprintf(_x("Saved %s ago","time passed since last update","groundhogg"),moment(lastSaved).fromNow(true)))},addStep(step){if(!step){return}this.saveUndoState();this.funnel.steps.push(step);this.fixStepOrders();delete this.addingStepOrder;this.renderStepFlow();this.autoSaveEditedFunnel()},moveStep(step,direction){if(!step){return}const move="up"===direction?-1.1:1.1;this.saveUndoState();step.data.step_order=step.data.step_order+move;window.console.log("steps",this.funnel.steps);this.fixStepOrders();this.renderStepFlow();this.autoSaveEditedFunnel()},moveStepUp(step){this.moveStep(step,"up")},moveStepDown(step){this.moveStep(step,"down")},insertPlaceholderStep(step,beforeAfter){const self=this;self.previousActiveStep=step.ID;self.view="addingStep";self.addingStepOrder="before"===beforeAfter?parseInt(step.data.step_order)-.1:parseInt(step.data.step_order)+.1;self.renderStepFlow();self.renderStepAdd();const $html=$(`<div class="step-placeholder">${__("Choose a step to add here","groundhogg")} &rarr;<button type="button" class="button button-secondary">${__("Cancel")}</button></div>`);$("button",$html).on("click",(function(){delete self.addingStepOrder;$html.remove();self.activeStep=self.previousActiveStep;self.view="editingStep";self.renderStepFlow();self.renderStepEdit()}));if("before"===beforeAfter){$html.insertBefore(`.steps [data-id="${step.ID}"]`)}else{$html.insertAfter(`.steps [data-id="${step.ID}"]`)}},fixStepOrders(){let newOrder=1;this.funnel.steps.sort(((a,b)=>a.data.step_order-b.data.step_order)).forEach((step=>{step.data.step_order=newOrder;newOrder++}))},deleteStep(stepId){if(!stepId){return}const removeStep=()=>{this.saveUndoState();this.funnel.steps=this.funnel.steps.filter((step=>step.ID!==stepId));this.fixStepOrders();this.renderStepFlow();if(this.activeStep===stepId){this.view="addingStep";this.renderStepAdd();this.activeStep=null}this.autoSaveEditedFunnel()};const origStep=Editor.origFunnel.steps.find((s=>s.ID===stepId));if(origStep){dangerConfirmationModal({alert:`\n          <p><b>${__("Delete this step?","groundhogg")}</b></p>\n          <p>${__("Active contacts at this step will be removed from the funnel when it is updated.","groundhogg")}</p> \n        `,confirmText:__("Delete"),onConfirm:()=>{removeStep()}})}else{removeStep()}},getStep(stepId){return this.funnel.steps.find((step=>step.ID===stepId))},getSteps(){return this.funnel.steps},getCurrentStep(){return this.getStep(this.activeStep)},updateStep(stepId,newData){const step=this.getStep(stepId);const newStep={...step,...newData};newStep.data.step_title=StepTypes.getType(newStep.data.step_type).title(newStep);const toReplace=this.funnel.steps.findIndex((step=>step.ID===stepId));this.autoSaveEditedFunnel();this.saveUndoState();if(toReplace!==-1){this.funnel.steps[toReplace]=newStep}this.renderStepFlow();return newStep},updateCurrentStep(newData,reRenderStepEdit=false){const step=this.updateStep(this.activeStep,newData);if(reRenderStepEdit){this.renderStepEdit()}return step},updateCurrentStepData(newData,reRenderStepEdit=false){const{data:data,meta:meta}=this.getCurrentStep();const step=this.updateStep(this.activeStep,{data:{...data,...newData}});if(reRenderStepEdit){this.renderStepEdit()}return step},updateCurrentStepMeta(newMeta,reRenderStepEdit=false){const{data:data,meta:meta}=this.getCurrentStep();const step=this.updateStep(this.activeStep,{meta:{...meta,...newMeta}});if(reRenderStepEdit){this.renderStepEdit()}return step},autoSaveTimeout:null,abortController:null,autoSaveEditedFunnel(){const self=this;if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}this.autoSaveTimeout=setTimeout((()=>{self.autoSaveTimeout=null;self.abortController=new AbortController;const{signal:signal}=self.abortController;FunnelsStore.patchMeta(this.funnel.ID,{edited:{steps:self.funnel.steps,title:self.funnel.data.title}},{signal:signal}).then((data=>{self.setLastSaved();self.abortController=null}))}),3e3)},...Funnel};$((function(){Editor.init()}));fill("beforeStepNotes.send_email",{render({ID:ID,meta:meta}){const{email_id:email_id}=meta;const email=EmailsStore.get(parseInt(email_id));if(!email_id||!email){return""}return`\n\t\t  <button style="width: 100%" id="edit-email-right" class="gh-button secondary">\n\t\t\t  ${__("Edit Email","groundhogg")}\n\t\t  </button>\n\t\t  <div class="panel">\n\t\t\t  <div class="row">\n\t\t\t\t  <div class="column">\n\t\t\t\t\t  <label\n\t\t\t\t\t\t  class="row-label">${__("Select a different email to send...","groundhogg")}</label>\n\t\t\t\t\t  ${select({id:"email-picker-right",name:"email_id"},EmailsStore.getItems().map((item=>({text:item.data.title,value:item.ID}))),email&&email.ID)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div class="row">\n\t\t\t\t  <div class="column">\n\t\t\t\t\t  <label class="row-label">Or...</label>\n\t\t\t\t\t  <button id="add-new-email-right" class="gh-button secondary">\n\t\t\t\t\t\t  ${__("Create a new email","groundhogg")}\n\t\t\t\t\t  </button>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>\n      `},onMount({ID:ID,meta:meta},updateStepMeta){const{email_id:email_id}=meta;const email=EmailsStore.get(parseInt(email_id));if(!email_id||!email){return}$("#edit-email-right").on("click",(()=>{Editor.renderEmailEditor(email)}));$("#add-new-email-right").on("click",(()=>{Editor.renderEmailTemplatePicker(updateStepMeta)}));emailPicker("#email-picker-right",false,(items=>EmailsStore.itemsFetched(items)),{},{width:"100%"}).on("change",(e=>{updateStepMeta({email_id:e.target.value},true)}))}});fill("beforeStepNotes.form_fill",{render({ID:ID,meta:meta}){if(!stepIsReal(ID)){return""}const copyValue=toCopy=>input({className:"code",value:toCopy,onfocus:"this.select()",readonly:true});return`\n\t\t  <div id="form-embed-options" class="panel">\n\t\t\t  <div class="row">\n\t\t\t\t  <label class="row-label">${__("Embed via Shortcode","groundhogg")}</label>\n\t\t\t\t  <div class="embed-option">${copyValue(`[gh_form id="${ID}"]`)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div class="row">\n\t\t\t\t  <label class="row-label">${__("Embed via iFrame","groundhogg")}</label>\n\t\t\t\t  <div class="embed-option">${copyValue(`[gh_form id="${ID}"]`)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>`}});const isStartingStep=stepId=>{const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return!getPrecedingSteps(step.ID).find((_step=>_step.data.step_group==="action"))};const getProceedingSteps=stepId=>{const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return Editor.getSteps().filter((_step=>_step.data.step_order>step.data.step_order)).sort(((a,b)=>a.data.step_order-b.data.step_order))};const getPrecedingSteps=stepId=>{const step=stepId?Editor.getStep(stepId):Editor.getCurrentStep();return Editor.getSteps().filter((_step=>_step.data.step_order<step.data.step_order)).sort(((a,b)=>a.data.step_order-b.data.step_order))};Groundhogg.funnelEditor=Editor;Groundhogg.funnelEditor.functions={slot:slot,fill:fill,slotsDemounted:slotsDemounted,slotsMounted:slotsMounted,registerFormIntegration(type,opts){StepTypes.registerFormIntegration(type,opts)},getSteps(){return Editor.getSteps()},stepTitle(step){return StepTypes.getType(step.data.step_type).title(step)},registerStepType(type,opts){return StepTypes.register(type,opts)},registerStepPack(id,name,svg){return StepPacks.add(id,name,svg)},updateCurrentStepMeta(newMeta){return Editor.updateCurrentStepMeta(newMeta)},renderStepEdit(){return Editor.renderStepEdit()},getCurrentStep(){return Editor.getCurrentStep()},getCurrentStepMeta(){return Editor.getCurrentStep().meta},getProceedingSteps:getProceedingSteps,getPrecedingSteps:getPrecedingSteps}})(Funnel,jQuery);