(($,editor)=>{const{contact:contact,meta_exclusions:meta_exclusions}=editor;const{gh_contact_custom_properties:gh_contact_custom_properties}=Groundhogg.filters;const{tooltip:tooltip,regexp:regexp,inputRepeaterWidget:inputRepeaterWidget,el:el,searchOptionsWidget:searchOptionsWidget,input:input,select:select,isNumeric:isNumeric,textarea:textarea,icons:icons,bold:bold,loadingModal:loadingModal,modal:modal,uuid:uuid,dangerConfirmationModal:dangerConfirmationModal,confirmationModal:confirmationModal,adminPageURL:adminPageURL,moreMenu:moreMenu,setFrameContent:setFrameContent,loadingDots:loadingDots,spinner:spinner,dialog:dialog}=Groundhogg.element;const{currentUser:currentUser,filters:filters,propertiesEditor:propertiesEditor,isWPFusionActive:isWPFusionActive}=Groundhogg;const{userHasCap:userHasCap}=Groundhogg.user;const{events:EventsStore,event_queue:EventQueue,tags:TagsStore,contacts:ContactsStore,emails:EmailsStore,activity:ActivityStore,funnels:FunnelsStore,broadcasts:BroadcastsStore,page_visits:PageVisitsStore,submissions:SubmissionsStore}=Groundhogg.stores;const{emailPicker:emailPicker}=Groundhogg.pickers;const{post:post,delete:_delete,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{selectContactModal:selectContactModal,betterTagPicker:betterTagPicker,internalForm:internalForm}=Groundhogg.components;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;ContactsStore.itemsFetched([contact]);let files=[];const activityUpdated=()=>{window.dispatchEvent(new Event("activityupdated"))};const getContact=()=>ContactsStore.get(contact.ID);const sanitizeKey=label=>label.toLowerCase().replace(/[^a-z0-9]/g,"_");const sendEmail=()=>{let contact=getContact();let email={to:[contact.data.email],from_email:currentUser.data.user_email,from_name:currentUser.data.display_name};if(contact.data.owner_id&&currentUser.ID!=contact.data.owner_id){email.cc=[filters.owners.find((u=>u.ID==contact.data.owner_id)).data.user_email]}Groundhogg.components.emailModal(email)};const contactMoreActions=()=>{let actions=`\n    <button id="action-send-email" class="gh-button secondary text icon">${icons.email}</button>\n\t\t\t\t${getContact().meta.primary_phone?`<a id="call-primary" class="gh-button secondary text icon" href="tel:${getContact().meta.primary_phone}">${icons.phone}</a>`:""}\n\t\t\t\t${getContact().meta.mobile_phone?`<a id="call-mobile" class="gh-button secondary text icon" href="tel:${getContact().meta.mobile_phone}">${icons.smartphone}</a>`:""}\n\t\t\t\t<button id="add-to-funnel" class="gh-button secondary text icon">${icons.funnel}</button>\n\t\t\t\t<button id="internal-form" class="gh-button secondary text icon">${icons.form}</button>\n\t\t\t\t<button id="contact-more" class="gh-button secondary text icon">${icons.verticalDots}</button>`;$("#contact-more-actions").html(actions);tooltip("#action-send-email",{content:__("Send Email","groundhogg")});tooltip("#call-primary",{content:__("Call","groundhogg")});tooltip("#call-mobile",{content:__("Call Mobile","groundhogg")});tooltip("#internal-form",{content:__("Submit Internal Form","groundhogg")});tooltip("#contact-more",{content:__("More Actions","groundhogg")});tooltip("#add-to-funnel",{content:__("Add to Funnel","groundhogg")});$("#internal-form").on("click",(e=>{internalForm({contact:getContact(),onSubmit:()=>{activityUpdated()}})}));$("#add-to-funnel").on("click",(e=>{modal({content:``,onOpen:({close:close,setContent:setContent})=>{let funnel,step;const addToFunnelUi=()=>`\n\t\t\t\t<div>\n\t\t\t\t\t<h2>${sprintf(__("Add %s to a funnel","groundhogg"),getContact().data.full_name)}</h2>\n\t\t\t\t\t<div class="gh-rows-and-columns">\n\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t${select({id:"select-funnel"})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t${funnel?select({id:"select-step"}):""}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t\t${funnel&&step?`<button id="confirm-add-to-funnel" class="gh-button primary">${__("Add to funnel")}</button>`:""}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>`;setContent(addToFunnelUi());const onMount=()=>{$("#select-funnel").ghPicker({endpoint:FunnelsStore.route,getParams:q=>({...q,status:"active"}),data:FunnelsStore.getItems().map((f=>({id:f.ID,text:f.data.title,selected:funnel&&f.ID===funnel.ID}))),getResults:({items:items})=>{FunnelsStore.itemsFetched(items);return items.map((f=>({id:f.ID,text:f.data.title})))},placeholder:__("Select a funnel...","groundhogg")}).on("change",(({target:target})=>{funnel=FunnelsStore.get(parseInt($(target).val()));step=funnel.steps.find((s=>s.data.step_order==1));setContent(addToFunnelUi());onMount()}));if(funnel){$("#select-step").select2({placeholder:__("Select a step...","groundhogg"),data:funnel.steps.sort(((a,b)=>a.data.step_order-b.data.step_order)).map((s=>({id:s.ID,text:`${s.data.step_title} (${Groundhogg.rawStepTypes[s.data.step_type].name})`,selected:s.ID==step.ID})))}).on("change",(({target:target})=>{step=funnel.steps.find((s=>s.ID===parseInt($(target).val())));setContent(addToFunnelUi());onMount()}))}if(funnel&&step){$("#confirm-add-to-funnel").on("click",(e=>{FunnelsStore.addContacts({funnel_id:funnel.ID,step_id:step.ID,query:{include:[getContact().ID]}}).then((()=>{dialog({message:sprintf(__("%s added to funnel!","groundhogg"),getContact().data.full_name)});close()}))}))}};onMount()}})}));$("#contact-more").on("click",(e=>moreMenu(e.target,{items:[{key:"merge",cap:"delete_contacts",text:__("Merge")},{key:"delete",cap:"delete_contacts",text:`<span class="gh-text danger">${__("Delete")}</span>`}].filter((i=>userHasCap(i.cap))),onSelect:k=>{switch(k){case"merge":selectContactModal({exclude:[contact.ID],onSelect:_contact=>{confirmationModal({confirmText:__("Merge"),width:500,alert:`<p>\n\t\t\t\t\t  ${sprintf(__("Are you sure you want to merge %1$s with %2$s? This action cannot be undone.","groundhogg"),bold(_contact.data.full_name),bold(getContact().data.full_name))}</p>\n\t\t\t\t  <p>\n\t\t\t\t\t  <a href="https://help.groundhogg.io/article/540-merging-contacts"\n\t\t\t\t\t     target="_blank">${__("What happens when contacts are merged?","groundhogg")}</a></p>`,onConfirm:()=>{loadingModal();post(`${ContactsStore.route}/${contact.ID}/merge`,[_contact.ID]).then((()=>{location.reload()}))}})}});break;case"delete":dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(__("Are you sure you want to delete %s?","groundhogg"),bold(getContact().data.full_name))}</p>`,onConfirm:()=>{ContactsStore.delete(contact.ID).then((()=>{dialog({message:sprintf(__("%s was deleted!","groundhogg"),contact.data.full_name)});window.open(adminPageURL("gh_contacts"),"_self")}))}})}}})));$("#action-send-email").on("click",(e=>{moreMenu(e.currentTarget,{items:[{key:"compose",text:__("Compose","groundhogg")},{key:"template",text:__("Use template","groundhogg")}],onSelect:k=>{switch(k){case"compose":sendEmail();break;case"template":let emailId;const preview=()=>`\n\t\t\t\t\t<div class="gh-row">\n\t\t\t\t\t\t<div class="gh-col">\n\t\t\t\t\t\t\t<iframe id="select-email-preview" class="hidden"></iframe>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>`;const showFrame=()=>{if(emailId){let $frm=$("#select-email-preview");setFrameContent($frm[0],EmailsStore.get(emailId).context.built);$frm.removeClass("hidden")}};modal({width:500,content:`\n\t\t\t\t\t  <h2>${__("Select an email template to send","groundhogg")}</h2>\n\t\t\t\t\t  <div class="gh-rows-and-columns">\n\t\t\t\t\t\t  <div class="gh-row">\n\t\t\t\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t\t\t\t  ${select({name:"email",id:`select-email`},EmailsStore.getItems().map((e=>({text:e.data.title,value:e.ID}))),emailId)}\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t  ${preview()}\n\t\t\t\t\t\t  <div class="gh-row">\n\t\t\t\t\t\t\t  <div class="gh-col">\n\t\t\t\t\t\t\t\t  <button id="send-email-template" class="gh-button primary" disabled>\n\t\t\t\t\t\t\t\t\t  ${__("Send Email","groundhogg")}\n\t\t\t\t\t\t\t\t  </button>\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n                  `,onOpen:({close:close})=>{let $btn=$("#send-email-template");emailPicker(`#select-email`,false,(items=>{EmailsStore.itemsFetched(items)}),{status:"ready"},{placeholder:__("Select an email to send...","groundhogg")}).on("change",(({target:target})=>{emailId=parseInt(target.value);showFrame();$btn.prop("disabled",false)}));$btn.on("click",(e=>{$btn.prop("disabled",true);let{stop:stop}=loadingDots(e.currentTarget);post(`${EmailsStore.route}/${emailId}/send`,{to:getContact().ID}).then((r=>{dialog({message:__("Email sent!")});stop();close()})).catch((e=>{stop();$btn.prop("disabled",false);dialog({type:"error",message:e.message})}))}))}});break}}})}))};const ActivityTimeline={addType(type,opts){this.types[type]={icon:"",render:()=>"",preload:()=>{},...opts}},types:{wp_fusion:{icon:icons.wp_fusion,iconFramed:false,render:({data:data,meta:meta})=>{const{event_name:event_name,event_value:event_value}=meta;return`${event_name}: <code>${event_value}</code>`},preload:()=>{}},wp_login:{icon:icons.login,render:({email:email})=>__("Logged in","groundhogg"),preload:()=>{}},wp_logout:{icon:icons.logout,render:({email:email})=>__("Logged out","groundhogg"),preload:()=>{}},email_opened:{icon:icons.open_email,render:({email:email})=>sprintf(__("Opened %s","groundhogg"),bold(email.data.title)),preload:({email:email})=>{EmailsStore.itemsFetched([email])}},composed_email_sent:{icon:icons.open_email,render:({meta:meta,sent_by:sent_by})=>sprintf(__("%s sent an email with subject %s","groundhogg"),bold(sent_by),bold(meta.subject)),preload:()=>{}},email_link_click:{icon:icons.link_click,render:({email:email,data:data})=>{const maybeTruncateLink=link=>link.length>50?`${link.substring(0,47)}...`:link;return sprintf(__("Clicked %s in %s","groundhogg"),el("a",{target:"_blank",href:data.referer},bold(maybeTruncateLink(data.referer))),bold(email.data.title))},preload:({email:email})=>{EmailsStore.itemsFetched([email])}}},renderActivity(activity){if(activity.type==="submission"){let funnel=FunnelsStore.get(activity.form.data.funnel_id);return`\n\t\t\t<li class="activity-item">\n\t\t\t\t<div class="activity-icon submission">${icons.form}</div>\n\t\t\t\t<div class="activity-rendered gh-panel">\n\t\t\t\t\t<div class="activity-info">\n\t\t\t\t\t\t${sprintf(__("Submitted form %s in funnel %s","groundhogg"),bold(activity.form.data.step_title),el("a",{href:funnel.admin,target:"_blank"},bold(funnel.data.title)))}\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t${textarea({className:"full-width code",value:JSON.stringify(activity.meta,null,2),readonly:true})}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="diff-time">\n\t\t\t\t\t\t${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>`}if(activity.type==="page_visit"){return`\n\t\t\t<li class="activity-item">\n\t\t\t\t<div class="activity-icon page-visit">${icons.link_click}\n\t\t\t\t</div>\n\t\t\t\t<div class="activity-rendered gh-panel">\n\t\t\t\t\t<div class="activity-info">\n\t\t\t\t\t\t${sprintf(__("Visited %s","groundhogg"),`<a href="${activity.data.path}" target="_blank">${bold(activity.data.path)}</a>`)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="diff-time">\n\t\t\t\t\t\t${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>`}if(activity.type==="event"){let{step:step,pending:pending=false}=activity;switch(parseInt(activity.data.event_type)){case 1:let funnel=FunnelsStore.get(step.data.funnel_id);return`\n\t\t\t\t<li class="activity-item">\n\t\t\t\t\t<div class="activity-icon ${step.data.step_group}">\n\t\t\t\t\t\t${icons.funnel}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="activity-rendered gh-panel space-between">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div class="activity-info">\n\t\t\t\t\t\t\t\t<span>${sprintf(step.data.step_group==="action"?pending?__("Pending action: %s | %s","groundhogg"):__("Completed action: %s | %s","groundhogg"):pending?__("Pending benchmark: %s | %s","groundhogg"):__("Completed benchmark: %s | %s","groundhogg"),bold(step.data.step_title),Groundhogg.rawStepTypes[step.data.step_type].name)}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="event-extra">\n\t\t\t\t\t\t\t\t${sprintf(__("in funnel %s","groundhogg"),el("a",{href:funnel.admin},funnel.data.title))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="diff-time">\n\t\t\t\t\t\t\t\t${sprintf(pending?Math.floor(Date.now()/1e3)>activity.time?__("Running now...","groundhogg"):__("Runs in %s","groundhogg"):__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button class="gh-button secondary icon text event-${pending?"queue-":""}more"\n\t\t\t\t\t\t        data-event="${activity.ID}">\n\t\t\t\t\t\t\t${icons.verticalDots}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</li>`;case 2:return`\n\t\t\t\t<li class="activity-item">\n\t\t\t\t\t<div class="activity-icon broadcast">${icons.megaphone}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="activity-rendered gh-panel space-between">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div class="activity-info">\n\t\t\t\t\t\t\t\t<span>${sprintf(pending?__("Will receive broadcast: %s","groundhogg"):__("Received broadcast: %s","groundhogg"),bold(activity.broadcast.object.data.title))}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="diff-time">\n\t\t\t\t\t\t\t\t${sprintf(pending?Math.floor(Date.now()/1e3)>activity.time?__("Running now...","groundhogg"):__("Runs in %s","groundhogg"):__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button class="gh-button secondary icon text event-${pending?"queue-":""}more"\n\t\t\t\t\t\t        data-event="${activity.ID}">\n\t\t\t\t\t\t\t${icons.verticalDots}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</li>`;case 3:return`\n\t\t\t\t<li class="activity-item">\n\t\t\t\t\t<div class="activity-icon broadcast">${icons.email}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="activity-rendered gh-panel space-between">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div class="activity-info">\n\t\t\t\t\t\t\t\t<span>${sprintf(pending?__("Will receive email: %s","groundhogg"):__("Received email: %s","groundhogg"),bold(activity.email.email.data.title))}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="diff-time">\n\t\t\t\t\t\t\t\t${sprintf(pending?Math.floor(Date.now()/1e3)>activity.time?__("Running now...","groundhogg"):__("Runs in %s","groundhogg"):__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button class="gh-button secondary icon text event-${pending?"queue-":""}more"\n\t\t\t\t\t\t        data-event="${activity.ID}">\n\t\t\t\t\t\t\t${icons.verticalDots}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</li>`}return""}const type=this.types[activity.data.activity_type];return`\n\t\t  <li class="activity-item ${activity.data.activity_type} activity"\n\t\t      tabindex="0">\n\t\t\t  <div class="activity-icon ${activity.data.activity_type} ${type.iconFramed===false?"no-frame":""}">\n\t\t\t\t  ${type.icon}\n\t\t\t  </div>\n\t\t\t  <div class="activity-rendered gh-panel">\n\t\t\t\t  <div class="activity-info">\n\t\t\t\t\t  ${type.render(activity)}\n\t\t\t\t  </div>\n\t\t\t\t  <div class="diff-time">\n\t\t\t\t\t  ${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </li>`},render(activities){return`\n\t\t  <ul id="activity-timeline">\n\t\t\t  ${activities.map((a=>{try{return this.renderActivity(a)}catch(e){return""}})).join("")}\n\t\t  </ul>`},onMount(){$(".event-queue-more").on("click",(e=>{let eventId=e.currentTarget.dataset.event;const event=EventQueue.get(eventId);moreMenu(e.currentTarget,{items:[{key:"execute",text:__("Run Now")},{key:"cancel",text:`<span class="gh-text danger">${__("Cancel")}</span>`}],onSelect:key=>{switch(key){case"cancel":patch(`${EventQueue.route}/${event.ID}/cancel`).then((()=>{EventQueue.items.splice(EventQueue.items.findIndex((e=>e.ID===event.ID)),1);dialog({message:__("Event cancelled","groundhogg")});this.needsRefresh()}));break;case"execute":patch(`${EventQueue.route}/${event.ID}/execute`).then((()=>{dialog({message:__("Event rescheduled","groundhogg")});this.needsRefresh()}));break}}})}));$(".event-more").on("click",(e=>{let eventId=e.currentTarget.dataset.event;const event=EventsStore.get(eventId);moreMenu(e.currentTarget,{items:[{key:"execute",text:__("Run Again")}],onSelect:key=>{switch(key){case"execute":patch(`${EventsStore.route}/${event.ID}/execute`).then((()=>{dialog({message:__("Event rescheduled","groundhogg")});this.needsRefresh()}));break}}})}))},mount(selector,activities,{needsRefresh:needsRefresh=(()=>{})}){this.needsRefresh=needsRefresh;const $el=$(selector);activities=activities.filter((a=>["event","page_visit","submission"].includes(a.type)||a.data.activity_type in this.types));if(!activities.length){$el.html(`<div class="align-center-space-between" style="margin: 20px"><span class="pill orange">${__("No activity found.","groundhogg")}</span></div>`);return}let funnelIds=activities.reduce(((arr,e)=>{let funnelId=parseInt(e.data?.funnel_id||e.form?.data?.funnel_id);if(funnelId>1){if(!arr.includes(funnelId)){arr.push(funnelId)}}return arr}),[]);let promises=[...activities.filter((a=>a.type==="activity")).map((a=>this.types[a.data.activity_type].preload(a))),funnelIds.length&&!FunnelsStore.hasItems(funnelIds)?FunnelsStore.fetchItems({ID:funnelIds}):null,...activities.filter((a=>a.type==="event"&&a.data.event_type==2)).map((a=>BroadcastsStore.itemsFetched([a.broadcast])))];Promise.all(promises).then((()=>{$el.html(this.render(activities));this.onMount()})).catch((e=>{console.log(e)}))}};const otherContactStuff=()=>{let activeTab="activity";const tabs=[{id:"activity",name:__("Activity"),render:()=>`\n\t\t\t  <div class="gh-panel top-left-square">\n\t\t\t\t  <div class="inside">\n\t\t\t\t\t  <div class="display-flex gap-10 align-bottom">\n\t\t\t\t\t\t  <div class="order-by">\n\t\t\t\t\t\t\t  <label for="activity-order"><b>${__("Order by")}</b></label><br/>\n\t\t\t\t\t\t\t  ${select({id:"activity-order",name:"order"},{desc:__("Newest first"),asc:__("Oldest first")},"desc")}\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t  <div class="filter-by">\n\t\t\t\t\t\t\t  <label for="filter-by"><b>${__("Filter by")}</b></label><br/>\n\t\t\t\t\t\t\t  ${select({id:"filter-by",name:"filter"},{all:__("All Activity","groundhogg"),funnel:__("Funnel Activity","groundhogg"),email:__("Email Activity","groundhogg"),web:__("Web Activity","groundhogg"),...isWPFusionActive?{wp_fusion:__("WPFusion Activity","groundhogg")}:{}},"")}\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t  <button id="refresh-timeline"\n\t\t\t\t\t\t          class="gh-button secondary text icon"><span\n\t\t\t\t\t\t\t  class="dashicons dashicons-update-alt"></span>\n\t\t\t\t\t\t  </button>\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div id="activity-here">\n\t\t\t\t  ${spinner()}\n\t\t\t  </div>`,onMount:()=>{let order="desc";let filter="all";$("#refresh-timeline").on("click",(e=>{$(e.currentTarget).find(".dashicons").addClass("spinning");fetchActivity().then((()=>{$(e.currentTarget).find(".dashicons").removeClass("spinning")}))}));tooltip("#refresh-timeline",{content:__("Refresh"),position:"right"});$("#activity-order").on("change",(e=>{order=e.target.value;fetchActivity()}));$("#filter-by").on("change",(e=>{filter=e.target.value;loadTimeline()}));const fetchActivity=()=>Promise.all([SubmissionsStore.fetchItems({contact_id:contact.ID,limit:50,order:order,orderby:"date_created"}),ActivityStore.fetchItems({contact_id:contact.ID,limit:50,order:order,orderby:"timestamp"}),EventsStore.fetchItems({contact_id:contact.ID,status:"complete",limit:50,orderby:"time",order:order}),EventQueue.fetchItems({contact_id:contact.ID,status:"waiting",limit:50,orderby:"time",order:order}),PageVisitsStore.fetchItems({contact_id:contact.ID,limit:50,orderby:"timestamp",order:order})]).then((()=>{loadTimeline()})).catch((e=>{loadTimeline()}));const loadTimeline=()=>{let allActivities=[...SubmissionsStore.getItems().map((a=>({...a,type:"submission",time:parseInt(a.data.time)}))),...ActivityStore.getItems().map((a=>({...a,type:"activity",time:parseInt(a.data.timestamp)}))),...EventsStore.getItems().map((e=>({...e,type:"event",time:parseInt(e.data.time)+parseFloat(e.data.micro_time)}))),...EventQueue.getItems().map((e=>({...e,type:"event",pending:true,time:parseInt(e.data.time)+parseFloat(e.data.micro_time)}))),...PageVisitsStore.getItems().map((v=>({...v,type:"page_visit",time:parseInt(v.data.timestamp)})))].sort(((a,b)=>{if(b.time===a.time&&a.micro_time&&b.micro_time){return order==="desc"?b.micro_time-a.micro_time:a.micro_time-b.micro_time}return order==="desc"?b.time-a.time:a.time-b.time}));switch(filter){case"submissions":allActivities=allActivities.filter((a=>a.type==="submission"));break;case"funnel":allActivities=allActivities.filter((a=>a.type==="event"&&a.data.event_type==1));break;case"email":allActivities=allActivities.filter((a=>a.data.email_id>0));break;case"web":allActivities=allActivities.filter((a=>a.type==="page_visit"));break;case"wp_fusion":allActivities=allActivities.filter((a=>a.type==="activity"&&a.data.activity_type==="wp_fusion"));break}ActivityTimeline.mount("#activity-here",allActivities,{needsRefresh:()=>{fetchActivity()}});$("#activity-here").css({maxHeight:$("#primary-contact-stuff").height()})};if(ActivityStore.hasItems()||EventsStore.hasItems()||EventQueue.hasItems()||PageVisitsStore.hasItems()||SubmissionsStore.hasItems()){loadTimeline();return}fetchActivity()}},{id:"notes",name:__("Notes"),render:()=>`\n\t\t\t  <div class="gh-panel top-left-square">\n\t\t\t\t  <div class="inside" id="notes-here"></div>\n\t\t\t  </div>`,onMount:()=>{Groundhogg.noteEditor("#notes-here",{object_id:contact.ID,object_type:"contact",title:""})}},{id:"files",name:__("Files"),render:()=>`\n\t\t\t  <div class="gh-panel top-left-square">\n\t\t\t\t  <div id="file-actions" class="inside space-between">\n\t\t\t\t\t  ${input({placeholder:__("Search files..."),type:"search",id:"search-files"})}\n\t\t\t\t\t  <button id="upload-file" class="gh-button secondary">\n\t\t\t\t\t\t  ${__("Upload Files")}\n\t\t\t\t\t  </button>\n\t\t\t\t  </div>\n\t\t\t\t  <div id="bulk-actions" class="hidden inside"\n\t\t\t\t       style="padding-top: 0">\n\t\t\t\t\t  <button id="bulk-delete-files"\n\t\t\t\t\t          class="gh-button danger icon"><span\n\t\t\t\t\t\t  class="dashicons dashicons-trash"></span></button>\n\t\t\t\t  </div>\n\t\t\t\t  <table class="wp-list-table widefat striped"\n\t\t\t\t         style="border: none">\n\t\t\t\t\t  <thead></thead>\n\t\t\t\t\t  <tbody id="files-here">\n\t\t\t\t\t  </tbody>\n\t\t\t\t  </table>\n\t\t\t  </div>`,onMount:()=>{let selectedFiles=[];let fileSearch="";$("#bulk-delete-files").on("click",(()=>{dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(_n("Are you sure you want to delete %d file?","Are you sure you want to delete %d files?",selectedFiles.length,"groundhogg"),selectedFiles.length)}</p>`,onConfirm:()=>{_delete(`${routes.v4.contacts}/${contact.ID}/files`,selectedFiles).then((({items:items})=>{selectedFiles=[];files=items;mount()}))}})}));$("#search-files").on("input change",(e=>{fileSearch=e.target.value;mount()}));tooltip("#bulk-delete-files",{content:__("Bulk delete files"),position:"right"});const renderFile=file=>`\n\t\t\t\t<tr class="file">\n\t\t\t\t\t<th scope="row" class="check-column">${input({type:"checkbox",name:"select[]",className:"file-toggle",value:file.name})}\n\t\t\t\t\t</th>\n\t\t\t\t\t<td class="column-primary"><a class="row-title"\n\t\t\t\t\t                              href="${file.url}"\n\t\t\t\t\t                              target="_blank">${file.name}</a>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>${file.date_modified}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<div class="space-between align-right">\n\t\t\t\t\t\t\t<button data-file="${file.name}"\n\t\t\t\t\t\t\t        class="file-more gh-button secondary text icon">\n\t\t\t\t\t\t\t\t${icons.verticalDots}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>`;const mount=()=>{$("#files-here").html(files.filter((f=>!fileSearch||f.name.match(regexp(fileSearch)))).map((f=>renderFile(f))).join(""));onMount()};const onMount=()=>{const maybeShowBulkActions=()=>{if(selectedFiles.length){$("#bulk-actions").removeClass("hidden")}else{$("#bulk-actions").addClass("hidden")}};$(".file-more").on("click",(e=>{let _file=e.currentTarget.dataset.file;moreMenu(e.currentTarget,{items:[{key:"download",text:__("Download")},userHasCap("delete_files")?{key:"delete",text:`<span class="gh-text danger">${__("Delete")}</span>`}:false],onSelect:k=>{switch(k){case"download":window.open(files.find((f=>f.name===_file)).url,"_blank").focus();break;case"delete":dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(__("Are you sure you want to delete %s?","groundhogg"),_file)}</p>`,onConfirm:()=>{_delete(`${routes.v4.contacts}/${contact.ID}/files`,[_file]).then((({items:items})=>{selectedFiles=[];files=items;mount()}))}});break}}})}));$(".file-toggle").on("change",(e=>{if(e.target.checked){selectedFiles.push(e.target.value)}else{selectedFiles.splice(selectedFiles.indexOf(e.target.value),1)}maybeShowBulkActions()}))};$("#upload-file").on("click",(e=>{e.preventDefault();Groundhogg.components.fileUploader({action:"groundhogg_contact_upload_file",nonce:"",beforeUpload:fd=>fd.append("contact",contact.ID),onUpload:(json,file)=>{files=json.data.files;mount()}})}));if(!files.length){ContactsStore.fetchFiles(contact.ID).then((_files=>{files=_files;mount()}))}mount()}},{id:"inbox",name:__("Inbox"),render:()=>`\n\t\t\t  <div class="gh-panel top-left-square">\n\t\t\t\t  <div class="inside" id="inbox-here">\n\t\t\t\t\t  <p>\n\t\t\t\t\t\t  ${sprintf(__("Hi %s, we're still working on the inbox feature! We know how important this is for you, so our team is working around the clock to make it a reality!","groundhogg"),Groundhogg.currentUser.data.display_name)}</p>\n\t\t\t\t\t  <p>\n\t\t\t\t\t\t  ${__('You can help us get there faster by giving us a <a target="_blank" href="https://wordpress.org/support/plugin/groundhogg/reviews/?filter=5">⭐⭐⭐⭐⭐ review!</a>')}</p>\n\t\t\t\t  </div>\n\t\t\t  </div>`,onMount:()=>{}}];tabs.splice(tabs.findIndex((t=>t.id==="inbox")),1);const template=()=>`\n\t\t  <div id="secondary-tabs"><h2\n\t\t\t  class="no-margin nav-tab-wrapper secondary gh">\n\t\t\t  ${tabs.map((({id:id,name:name})=>`<a href="#" data-tab="${id}" class="nav-tab ${activeTab===id?"nav-tab-active":""}">${name}</a>`)).join("")}\n\t\t  </h2>\n\t\t\t  ${tabs.find((t=>t.id===activeTab)).render()}\n\t\t  </div>`;const mount=()=>{$("#other-contact-stuff").html(template());onMount()};const onMount=()=>{tabs.find((t=>t.id===activeTab)).onMount();$(".nav-tab-wrapper.secondary .nav-tab").on("click",(e=>{activeTab=e.target.dataset.tab;mount()}))};mount()};const handleFormSubmit=()=>{$("#primary-form").on("submit",(e=>{e.preventDefault();const $btn=$("#save-primary");let{stop:stop}=loadingDots("#save-primary");$btn.prop("disabled",true);let data=new FormData(e.currentTarget);data.append("action","groundhogg_edit_contact");data.append("contact",getContact().ID);ajax(data).then((r=>{$(".gh-panel.contact-details .inside").replaceWith(r.data.details);ContactsStore.itemsFetched([r.data.contact]);$btn.prop("disabled",false);stop();dialog({message:__("Changes saved!")})}))}))};const managePrimaryTabs=()=>{let activeTab="general";let customTabState=gh_contact_custom_properties||{tabs:[],groups:[],fields:[]};const __groups=()=>customTabState.groups.filter((g=>g.tab===activeTab));const __fields=()=>customTabState.fields.filter((f=>__groups().find((g=>g.id===f.group))));let timeout;let metaChanges={};let deleteKeys=[];const commitMetaChanges=()=>{let{stop:stop}=loadingDots("#save-meta");$("#save-meta").prop("disabled",true);Promise.all([ContactsStore.patchMeta(getContact().ID,metaChanges),deleteKeys.length?ContactsStore.deleteMeta(getContact().ID,deleteKeys):null]).then((()=>{metaChanges={};deleteKeys=[];stop();mount();dialog({message:__("Changes saved!")})}))};const cancelMetaChanges=()=>{metaChanges={};deleteKeys=[];mount()};const updateTabState=()=>{if(timeout){clearTimeout(timeout)}timeout=setTimeout((()=>{patch(routes.v4.options,{gh_contact_custom_properties:customTabState}).then((()=>{dialog({message:__("Changes saved!","groundhogg")})}))}),3e3)};$(document).on("click",".nav-tab-wrapper.primary a.nav-tab",(e=>{e.preventDefault();let $tab=$(e.target);$(".nav-tab-wrapper.primary .nav-tab").removeClass("nav-tab-active");$tab.addClass("nav-tab-active");activeTab=e.target.id;mount()}));const mount=()=>{$("#primary-contact-stuff .edit-meta").remove();$("#primary-contact-stuff .custom-tab").remove();$("#primary-contact-stuff .tab-more").remove();$(`<a href="#" id="edit-meta" class="nav-tab edit-meta ${"edit-meta"===activeTab?" nav-tab-active":""}">${__("More","groundhogg")}</a>`).insertAfter("#general");$(customTabState.tabs.map((({id:id,name:name})=>`<a href="#" id="${id}" class="nav-tab custom-tab${id===activeTab?" nav-tab-active":""}">${name}</a>`)).join("")).insertAfter("#edit-meta");onMount()};const onMount=()=>{$("#primary-contact-stuff .tab-content-wrapper").removeClass("active");$(`#primary-contact-stuff [data-tab-content="${activeTab}"]`).addClass("active");if(customTabState.tabs.find((t=>t.id===activeTab))){let customTabUi=`\n\t\t\t<div class="tab-content-wrapper custom-tab gh-panel top-left-square active"\n\t\t\t     data-tab-content="${activeTab}">\n\t\t\t\t<div class="inside">\n\t\t\t\t\t<div id="custom-fields-here">\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<button id="save-meta" class="gh-button primary">\n\t\t\t\t\t\t\t${__("Save Changes")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id="cancel-meta-changes"\n\t\t\t\t\t\t        class="gh-button danger text">${__("Cancel")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>`;$(customTabUi).insertAfter("#primary-contact-stuff form");$(`<button class="gh-button tab-more secondary text icon">${icons.verticalDots}</button>`).insertAfter("#add-tab");$("#save-meta").on("click",commitMetaChanges);$("#cancel-meta-changes").on("click",cancelMetaChanges);tooltip(".tab-more",{content:__("Tab Options","groundhogg"),position:"right"});$(".tab-more").on("click",(e=>{e.preventDefault();moreMenu(e.currentTarget,{items:[{key:"rename",cap:"manage_options",text:__("Rename")},{key:"delete",cap:"manage_options",text:`<span class="gh-text danger">${__("Delete")}</span>`}],onSelect:k=>{switch(k){case"delete":dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(__("Are you sure you want to delete %s?","groundhogg"),bold(customTabState.tabs.find((t=>t.id===activeTab)).name))}</p>`,onConfirm:()=>{let fields=__fields().map((f=>f.id));customTabState.fields=customTabState.fields.filter((f=>!fields.includes(f.id)));customTabState.groups=customTabState.groups.filter((g=>g.tab!==activeTab));customTabState.tabs=customTabState.tabs.filter((t=>t.id!==activeTab));updateTabState();activeTab="general";mount()}});break;case"rename":modal({content:`\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h2>${__("Rename tab","groundhogg")}</h2>\n\t\t\t\t\t\t\t<div class="align-left-space-between">\n\t\t\t\t\t\t\t\t${input({id:"tab-name",value:customTabState.tabs.find((t=>t.id===activeTab)).name,placeholder:__("Tab name","groundhogg")})}\n\t\t\t\t\t\t\t\t<button id="update-tab"\n\t\t\t\t\t\t\t\t        class="gh-button primary">\n\t\t\t\t\t\t\t\t\t${__("Save")}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>`,onOpen:({close:close})=>{let tabName;$("#tab-name").on("change input",(e=>{tabName=e.target.value})).focus();$("#update-tab").on("click",(()=>{customTabState.tabs.find((t=>t.id===activeTab)).name=tabName;updateTabState();mount();close()}))}});break}}})}));propertiesEditor("#custom-fields-here",{values:{...getContact().meta,...metaChanges},properties:{groups:__groups(),fields:__fields()},onPropertiesUpdated:({groups:groups=[],fields:fields=[]})=>{customTabState.fields=[...customTabState.fields.filter((field=>!__fields().find((f=>f.id===field.id)))),...fields];customTabState.groups=[...customTabState.groups.filter((group=>!__groups().find((g=>g.id===group.id)))),...groups.map((g=>({...g,tab:activeTab})))];updateTabState()},onChange:meta=>{metaChanges={...metaChanges,...meta}},canEdit:()=>userHasCap("manage_options")})}else if(activeTab==="edit-meta"){let combinedMeta={...getContact().meta,...metaChanges};let metaUi=`\n\t\t\t<div class="tab-content-wrapper edit-meta gh-panel top-left-square active"\n\t\t\t     data-tab-content="${activeTab}">\n\t\t\t\t<div class="inside">\n\t\t\t\t\t<h2>${__("Additional Contact Methods","groundhogg")}</h2>\n\t\t\t\t\t<p><b>${__("Email Addresses","groundhogg")}</b></p>\n\t\t\t\t\t<div id="contact-emails-here"></div>\n\t\t\t\t\t<p><b>${__("Phone Numbers","groundhogg")}</b></p>\n\t\t\t\t\t<div id="contact-phones-here"></div>\n\t\t\t\t\t<h2>${__("Meta")}</h2>\n\t\t\t\t\t<div id="meta-here">\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<button id="save-meta" class="gh-button primary">\n\t\t\t\t\t\t\t${__("Save Changes")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id="cancel-meta-changes"\n\t\t\t\t\t\t        class="gh-button danger text">${__("Cancel")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>`;$(metaUi).insertAfter("#primary-contact-stuff form");$("#cancel-meta-changes").on("click",cancelMetaChanges);let{alternate_emails:alternate_emails=[],alternate_phones:alternate_phones=[]}=getContact().meta;inputRepeaterWidget({selector:"#contact-phones-here",rows:alternate_phones,cellProps:[{type:"email",options:{mobile:__("Mobile"),home:__("Home"),work:__("Work")}},{type:"tel",placeholder:__("(123) 456-7890")}],cellCallbacks:[select,input],onMount:()=>{},onChange:rows=>{metaChanges.alternate_phones=rows}}).mount();inputRepeaterWidget({selector:"#contact-emails-here",rows:alternate_emails.map((e=>[e])),cellProps:[{type:"email",className:"alternate-email-address",placeholder:__("john.doe@example.com","groundhogg")}],cellCallbacks:[input],onMount:()=>{},onChange:rows=>{metaChanges.alternate_emails=rows.map((r=>r[0]))}}).mount();inputRepeaterWidget({selector:"#meta-here",rows:Object.keys(combinedMeta).filter((k=>!meta_exclusions.includes(k))).map((k=>[k,combinedMeta[k]])).map((([k,v])=>[k,["array","object"].includes(typeof v)?"SERIALIZED DATA":v])),cellProps:[{className:"meta-key",readonly:true},{}],cellCallbacks:[input,input],onMount:()=>{$(`[value="SERIALIZED DATA"]`).prop("readonly",true);$(".meta-key").each(((i,el)=>{let $el=$(el);if(!$el.val()){$el.prop("readonly",false)}})).on("input",(e=>{let key=sanitizeKey(e.target.value);$(e.target).val(key)}))},onChange:rows=>{rows.forEach((([key,value])=>{if(!key){return}metaChanges[key]=value}))},onRemove:([key,value])=>{if(!key){return}deleteKeys.push(key);delete metaChanges[key]}}).mount();$("#save-meta").on("click",commitMetaChanges)}};if(userHasCap("manage_options")){$(".nav-tab-wrapper.primary").append(`<div id="tab-actions" class="space-between"><button type="button" id="add-tab"><span class="dashicons dashicons-plus-alt2"></span></button></div>`);$("#add-tab").on("click",(e=>{e.preventDefault();modal({content:`\n\t\t\t  <div>\n\t\t\t\t  <h2>${__("Add a new tab","groundhogg")}</h2>\n\t\t\t\t  <div class="align-left-space-between">\n\t\t\t\t\t  ${input({id:"tab-name",placeholder:__("Tab name","groundhogg")})}\n\t\t\t\t\t  <button id="create-tab" class="gh-button primary">\n\t\t\t\t\t\t  ${__("Create")}\n\t\t\t\t\t  </button>\n\t\t\t\t  </div>\n\t\t\t  </div>`,onOpen:({close:close})=>{let tabName;$("#tab-name").on("change input",(e=>{tabName=e.target.value})).focus();$("#create-tab").on("click",(()=>{let id=uuid();customTabState.tabs.push({id:id,name:tabName});activeTab=id;updateTabState();mount();close()}))}})}));tooltip("#add-tab",{content:__("Add tab","groundhogg"),position:"right"})}mount()};const manageTags=()=>{let removeTags=[];let addTags=[];$(".tags-panel").on("click",".handlediv",(e=>{$(".tags-panel").toggleClass("closed")}));const template=()=>`\n\t\t  <div id="gh-better-tag-picker">\n\t\t  </div>\n\t\t  <div class="tag-change-actions hidden" style="margin-top: 10px">\n\t\t\t  <button id="cancel-tag-changes" class="gh-button danger text">\n\t\t\t\t  ${__("Cancel")}\n\t\t\t  </button>\n\t\t\t  <button id="save-tag-changes" class="gh-button primary">\n\t\t\t\t  ${__("Save")}\n\t\t\t  </button>\n\t\t  </div>`;const maybeShowTagChangeActions=()=>{if(removeTags.length||addTags.length){$(".tag-change-actions").addClass("align-right-space-between")}else{$(".tag-change-actions").removeClass("align-right-space-between")}};const mount=()=>{$("#tags-here").html(template());onMount()};const onMount=()=>{betterTagPicker("#gh-better-tag-picker",{selected:getContact().tags,onChange:({addTags:_addTags,removeTags:_removeTags})=>{removeTags=_removeTags;addTags=_addTags;maybeShowTagChangeActions()}});$("#save-tag-changes").on("click",(()=>{ContactsStore.patch(getContact().ID,{remove_tags:removeTags,add_tags:addTags}).then((()=>{dialog({message:__("Changes saved!")});addTags=[];removeTags=[];mount()}))}));$("#cancel-tag-changes").on("click",(()=>{addTags=[];removeTags=[];mount()}))};TagsStore.itemsFetched(getContact().tags);TagsStore.fetchItems();mount()};$.extend(editor,{init(){handleFormSubmit();contactMoreActions();manageTags();managePrimaryTabs();otherContactStuff();$("#send-email").on("click",(e=>{e.preventDefault();sendEmail()}));$("#primary-contact-stuff .toggle-indicator").on("click",(e=>{$(e.target).closest(".gh-panel").toggleClass("closed")}));if(window.location.href.match(/send_email=true/)){sendEmail()}}});$((function(){editor.init()}));Groundhogg.ActivityTimeline=ActivityTimeline})(jQuery,ContactEditor);