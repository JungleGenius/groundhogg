(($,editor)=>{const{contact:contact,meta_exclusions:meta_exclusions,gh_contact_custom_properties:gh_contact_custom_properties}=editor;const{tooltip:tooltip,regexp:regexp,inputRepeaterWidget:inputRepeaterWidget,searchOptionsWidget:searchOptionsWidget,input:input,select:select,icons:icons,bold:bold,modal:modal,uuid:uuid,moreMenu:moreMenu,spinner:spinner,dialog:dialog}=Groundhogg.element;const{currentUser:currentUser,filters:filters,propertiesEditor:propertiesEditor}=Groundhogg;const{userHasCap:userHasCap}=Groundhogg.user;const{events:EventsStore,tags:TagsStore,contacts:ContactsStore,emails:EmailsStore,activity:ActivityStore,funnels:FunnelsStore,broadcasts:BroadcastsStore}=Groundhogg.stores;const{post:post,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;ContactsStore.itemsFetched([contact]);const getContact=()=>{return ContactsStore.get(contact.ID)};const sendEmail=()=>{let contact=getContact();let email={to:[contact.data.email],from_email:currentUser.data.user_email,from_name:currentUser.data.display_name};if(contact.data.owner_id&&currentUser.ID!=contact.data.owner_id){email.cc=[filters.owners.find(u=>u.ID==contact.data.owner_id).data.user_email]}Groundhogg.components.emailModal(email)};const contactMoreActions=()=>{let actions=`
    <button id="action-send-email" class="gh-button secondary text icon">${icons.email}</button>
				<button class="gh-button secondary text icon">${icons.phone}</button>
				<button class="gh-button secondary text icon">${icons.note}</button>
				<button class="gh-button secondary text icon">${icons.verticalDots}</button>`;$("#contact-more-actions").html(actions);tooltip("#action-send-email",{content:__("Send email","groundhogg")});$("#action-send-email").on("click",sendEmail)};const ActivityTimeline={types:{wp_fusion:{icon:icons.wp_fusion,render:({data:data,meta:meta})=>{const{event_name:event_name,event_value:event_value}=meta;return`${event_name}: <code>${event_value}</code>`},preload:()=>{}},wp_login:{icon:icons.login,render:({email:email})=>{return __("Logged in","groundhogg")},preload:()=>{}},wp_logout:{icon:icons.logout,render:({email:email})=>{return __("Logged out","groundhogg")},preload:()=>{}},email_opened:{icon:icons.open_email,render:({email:email})=>{return sprintf(__("Opened %s","groundhogg"),bold(email.data.title))},preload:({email:email})=>{EmailsStore.itemsFetched([email])}},email_link_click:{icon:icons.link_click,render:({email:email,data:data})=>{return sprintf(__("Clicked %s in %s","groundhogg"),el("a",{target:"_blank",href:data.referer},bold(data.referer)),bold(email.data.title))},preload:({email:email})=>{EmailsStore.itemsFetched([email])}}},renderActivity:function(activity){if(activity.type==="event"&&activity.data.event_type==1){let{step:step}=activity;return`
			<li class="activity-item">
				<div class="activity-icon ${step.data.step_group}">${icons.funnel}</div>
				<div class="activity-rendered gh-panel">
					<div class="activity-info">
						<div class="space-between" style="gap: 20px">
							<span>${sprintf(step.data.step_group==="action"?__("Completed action: %s","groundhogg"):__("Completed benchmark: %s","groundhogg"),bold(step.data.step_title))}</span>
							<button class="gh-button secondary icon text small event-more" data-event="${activity.ID}">
								${icons.verticalDots}
							</button>
						</div>
					</div>
					<div class="event-extra">
						${sprintf(__("in funnel %s","groundhogg"),FunnelsStore.get(step.data.funnel_id).data.title)}
					</div>
					<div class="diff-time">
						${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}
					</div>
				</div>
			</li>`}if(activity.type==="event"&&activity.data.event_type==2){return`
			<li class="activity-item">
				<div class="activity-icon broadcast">${icons.megaphone}</div>
				<div class="activity-rendered gh-panel">
					<div class="activity-info">
						<div class="space-between" style="gap: 20px">
							<span>${sprintf(__("Received broadcast: %s","groundhogg"),bold(activity.broadcast.object.data.title))}</span>
							<button class="gh-button secondary icon text small event-more" data-event="${activity.ID}">
								${icons.verticalDots}
							</button>
						</div>
					</div>
					<div class="diff-time">
						${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}
					</div>
				</div>
			</li>`}const type=this.types[activity.data.activity_type];return`
		  <li class="activity-item ${activity.data.activity_type} activity">
			  <div class="activity-icon ${activity.data.activity_type}">${type.icon}</div>
			  <div class="activity-rendered gh-panel">
				  <div class="activity-info">
					  ${type.render(activity)}
				  </div>
				  <div class="diff-time">
					  ${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}
				  </div>
			  </div>
		  </li>`},render:function(activities){return`
		  <ul id="activity-timeline">
			  ${activities.map(a=>this.renderActivity(a)).join("")}
		  </ul>`},onMount:function(){$(".event-more").on("click",e=>{let eventId=e.currentTarget.dataset.event;const event=EventsStore.get(eventId);moreMenu(e.currentTarget,{items:[{key:"run_again",text:__("Run Again")}],onSelect:key=>{switch(key){case"run_again":break}}})})},mount:function(selector,activities){const $el=$(selector);activities=activities.filter(a=>a.type==="event"||a.data.activity_type in this.types);if(!activities.length){$el.html(`<p>${__("No tracked activity yet","groundhogg")}</p>`);return}let funnelIds=activities.filter(a=>a.type==="event"&&a.data.event_type==1).reduce((arr,e)=>{if(!arr.includes(e.data.funnel_id)){arr.push(e.data.funnel_id)}return arr},[]);let promises=[...activities.filter(a=>a.type==="activity").map(a=>this.types[a.data.activity_type].preload(a)),!FunnelsStore.hasItems(funnelIds)?FunnelsStore.fetchItems({ID:funnelIds}):null,...activities.filter(a=>a.type==="event"&&a.data.event_type==2).map(a=>BroadcastsStore.itemsFetched([a.broadcast]))];Promise.all(promises).then(()=>{$el.html(this.render(activities));this.onMount()})}};const otherContactStuff=()=>{let activeTab="activity";const tabs=[{id:"activity",name:__("Activity"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div class="inside">
					  <div class="align-left-space-between">
						  <div class="order-by">
							  <label id="activity-orderby">${__("Order by")}</label><br/>
							  ${select({id:"activity-orderby",name:"orderby"},{asc:__("Newest first"),desc:__("Oldest first")},"")}
						  </div>
						  <div class="filter-by">
							  <label for="filter-by">${__("Filter by")}</label><br/>
							  ${select({id:"filter-by",name:"filter"},{all:__("All Activity","groundhogg"),funnel:__("Funnel Activity","groundhogg"),email:__("Email Activity","groundhogg"),wp_fusion:__("WPFusion Activity","groundhogg"),web:__("Web Activity","groundhogg")},"")}
						  </div>
						  <div class="filter-by hidden">
							  <label>${__("Date Range")}</label><br/>
							  <div class="gh-input-group">
								  ${input({type:"date",className:"small"})}
								  ${input({type:"date",className:"small"})}
							  </div>
						  </div>
					  </div>
				  </div>
			  </div>
			  <div id="activity-here">
				  ${spinner()}
			  </div>`},onMount:()=>{const loadTimeline=()=>{let allActivities=[...ActivityStore.getItems().map(a=>({...a,type:"activity",time:parseInt(a.data.timestamp)})),...EventsStore.getItems().map(e=>({...e,type:"event",time:parseInt(e.data.time)+parseFloat(e.data.micro_time)}))].sort((a,b)=>b.time-a.time);ActivityTimeline.mount("#activity-here",allActivities)};if(ActivityStore.hasItems()||EventsStore.hasItems()){loadTimeline();return}Promise.all([ActivityStore.fetchItems({contact_id:contact.ID,limit:50}),EventsStore.fetchItems({contact_id:contact.ID,limit:50,orderby:"time",order:"DESC"})]).then(()=>{loadTimeline()})}},{id:"notes",name:__("Notes"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div class="inside" id="notes-here"></div>
			  </div>`},onMount:()=>{Groundhogg.noteEditor("#notes-here",{object_id:contact.ID,object_type:"contact",title:""})}},{id:"inbox",name:__("Inbox"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div class="inside" id="inbox-here">
					  <p>
						  ${sprintf(__("Hi %s, we're still working on the inbox feature! We know how important this is for you, so our team is working around the clock to make it a reality!","groundhogg"),Groundhogg.currentUser.data.display_name)}</p>
					  <p>
						  ${__('You can help us get there faster by giving us a <a target="_blank" href="https://wordpress.org/support/plugin/groundhogg/reviews/?filter=5">⭐⭐⭐⭐⭐ review!</a>')}</p>
				  </div>
			  </div>`},onMount:()=>{}}];if(Groundhogg.isWhiteLabeled){tabs.splice(tabs.findIndex(t=>t.id==="inbox"),1)}const template=()=>{return`
		  <div id="secondary-tabs"><h2 class="nav-tab-wrapper secondary gh">
			  ${tabs.map(({id:id,name:name})=>`<a href="#" data-tab="${id}" class="nav-tab ${activeTab===id?"nav-tab-active":""}">${name}</a>`).join("")}
		  </h2>
			  ${tabs.find(t=>t.id===activeTab).render()}
		  </div>`};const mount=()=>{$("#other-contact-stuff").html(template());onMount()};const onMount=()=>{tabs.find(t=>t.id===activeTab).onMount();$(".nav-tab-wrapper.secondary .nav-tab").on("click",e=>{activeTab=e.target.dataset.tab;mount()})};mount()};const manageMeta=()=>{const mount=()=>{onMount()};const onMount=()=>{inputRepeaterWidget({selector:"#meta-here",rows:Object.keys(getContact().meta).filter(k=>!meta_exclusions.includes(k)).map(k=>[k,getContact().meta[k]]),cellProps:[{className:"meta-key",readonly:true},{}],cellCallbacks:[input,input],onMount:()=>{$(".meta-key").each((i,el)=>{let $el=$(el);if(!$el.val()){$el.prop("readonly",false)}})},onChange:rows=>{console.log(rows)}}).mount()};mount()};const managePrimaryTabs=()=>{let activeTab="general";let tabState=gh_contact_custom_properties||{tabs:[],groups:[],fields:[]};let timeout;const updateTabState=()=>{if(timeout){clearTimeout(timeout)}timeout=setTimeout(()=>{patch(routes.v4.options,{gh_contact_custom_properties:tabState}).then(()=>{dialog({message:__("Changes saved!","groundhogg")})})},1500)};$(document).on("click",".nav-tab-wrapper.primary a.nav-tab",e=>{e.preventDefault();let $tab=$(e.target);$(".nav-tab-wrapper.primary .nav-tab").removeClass("nav-tab-active");$tab.addClass("nav-tab-active");activeTab=e.target.id;mount()});const mount=()=>{$("#primary-contact-stuff .custom-tab").remove();$("#primary-contact-stuff .tab-more").remove();$(tabState.tabs.map(({id:id,name:name})=>`<a href="#" id="${id}" class="nav-tab custom-tab${id===activeTab?" nav-tab-active":""}">${name}</a>`).join("")).insertBefore("#tab-actions");onMount()};const onMount=()=>{$("#primary-contact-stuff .tab-content-wrapper").removeClass("active");$(`#primary-contact-stuff [data-tab-content="${activeTab}"]`).addClass("active");if(tabState.tabs.find(t=>t.id===activeTab)){$(`<div class="tab-content-wrapper custom-tab gh-panel top-left-square active" data-tab-content="${activeTab}">
					<div class="inside">
						<div id="custom-fields-here">
						</div>
					</div>
				</div>`).insertAfter("#primary-contact-stuff form");$(`<button class="gh-button tab-more secondary text icon">${icons.verticalDots}</button>`).insertAfter("#add-tab");let groups=tabState.groups.filter(g=>g.tab===activeTab);let fields=tabState.fields.filter(f=>groups.find(g=>g.id===f.group));propertiesEditor("#custom-fields-here",{values:{...getContact().meta},properties:{groups:groups,fields:fields},onPropertiesUpdated:({groups:groups=[],fields:fields=[]})=>{tabState.groups=[...groups.map(g=>({...g,tab:activeTab})),...tabState.groups.filter(group=>!groups.find(_group=>_group.id==group.id))];tabState.fields=[...fields,...tabState.fields.filter(field=>!fields.find(_field=>_field.id==field.id))];updateTabState()},onChange:()=>{},canEdit:()=>{return userHasCap("edit_contacts")}})}else{}};$(".nav-tab-wrapper.primary").append(`<div id="tab-actions" class="space-between"><button id="add-tab"><span class="dashicons dashicons-plus-alt2"></span></button></div>`);$("#add-tab").on("click",e=>{e.preventDefault();modal({content:`
			<div>
				<h2>${__("Add a new tab","groundhogg")}</h2>
				<div class="align-left-space-between">
					${input({id:"tab-name",placeholder:__("Tab name","groundhogg")})}
					<button id="create-tab" class="gh-button primary">
						${__("Create")}
					</button>
				</div>
			</div>`,onOpen:({close:close})=>{let tabName;$("#tab-name").on("change input",e=>{tabName=e.target.value}).focus();$("#create-tab").on("click",()=>{let id=uuid();tabState.tabs.push({id:id,name:tabName});activeTab=id;updateTabState();mount();close()})}})});tooltip("#add-tab",{content:__("Add tab","groundhogg"),position:"right"});mount()};const manageTags=()=>{let isAdding=false;let removeTags=[];let addTags=[];const template=()=>{return`
		  <div class="gh-tags" style="margin-bottom: 10px">
			  ${getContact().tags.map(tag=>`<span class="gh-tag${removeTags.includes(tag.ID)?" remove":""}">${tag.data.tag_name} <span data-id="${tag.ID}" class="remove-tag dashicons dashicons-no-alt"></span></span>`).join("")}
			  ${addTags.map(id=>TagsStore.get(id)).map(tag=>`<span class="gh-tag adding">${tag.data.tag_name} <span data-id="${tag.ID}" class="remove-adding-tag dashicons dashicons-no-alt"></span></span>`).join("")}
			  <${isAdding?"div":"button"} class="add-tag">
				  <span class="dashicons dashicons-plus-alt2"></span>
			  </${isAdding?"div":"button"}>
		  </div>
		  ${removeTags.length||addTags.length?`<div class="align-right-space-between"><button id="cancel-tag-changes" class="gh-button danger text">${__("Cancel")}</button><button id="save-tag-changes" class="gh-button primary">${__("Save")}</button></div>`:""}`};const mount=()=>{$("#tags-here").html(template());onMount()};const onMount=()=>{tooltip(".add-tag",{content:__("Add a tag","groundhogg")});$(".gh-tag .remove-tag").on("click",e=>{let tagId=parseInt(e.currentTarget.dataset.id);if(removeTags.includes(tagId)){removeTags.splice(removeTags.indexOf(tagId),1)}else{removeTags.push(tagId)}mount()});$(".gh-tag .remove-adding-tag").on("click",e=>{let tagId=parseInt(e.currentTarget.dataset.id);if(addTags.includes(tagId)){addTags.splice(addTags.indexOf(tagId),1)}mount()});$("#save-tag-changes").on("click",()=>{ContactsStore.patch(getContact().ID,{remove_tags:removeTags,add_tags:addTags}).then(()=>{addTags=[];removeTags=[];isAdding=false;mount()})});$("#cancel-tag-changes").on("click",()=>{addTags=[];removeTags=[];isAdding=false;mount()});$(".add-tag").on("click",e=>{isAdding=true;mount()});if(isAdding){let timeout;let widget=searchOptionsWidget({selector:".add-tag",noOptions:__("No tags found...","groundhogg"),options:TagsStore.items.filter(t=>!getContact().tags.map(_t=>_t.ID).includes(t.ID)),filterOption:({data:data},search)=>data.tag_name.match(regexp(search)),renderOption:({data:data})=>data.tag_name,onClose:()=>{isAdding=false;mount()},onInput:(search,widget)=>{if(timeout){clearTimeout(timeout)}timeout=setTimeout(()=>{TagsStore.fetchItems({search:search}).then(()=>{widget.options=TagsStore.items.filter(t=>!getContact().tags.map(_t=>_t.ID).includes(t.ID));widget.mountOptions()})},1500)},onSelect:({ID:ID})=>{addTags.push(ID)},onOpen:()=>{}});widget.mount()}};TagsStore.itemsFetched(getContact().tags);TagsStore.fetchItems();mount()};$.extend(editor,{init:function(){contactMoreActions();manageTags();manageMeta();managePrimaryTabs();otherContactStuff();$("#send-email").on("click",e=>{e.preventDefault();sendEmail()});if(window.location.href.match(/send_email=true/)){sendEmail()}$(".create-user-account").click(function(){$("#create-user-form").submit()})}});$(function(){editor.init()})})(jQuery,ContactEditor);