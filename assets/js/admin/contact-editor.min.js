(($,editor)=>{const{contact:contact,meta_exclusions:meta_exclusions}=editor;const{gh_contact_custom_properties:gh_contact_custom_properties}=Groundhogg.filters;const{tooltip:tooltip,regexp:regexp,inputRepeaterWidget:inputRepeaterWidget,el:el,searchOptionsWidget:searchOptionsWidget,input:input,select:select,isNumeric:isNumeric,textarea:textarea,icons:icons,bold:bold,loadingModal:loadingModal,modal:modal,uuid:uuid,dangerConfirmationModal:dangerConfirmationModal,confirmationModal:confirmationModal,adminPageUrl:adminPageUrl,moreMenu:moreMenu,loadingDots:loadingDots,spinner:spinner,dialog:dialog}=Groundhogg.element;const{currentUser:currentUser,filters:filters,propertiesEditor:propertiesEditor,isWPFusionActive:isWPFusionActive}=Groundhogg;const{userHasCap:userHasCap}=Groundhogg.user;const{events:EventsStore,event_queue:EventQueue,tags:TagsStore,contacts:ContactsStore,emails:EmailsStore,activity:ActivityStore,funnels:FunnelsStore,broadcasts:BroadcastsStore,page_visits:PageVisitsStore,submissions:SubmissionsStore}=Groundhogg.stores;const{post:post,delete:_delete,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{selectContactModal:selectContactModal}=Groundhogg.components;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;ContactsStore.itemsFetched([contact]);let files=[];const getContact=()=>{return ContactsStore.get(contact.ID)};const sanitizeKey=label=>{return label.toLowerCase().replace(/[^a-z0-9]/g,"_")};const sendEmail=()=>{let contact=getContact();let email={to:[contact.data.email],from_email:currentUser.data.user_email,from_name:currentUser.data.display_name};if(contact.data.owner_id&&currentUser.ID!=contact.data.owner_id){email.cc=[filters.owners.find(u=>u.ID==contact.data.owner_id).data.user_email]}Groundhogg.components.emailModal(email)};const contactMoreActions=()=>{let actions=`
    <button id="action-send-email" class="gh-button secondary text icon">${icons.email}</button>
				${getContact().meta.primary_phone?`<a id="call-primary" class="gh-button secondary text icon" href="tel:${getContact().meta.primary_phone}">${icons.phone}</a>`:""}
				${getContact().meta.mobile_phone?`<a id="call-mobile" class="gh-button secondary text icon" href="tel:${getContact().meta.mobile_phone}">${icons.smartphone}</a>`:""}
				<button id="add-to-funnel" class="gh-button secondary text icon">${icons.funnel}</button>
				<button id="contact-more" class="gh-button secondary text icon">${icons.verticalDots}</button>`;$("#contact-more-actions").html(actions);tooltip("#action-send-email",{content:__("Send Email","groundhogg")});tooltip("#call-primary",{content:__("Call","groundhogg")});tooltip("#call-mobile",{content:__("Call Mobile","groundhogg")});tooltip("#contact-more",{content:__("More Actions","groundhogg")});tooltip("#add-to-funnel",{content:__("Add to Funnel","groundhogg")});$("#add-to-funnel").on("click",e=>{modal({content:``,onOpen:({close:close,setContent:setContent})=>{let funnel,step;const addToFunnelUi=()=>{return`
				<div>
					<h2>${sprintf(__("Add %s to a funnel","groundhogg"),getContact().data.full_name)}</h2>
					<div class="gh-rows-and-columns">
						<div class="gh-row">
							<div class="gh-col">
								${select({id:"select-funnel"})}
							</div>
						</div>
						<div class="gh-row">
							<div class="gh-col">
								${funnel?select({id:"select-step"}):""}
							</div>
						</div>
						<div class="gh-row">
							<div class="gh-col">
								${funnel&&step?`<button id="confirm-add-to-funnel" class="gh-button primary">${__("Add to funnel")}</button>`:""}
							</div>
						</div>
					</div>
				</div>`};setContent(addToFunnelUi());const onMount=()=>{$("#select-funnel").ghPicker({endpoint:FunnelsStore.route,getParams:q=>{return{...q,status:"active"}},data:FunnelsStore.getItems().map(f=>({id:f.ID,text:f.data.title,selected:funnel&&f.ID===funnel.ID})),getResults:({items:items})=>{FunnelsStore.itemsFetched(items);return items.map(f=>({id:f.ID,text:f.data.title}))},placeholder:__("Select a funnel...","groundhogg")}).on("change",({target:target})=>{funnel=FunnelsStore.get(parseInt($(target).val()));step=funnel.steps.find(s=>s.data.step_order==1);setContent(addToFunnelUi());onMount()});if(funnel){$("#select-step").select2({placeholder:__("Select a step...","groundhogg"),data:funnel.steps.sort((a,b)=>a.data.step_order-b.data.step_order).map(s=>({id:s.ID,text:`${s.data.step_title} (${Groundhogg.rawStepTypes[s.data.step_type].name})`,selected:s.ID==step.ID}))}).on("change",({target:target})=>{step=funnel.steps.find(s=>s.ID===parseInt($(target).val()));setContent(addToFunnelUi());onMount()})}if(funnel&&step){$("#confirm-add-to-funnel").on("click",e=>{FunnelsStore.addContacts({funnel_id:funnel.ID,step_id:step.ID,query:{include:[getContact().ID]}}).then(()=>{dialog({message:sprintf(__("%s added to funnel!","groundhogg"),getContact().data.full_name)});close()})})}};onMount()}})});$("#contact-more").on("click",e=>moreMenu(e.target,{items:[{key:"merge",cap:"delete_contacts",text:__("Merge")},{key:"delete",cap:"delete_contacts",text:`<span class="gh-text danger">${__("Delete")}</span>`}],onSelect:k=>{switch(k){case"merge":selectContactModal({exclude:[contact.ID],onSelect:_contact=>{confirmationModal({confirmText:__("Merge"),width:500,alert:`<p>
					  ${sprintf(__("Are you sure you want to merge %1$s with %2$s? This action cannot be undone.","groundhogg"),bold(_contact.data.full_name),bold(getContact().data.full_name))}</p>
				  <p><a href="https://help.groundhogg.io/article/540-merging-contacts"
				        target="_blank">${__("What happens when contacts are merged?","groundhogg")}</a></p>`,onConfirm:()=>{loadingModal();post(`${ContactsStore.route}/${contact.ID}/megrge`,[_contact.ID]).then(()=>{location.reload()})}})}});break;case"delete":dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(__("Are you sure you want to delete %s?","groundhogg"),bold(getContact().data.full_name))}</p>`,onConfirm:()=>{ContactsStore.delete(contact.ID).then(()=>{dialog({message:sprintf(__("%s was deleted!","groundhogg"),contact.data.full_name)});window.location.href=adminPageUrl("gh_contacts")})}})}}}));$("#action-send-email").on("click",sendEmail)};const ActivityTimeline={addType:(type,opts)=>{this.types[type]={icon:"",render:()=>"",preload:()=>{},...opts}},types:{wp_fusion:{icon:icons.wp_fusion,render:({data:data,meta:meta})=>{const{event_name:event_name,event_value:event_value}=meta;return`${event_name}: <code>${event_value}</code>`},preload:()=>{}},wp_login:{icon:icons.login,render:({email:email})=>{return __("Logged in","groundhogg")},preload:()=>{}},wp_logout:{icon:icons.logout,render:({email:email})=>{return __("Logged out","groundhogg")},preload:()=>{}},email_opened:{icon:icons.open_email,render:({email:email})=>{return sprintf(__("Opened %s","groundhogg"),bold(email.data.title))},preload:({email:email})=>{EmailsStore.itemsFetched([email])}},email_link_click:{icon:icons.link_click,render:({email:email,data:data})=>{return sprintf(__("Clicked %s in %s","groundhogg"),el("a",{target:"_blank",href:data.referer},bold(data.referer)),bold(email.data.title))},preload:({email:email})=>{EmailsStore.itemsFetched([email])}}},renderActivity:function(activity){if(activity.type==="submission"){let funnel=FunnelsStore.get(activity.form.data.funnel_id);return`
			<li class="activity-item">
				<div class="activity-icon submission">${icons.form}</div>
				<div class="activity-rendered gh-panel">
					<div class="activity-info">
						${sprintf(__("Submitted form %s in funnel %s","groundhogg"),bold(activity.form.data.step_title),el("a",{href:funnel.admin,target:"_blank"},bold(funnel.data.title)))}
						<p>
							${textarea({className:"full-width code",value:JSON.stringify(activity.meta,null,2),readonly:true})}
						</p>
					</div>
					<div class="diff-time">
						${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}
					</div>
				</div>
			</li>`}if(activity.type==="page_visit"){return`
			<li class="activity-item">
				<div class="activity-icon page-visit">${icons.link_click}</div>
				<div class="activity-rendered gh-panel">
					<div class="activity-info">
						${sprintf(__("Visited %s","groundhogg"),`<a href="${activity.data.path}" target="_blank">${bold(activity.data.path)}</a>`)}
					</div>
					<div class="diff-time">
						${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}
					</div>
				</div>
			</li>`}if(activity.type==="event"){let{step:step,pending:pending=false}=activity;switch(parseInt(activity.data.event_type)){case 1:let funnel=FunnelsStore.get(step.data.funnel_id);return`
				<li class="activity-item">
					<div class="activity-icon ${step.data.step_group}">${icons.funnel}</div>
					<div class="activity-rendered gh-panel space-between">
						<div>
							<div class="activity-info">
								<span>${sprintf(step.data.step_group==="action"?pending?__("Pending action: %s | %s","groundhogg"):__("Completed action: %s | %s","groundhogg"):pending?__("Pending benchmark: %s | %s","groundhogg"):__("Completed benchmark: %s | %s","groundhogg"),bold(step.data.step_title),Groundhogg.rawStepTypes[step.data.step_type].name)}</span>
							</div>
							<div class="event-extra">
								${sprintf(__("in funnel %s","groundhogg"),el("a",{href:funnel.admin},funnel.data.title))}
							</div>
							<div class="diff-time">
								${sprintf(pending?Math.floor(Date.now()/1e3)>activity.time?__("Running now...","groundhogg"):__("Runs in %s","groundhogg"):__("%s ago","groundhogg"),activity.locale.diff_time)}
							</div>
						</div>
						<button class="gh-button secondary icon text event-${pending?"queue-":""}more"
						        data-event="${activity.ID}">
							${icons.verticalDots}
						</button>
					</div>
				</li>`;case 2:return`
				<li class="activity-item">
					<div class="activity-icon broadcast">${icons.megaphone}</div>
					<div class="activity-rendered gh-panel space-between">
						<div>
							<div class="activity-info">
								<span>${sprintf(pending?__("Will receive broadcast: %s","groundhogg"):__("Received broadcast: %s","groundhogg"),bold(activity.broadcast.object.data.title))}</span>
							</div>
							<div class="diff-time">
								${sprintf(pending?Math.floor(Date.now()/1e3)>activity.time?__("Running now...","groundhogg"):__("Runs in %s","groundhogg"):__("%s ago","groundhogg"),activity.locale.diff_time)}
							</div>
						</div>
						<button class="gh-button secondary icon text event-${pending?"queue-":""}more"
						        data-event="${activity.ID}">
							${icons.verticalDots}
						</button>
					</div>
				</li>`}return""}const type=this.types[activity.data.activity_type];return`
		  <li class="activity-item ${activity.data.activity_type} activity" tabindex="0">
			  <div class="activity-icon ${activity.data.activity_type}">${type.icon}</div>
			  <div class="activity-rendered gh-panel">
				  <div class="activity-info">
					  ${type.render(activity)}
				  </div>
				  <div class="diff-time">
					  ${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}
				  </div>
			  </div>
		  </li>`},render:function(activities){return`
		  <ul id="activity-timeline">
			  ${activities.map(a=>this.renderActivity(a)).join("")}
		  </ul>`},onMount:function(){$(".event-queue-more").on("click",e=>{let eventId=e.currentTarget.dataset.event;const event=EventQueue.get(eventId);moreMenu(e.currentTarget,{items:[{key:"execute",text:__("Run Now")},{key:"cancel",text:`<span class="gh-text danger">${__("Cancel")}</span>`}],onSelect:key=>{switch(key){case"cancel":patch(`${EventQueue.route}/${event.ID}/cancel`).then(()=>{EventQueue.items.splice(EventQueue.items.findIndex(e=>e.ID===event.ID),1);dialog({message:__("Event cancelled","groundhogg")});this.needsRefresh()});break;case"execute":patch(`${EventQueue.route}/${event.ID}/execute`).then(()=>{dialog({message:__("Event rescheduled","groundhogg")});this.needsRefresh()});break}}})});$(".event-more").on("click",e=>{let eventId=e.currentTarget.dataset.event;const event=EventsStore.get(eventId);moreMenu(e.currentTarget,{items:[{key:"execute",text:__("Run Again")}],onSelect:key=>{switch(key){case"execute":patch(`${EventsStore.route}/${event.ID}/execute`).then(()=>{dialog({message:__("Event rescheduled","groundhogg")});this.needsRefresh()});break}}})})},mount:function(selector,activities,{needsRefresh:needsRefresh=()=>{}}){this.needsRefresh=needsRefresh;const $el=$(selector);activities=activities.filter(a=>["event","page_visit","submission"].includes(a.type)||a.data.activity_type in this.types);if(!activities.length){$el.html(`<div class="align-center-space-between" style="margin: 20px"><span class="pill orange">${__("No activity found.","groundhogg")}</span></div>`);return}let funnelIds=activities.filter(a=>a.type==="event"&&a.data.event_type==1).reduce((arr,e)=>{if(!arr.includes(e.data.funnel_id)){arr.push(e.data.funnel_id)}return arr},[]);let promises=[...activities.filter(a=>a.type==="activity").map(a=>this.types[a.data.activity_type].preload(a)),!FunnelsStore.hasItems(funnelIds)?FunnelsStore.fetchItems({ID:funnelIds}):null,...activities.filter(a=>a.type==="event"&&a.data.event_type==2).map(a=>BroadcastsStore.itemsFetched([a.broadcast])),FunnelsStore.fetchItems({include:activities.filter(a=>a.type==="submission").map(a=>a.form.data.funnel_id)})];Promise.all(promises).then(()=>{$el.html(this.render(activities));this.onMount()})}};const otherContactStuff=()=>{let activeTab="activity";const tabs=[{id:"activity",name:__("Activity"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div class="inside">
					  <div class="align-left-space-between">
						  <div class="order-by">
							  <label for="activity-order"><b>${__("Order by")}</b></label><br/>
							  ${select({id:"activity-order",name:"order"},{desc:__("Newest first"),asc:__("Oldest first")},"desc")}
						  </div>
						  <div class="filter-by">
							  <label for="filter-by"><b>${__("Filter by")}</b></label><br/>
							  ${select({id:"filter-by",name:"filter"},{all:__("All Activity","groundhogg"),funnel:__("Funnel Activity","groundhogg"),email:__("Email Activity","groundhogg"),web:__("Web Activity","groundhogg"),...isWPFusionActive?{wp_fusion:__("WPFusion Activity","groundhogg")}:{}},"")}
						  </div>
						  <div class="filter-by hidden">
							  <label>${__("Date Range")}</label><br/>
							  <div class="gh-input-group">
								  ${input({type:"date",className:"small"})}
								  ${input({type:"date",className:"small"})}
							  </div>
						  </div>
					  </div>
				  </div>
			  </div>
			  <div id="activity-here">
				  ${spinner()}
			  </div>`},onMount:()=>{let order="desc";let filter="all";$("#activity-order").on("change",e=>{order=e.target.value;fetchActivity()});$("#filter-by").on("change",e=>{filter=e.target.value;loadTimeline()});const fetchActivity=()=>{Promise.all([SubmissionsStore.fetchItems({contact_id:contact.ID,limit:50,order:order,orderby:"date_created"}),ActivityStore.fetchItems({contact_id:contact.ID,limit:50,order:order,orderby:"timestamp"}),EventsStore.fetchItems({contact_id:contact.ID,status:"complete",limit:50,orderby:"time",order:order}),EventQueue.fetchItems({contact_id:contact.ID,status:"waiting",limit:50,orderby:"time",order:order}),PageVisitsStore.fetchItems({contact_id:contact.ID,limit:50,orderby:"timestamp",order:order})]).then(()=>{loadTimeline()})};const loadTimeline=()=>{let allActivities=[...SubmissionsStore.getItems().map(a=>({...a,type:"submission",time:parseInt(a.data.time)})),...ActivityStore.getItems().map(a=>({...a,type:"activity",time:parseInt(a.data.timestamp)})),...EventsStore.getItems().map(e=>({...e,type:"event",time:parseInt(e.data.time)+parseFloat(e.data.micro_time)})),...EventQueue.getItems().map(e=>({...e,type:"event",pending:true,time:parseInt(e.data.time)+parseFloat(e.data.micro_time)})),...PageVisitsStore.getItems().map(v=>({...v,type:"page_visit",time:parseInt(v.data.timestamp)}))].sort((a,b)=>order==="desc"?b.time-a.time:a.time-b.time);switch(filter){case"submissions":allActivities=allActivities.filter(a=>a.type==="submission");break;case"funnel":allActivities=allActivities.filter(a=>a.type==="event"&&a.data.event_type==1);break;case"email":allActivities=allActivities.filter(a=>a.data.email_id>0);break;case"web":allActivities=allActivities.filter(a=>a.type==="page_visit");break;case"wp_fusion":allActivities=allActivities.filter(a=>a.type==="activity"&&a.data.activity_type==="wp_fusion");break}ActivityTimeline.mount("#activity-here",allActivities,{needsRefresh:()=>{fetchActivity()}});$("#activity-here").css({maxHeight:$("#primary-contact-stuff").height()})};if(ActivityStore.hasItems()||EventsStore.hasItems()||EventQueue.hasItems()||PageVisitsStore.hasItems()||SubmissionsStore.hasItems()){loadTimeline();return}fetchActivity()}},{id:"notes",name:__("Notes"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div class="inside" id="notes-here"></div>
			  </div>`},onMount:()=>{Groundhogg.noteEditor("#notes-here",{object_id:contact.ID,object_type:"contact",title:""})}},{id:"files",name:__("Files"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div id="file-actions" class="inside space-between">
					  ${input({placeholder:__("Search files..."),type:"search",id:"search-files"})}
					  <button id="upload-file" class="gh-button secondary">${__("Upload Files")}</button>
				  </div>
				  <div id="bulk-actions" class="hidden inside" style="padding-top: 0">
					  <button id="bulk-delete-files" class="gh-button danger icon"><span
						  class="dashicons dashicons-trash"></span></button>
				  </div>
				  <table class="wp-list-table widefat striped" style="border: none">
					  <thead></thead>
					  <tbody id="files-here">
					  </tbody>
				  </table>
			  </div>`},onMount:()=>{let selectedFiles=[];let fileSearch="";$("#bulk-delete-files").on("click",()=>{dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(_n("Are you sure you want to delete %d file?","Are you sure you want to delete %d files?",selectedFiles.length,"groundhogg"),selectedFiles.length)}</p>`,onConfirm:()=>{_delete(`${routes.v4.contacts}/${contact.ID}/files`,selectedFiles).then(({items:items})=>{selectedFiles=[];files=items;mount()})}})});$("#search-files").on("input change",e=>{fileSearch=e.target.value;mount()});tooltip("#bulk-delete-files",{content:__("Bulk delete files"),position:"right"});const renderFile=file=>{return`
				<tr class="file">
					<th scope="row" class="check-column">${input({type:"checkbox",name:"select[]",className:"file-toggle",value:file.name})}
					</th>
					<td class="column-primary"><a class="row-title" href="${file.url}"
					                              target="_blank">${file.name}</a></td>
					<td>${file.date_modified}</td>
					<td>
						<div class="space-between align-right">
							<button data-file="${file.name}" class="file-more gh-button secondary text icon">
								${icons.verticalDots}
							</button>
						</div>
					</td>
				</tr>`};const mount=()=>{$("#files-here").html(files.filter(f=>!fileSearch||f.name.match(regexp(fileSearch))).map(f=>renderFile(f)).join(""));onMount()};const onMount=()=>{const maybeShowBulkActions=()=>{if(selectedFiles.length){$("#bulk-actions").removeClass("hidden")}else{$("#bulk-actions").addClass("hidden")}};$(".file-more").on("click",e=>{let _file=e.currentTarget.dataset.file;moreMenu(e.currentTarget,{items:[{key:"download",text:__("Download")},{key:"delete",text:`<span class="gh-text danger">${__("Delete")}</span>`}],onSelect:k=>{switch(k){case"download":window.open(files.find(f=>f.name===_file).url,"_blank").focus();break;case"delete":dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(__("Are you sure you want to delete %s?","groundhogg"),_file)}</p>`,onConfirm:()=>{_delete(`${routes.v4.contacts}/${contact.ID}/files`,[_file]).then(({items:items})=>{selectedFiles=[];files=items;mount()})}});break}}})});$(".file-toggle").on("change",e=>{if(e.target.checked){selectedFiles.push(e.target.value)}else{selectedFiles.splice(selectedFiles.indexOf(e.target.value),1)}maybeShowBulkActions()})};$("#upload-file").on("click",e=>{e.preventDefault();Groundhogg.components.fileUploader({action:"groundhogg_contact_upload_file",nonce:"",beforeUpload:fd=>fd.append("contact",contact.ID),onUpload:(json,file)=>{files=json.data.files;mount()}})});if(!files.length){ContactsStore.fetchFiles(contact.ID).then(_files=>{files=_files;mount()})}mount()}},{id:"inbox",name:__("Inbox"),render:()=>{return`
			  <div class="gh-panel top-left-square">
				  <div class="inside" id="inbox-here">
					  <p>
						  ${sprintf(__("Hi %s, we're still working on the inbox feature! We know how important this is for you, so our team is working around the clock to make it a reality!","groundhogg"),Groundhogg.currentUser.data.display_name)}</p>
					  <p>
						  ${__('You can help us get there faster by giving us a <a target="_blank" href="https://wordpress.org/support/plugin/groundhogg/reviews/?filter=5">⭐⭐⭐⭐⭐ review!</a>')}</p>
				  </div>
			  </div>`},onMount:()=>{}}];if(Groundhogg.isWhiteLabeled){tabs.splice(tabs.findIndex(t=>t.id==="inbox"),1)}const template=()=>{return`
		  <div id="secondary-tabs"><h2 class="nav-tab-wrapper secondary gh">
			  ${tabs.map(({id:id,name:name})=>`<a href="#" data-tab="${id}" class="nav-tab ${activeTab===id?"nav-tab-active":""}">${name}</a>`).join("")}
		  </h2>
			  ${tabs.find(t=>t.id===activeTab).render()}
		  </div>`};const mount=()=>{$("#other-contact-stuff").html(template());onMount()};const onMount=()=>{tabs.find(t=>t.id===activeTab).onMount();$(".nav-tab-wrapper.secondary .nav-tab").on("click",e=>{activeTab=e.target.dataset.tab;mount()})};mount()};const handleFormSubmit=()=>{$("#primary-form").on("submit",e=>{e.preventDefault();const $btn=$("#save-primary");let{stop:stop}=loadingDots("#save-primary");$btn.prop("disabled",true);let data=new FormData(e.currentTarget);data.append("action","groundhogg_edit_contact");data.append("contact",getContact().ID);ajax(data).then(r=>{ContactsStore.itemsFetched([r.data.contact]);$btn.prop("disabled",false);stop();dialog({message:__("Changes saved!")})})})};const managePrimaryTabs=()=>{let activeTab="general";let customTabState=gh_contact_custom_properties||{tabs:[],groups:[],fields:[]};let timeout;let metaChanges={};let deleteKeys=[];const commitMetaChanges=()=>{let{stop:stop}=loadingDots("#save-meta");$("#save-meta").prop("disabled",true);Promise.all([ContactsStore.patchMeta(getContact().ID,metaChanges),ContactsStore.deleteMeta(getContact().ID,deleteKeys)]).then(()=>{metaChanges={};deleteKeys=[];stop();mount();dialog({message:__("Changes saved!")})})};const cancelMetaChanges=()=>{metaChanges={};deleteKeys=[];mount()};const updateTabState=()=>{if(timeout){clearTimeout(timeout)}timeout=setTimeout(()=>{patch(routes.v4.options,{gh_contact_custom_properties:customTabState}).then(()=>{dialog({message:__("Changes saved!","groundhogg")})})},1500)};$(document).on("click",".nav-tab-wrapper.primary a.nav-tab",e=>{e.preventDefault();let $tab=$(e.target);$(".nav-tab-wrapper.primary .nav-tab").removeClass("nav-tab-active");$tab.addClass("nav-tab-active");activeTab=e.target.id;mount()});const mount=()=>{$("#primary-contact-stuff .edit-meta").remove();$("#primary-contact-stuff .custom-tab").remove();$("#primary-contact-stuff .tab-more").remove();$(`<a href="#" id="edit-meta" class="nav-tab edit-meta ${"edit-meta"===activeTab?" nav-tab-active":""}">${__("More","groundhogg")}</a>`).insertAfter("#general");$(customTabState.tabs.map(({id:id,name:name})=>`<a href="#" id="${id}" class="nav-tab custom-tab${id===activeTab?" nav-tab-active":""}">${name}</a>`).join("")).insertBefore("#tab-actions");onMount()};const onMount=()=>{$("#primary-contact-stuff .tab-content-wrapper").removeClass("active");$(`#primary-contact-stuff [data-tab-content="${activeTab}"]`).addClass("active");if(customTabState.tabs.find(t=>t.id===activeTab)){let customTabUi=`
			<div class="tab-content-wrapper custom-tab gh-panel top-left-square active" data-tab-content="${activeTab}">
				<div class="inside">
					<div id="custom-fields-here">
					</div>
					<p>
						<button id="save-meta" class="gh-button primary">${__("Save Changes")}</button>
						<button id="cancel-meta-changes" class="gh-button danger text">${__("Cancel")}</button>
					</p>
				</div>
			</div>`;$(customTabUi).insertAfter("#primary-contact-stuff form");$(`<button class="gh-button tab-more secondary text icon">${icons.verticalDots}</button>`).insertAfter("#add-tab");$("#save-meta").on("click",commitMetaChanges);$("#cancel-meta-changes").on("click",cancelMetaChanges);$(".tab-more").on("click",e=>{e.preventDefault();moreMenu(e.currentTarget,{items:[{key:"rename",cap:"manage_options",text:__("Rename")},{key:"delete",cap:"manage_options",text:`<span class="gh-text danger">${__("Delete")}</span>`}],onSelect:k=>{switch(k){case"delete":dangerConfirmationModal({confirmText:__("Delete"),alert:`<p>${sprintf(__("Are you sure you want to delete %s?","groundhogg"),bold(customTabState.tabs.find(t=>t.id===activeTab).name))}</p>`,onConfirm:()=>{let groups=customTabState.groups.filter(g=>g.tab===activeTab);let fields=customTabState.fields.filter(f=>groups.find(g=>g.id===f.group)).map(f=>f.id);customTabState.tabs=customTabState.tabs.filter(t=>t.id!==activeTab);customTabState.groups=customTabState.groups.filter(g=>g.tab!==activeTab);customTabState.fields=customTabState.fields.filter(f=>!fields.includes(f.id));updateTabState();activeTab="general";mount()}});break;case"rename":modal({content:`
						<div>
							<h2>${__("Rename tab","groundhogg")}</h2>
							<div class="align-left-space-between">
								${input({id:"tab-name",value:customTabState.tabs.find(t=>t.id===activeTab).name,placeholder:__("Tab name","groundhogg")})}
								<button id="update-tab" class="gh-button primary">
									${__("Save")}
								</button>
							</div>
						</div>`,onOpen:({close:close})=>{let tabName;$("#tab-name").on("change input",e=>{tabName=e.target.value}).focus();$("#update-tab").on("click",()=>{customTabState.tabs.find(t=>t.id===activeTab).name=tabName;updateTabState();mount();close()})}});break}}})});let groups=customTabState.groups.filter(g=>g.tab===activeTab);let fields=customTabState.fields.filter(f=>groups.find(g=>g.id===f.group));propertiesEditor("#custom-fields-here",{values:{...getContact().meta,...metaChanges},properties:{groups:groups,fields:fields},onPropertiesUpdated:({groups:groups=[],fields:fields=[]})=>{customTabState.groups=[...groups.map(g=>({...g,tab:activeTab})),...customTabState.groups.filter(group=>!groups.find(_group=>_group.id==group.id))];customTabState.fields=[...fields,...customTabState.fields.filter(field=>!fields.find(_field=>_field.id==field.id))];updateTabState()},onChange:meta=>{metaChanges={...metaChanges,...meta}},canEdit:()=>{return userHasCap("edit_contacts")}})}else if(activeTab==="edit-meta"){let metaUi=`
			<div class="tab-content-wrapper edit-meta gh-panel top-left-square active" data-tab-content="${activeTab}">
				<div class="inside">
					<h2>${__("Additional Contact Methods","groundhogg")}</h2>
					<p><b>${__("Email Addresses","groundhogg")}</b></p>
					<div id="contact-emails-here"></div>
					<p><b>${__("Phone Numbers","groundhogg")}</b></p>
					<div id="contact-phones-here"></div>
					<h2>${__("Meta")}</h2>
					<div id="meta-here">
					</div>
					<p>
						<button id="save-meta" class="gh-button primary">${__("Save Changes")}</button>
						<button id="cancel-meta-changes" class="gh-button danger text">${__("Cancel")}</button>
					</p>
				</div>
			</div>`;$(metaUi).insertAfter("#primary-contact-stuff form");$("#cancel-meta-changes").on("click",cancelMetaChanges);let combinedMeta={...getContact().meta,...metaChanges};let{alternate_emails:alternate_emails=[],alternate_phones:alternate_phones=[]}=getContact().meta;inputRepeaterWidget({selector:"#contact-phones-here",rows:alternate_phones,cellProps:[{type:"email",options:{mobile:__("Mobile"),home:__("Home"),business:__("Business")}},{type:"tel",placeholder:__("(123) 456-7890")}],cellCallbacks:[select,input],onMount:()=>{},onChange:rows=>{metaChanges.alternate_phones=rows}}).mount();inputRepeaterWidget({selector:"#contact-emails-here",rows:alternate_emails.map(e=>[e]),cellProps:[{type:"email",className:"alternate-email-address",placeholder:__("john.doe@example.com","groundhogg")}],cellCallbacks:[input],onMount:()=>{},onChange:rows=>{metaChanges.alternate_emails=rows.map(r=>r[0])}}).mount();inputRepeaterWidget({selector:"#meta-here",rows:Object.keys(combinedMeta).filter(k=>!meta_exclusions.includes(k)).map(k=>[k,combinedMeta[k]]).map(([k,v])=>[k,["array","object"].includes(typeof v)?"SERIALIZED DATA":v]),cellProps:[{className:"meta-key",readonly:true},{}],cellCallbacks:[input,input],onMount:()=>{$(`[value="SERIALIZED DATA"]`).prop("readonly",true);$(".meta-key").each((i,el)=>{let $el=$(el);if(!$el.val()){$el.prop("readonly",false)}}).on("input",e=>{let key=sanitizeKey(e.target.value);$(e.target).val(key)})},onChange:rows=>{rows.forEach(([key,value])=>{if(!key){return}metaChanges[key]=value})},onRemove:([key,value])=>{if(!key){return}deleteKeys.push(key);delete metaChanges[key]}}).mount();$("#save-meta").on("click",commitMetaChanges)}};$(".nav-tab-wrapper.primary").append(`<div id="tab-actions" class="space-between"><button type="button" id="add-tab"><span class="dashicons dashicons-plus-alt2"></span></button></div>`);$("#add-tab").on("click",e=>{e.preventDefault();modal({content:`
			<div>
				<h2>${__("Add a new tab","groundhogg")}</h2>
				<div class="align-left-space-between">
					${input({id:"tab-name",placeholder:__("Tab name","groundhogg")})}
					<button id="create-tab" class="gh-button primary">
						${__("Create")}
					</button>
				</div>
			</div>`,onOpen:({close:close})=>{let tabName;$("#tab-name").on("change input",e=>{tabName=e.target.value}).focus();$("#create-tab").on("click",()=>{let id=uuid();customTabState.tabs.push({id:id,name:tabName});activeTab=id;updateTabState();mount();close()})}})});tooltip("#add-tab",{content:__("Add tab","groundhogg"),position:"right"});mount()};const manageTags=()=>{let isAdding=false;let removeTags=[];let addTags=[];const template=()=>{return`
		  <div class="gh-tags" style="margin-bottom: 10px">
			  ${getContact().tags.map(tag=>`<span class="gh-tag${removeTags.includes(tag.ID)?" remove":""}">${tag.data.tag_name} <span data-id="${tag.ID}" class="remove-tag dashicons dashicons-no-alt"></span></span>`).join("")}
			  ${addTags.map(id=>TagsStore.get(id)).map(tag=>`<span class="gh-tag adding">${tag.data.tag_name} <span data-id="${tag.ID}" class="remove-adding-tag dashicons dashicons-no-alt"></span></span>`).join("")}
			  <${isAdding?"div":"button"} class="add-tag">
				  <span class="dashicons dashicons-plus-alt2"></span>
			  </${isAdding?"div":"button"}>
		  </div>
		  ${removeTags.length||addTags.length?`<div class="align-right-space-between"><button id="cancel-tag-changes" class="gh-button danger text">${__("Cancel")}</button><button id="save-tag-changes" class="gh-button primary">${__("Save")}</button></div>`:""}`};const mount=()=>{$("#tags-here").html(template());onMount()};const onMount=()=>{tooltip(".add-tag",{content:__("Add a tag","groundhogg")});$(".gh-tag .remove-tag").on("click",e=>{let tagId=parseInt(e.currentTarget.dataset.id);if(removeTags.includes(tagId)){removeTags.splice(removeTags.indexOf(tagId),1)}else{removeTags.push(tagId)}mount()});$(".gh-tag .remove-adding-tag").on("click",e=>{let tagId=parseInt(e.currentTarget.dataset.id);if(addTags.includes(tagId)){addTags.splice(addTags.indexOf(tagId),1)}mount()});$("#save-tag-changes").on("click",()=>{ContactsStore.patch(getContact().ID,{remove_tags:removeTags,add_tags:addTags}).then(()=>{dialog({message:__("Changes saved!")});addTags=[];removeTags=[];isAdding=false;mount()})});$("#cancel-tag-changes").on("click",()=>{addTags=[];removeTags=[];isAdding=false;mount()});$(".add-tag").on("click",e=>{isAdding=true;mount()});if(isAdding){let timeout;let widget=searchOptionsWidget({selector:".add-tag",noOptions:__("No tags found...","groundhogg"),options:TagsStore.items.filter(t=>!getContact().tags.map(_t=>_t.ID).includes(t.ID)&&!addTags.includes(t.ID)),filterOption:({data:data},search)=>data.tag_name.match(regexp(search)),filterOptions:(opts,search)=>{if(!search){return opts}return[{ID:search,data:{tag_name:`Add "${search}"`}},...opts]},renderOption:({data:data})=>data.tag_name,onClose:()=>{isAdding=false;mount()},onInput:(search,widget)=>{if(timeout){clearTimeout(timeout)}timeout=setTimeout(()=>{TagsStore.fetchItems({search:search}).then(()=>{widget.options=TagsStore.items.filter(t=>!getContact().tags.map(_t=>_t.ID).includes(t.ID));widget.mountOptions()})},1500)},onSelect:tag=>{let{ID:ID}=tag;if(!isNumeric(ID)){TagsStore.post({data:{tag_name:ID}}).then(t=>{addTags.push(t.ID);mount()});return}addTags.push(ID)},onOpen:()=>{}});widget.mount()}};TagsStore.itemsFetched(getContact().tags);TagsStore.fetchItems();mount()};$.extend(editor,{init:function(){handleFormSubmit();contactMoreActions();manageTags();managePrimaryTabs();otherContactStuff();$("#send-email").on("click",e=>{e.preventDefault();sendEmail()});if(window.location.href.match(/send_email=true/)){sendEmail()}$(".create-user-account").click(function(){$("#create-user-form").submit()})}});$(function(){editor.init()});Groundhogg.ActivityTimeline=ActivityTimeline})(jQuery,ContactEditor);