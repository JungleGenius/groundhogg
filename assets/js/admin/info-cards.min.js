(function($){const{uuid:uuid,icons:icons}=Groundhogg.element;const InfoCard=(id=uuid(),{title:title=(()=>{}),content:content=(()=>{}),onMount:onMount=(()=>{}),preload:preload=(()=>{}),priority:priority=10})=>({id:id,title:title,content:content,onMount:onMount,priority:priority,preload:preload,render(args){const{id:id,title:title,content:content}=this;const{isOpen:isOpen}=args;return`\n\t\t  <div id="${id}" class="gh-info-card ${isOpen?"open":"closed"}">\n\t\t\t  <div class="gh-info-card-header">\n\t\t\t\t  <button class="gh-info-card-toggle"></button>\n\t\t\t\t  <div class="gh-info-card-title">\n\t\t\t\t\t  ${title(args,this.state)}\n\t\t\t\t  </div>\n\t\t\t\t  <div class="align-right-space-between actions">\n              <div class="move">${icons.drag}</div>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div class="gh-info-card-content">\n\t\t\t\t  ${content(args)}\n\t\t\t  </div>\n\t\t  </div>`}});const InfoCardProvider=({cards:cards=[],order:order=[],openState:openState={},onUpdate:onUpdate=(({order:order,openState:openState})=>{console.log({order:order,openState:openState})})})=>({cards:cards,order:order,openState:openState,preload(args){const promises=[];this.cards.forEach((card=>{let p=card.preload(args);if(!p){return}if(Array.isArray(p)&&p.length>0){promises.push(...p)}else{promises.push(p)}}));return Promise.all(promises)},async mount(el,args){await this.preload(args);const $el=$(el);$el.addClass("gh-info-card-provider");$el.html(this.cards.sort(((a,b)=>a.priority-b.priority)).map((card=>card.render({isOpen:this.openState[card.id]||false,...args}))).join(""));$el.find(".gh-info-card-header").on("click",(e=>{let id=$(e.target).closest(".gh-info-card").attr("id");this.openState[id]=!this.openState[id];this.updated();this.mount()}));$el.sortable({handle:".gh-info-card-header .move",placeholder:"gh-info-card-provider",start:(e,ui)=>{ui.placeholder.height(ui.item.height());ui.placeholder.width(ui.item.width())},update:(e,ui)=>{this.updated()}});this.cards.forEach((card=>{card.onMount(args)}))},updated(){let cards=$(".gh-info-card");let order=cards.toArray().map((e=>e.id));let openState={};cards.each(((i,e)=>openState[e.id]=e.classList.contains("open")));onUpdate({order:order,openState:openState})},registerCard(id,card){this.cards.push(InfoCard(id,card))}});Groundhogg.utils={...Groundhogg.utils,InfoCard:InfoCard,InfoCardProvider:InfoCardProvider}})(jQuery);