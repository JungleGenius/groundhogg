($=>{const{propertiesEditor:propertiesEditor}=Groundhogg;const{createFilters:createFilters}=Groundhogg.filters.functions;const{input:input,progressModal:progressModal,select:select,confirmationModal:confirmationModal,dialog:dialog,bold:bold,adminPageURL:adminPageURL,loadingModal:loadingModal,inputRepeaterWidget:inputRepeaterWidget}=Groundhogg.element;const{betterTagPicker:betterTagPicker}=Groundhogg.components;const{post:post,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{searches:SearchesStore,contacts:ContactsStore,tags:TagsStore,funnels:FunnelsStore}=Groundhogg.stores;const{tagPicker:tagPicker,funnelPicker:funnelPicker}=Groundhogg.pickers;const{userHasCap:userHasCap}=Groundhogg.user;const{formatNumber:formatNumber,formatTime:formatTime,formatDate:formatDate,formatDateTime:formatDateTime}=Groundhogg.formatting;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;const fieldSection=({title:title="",fields:fields=""})=>`\n        <div class="gh-panel">\n            <div class="gh-panel-header">\n                <h2>${title}</h2>\n                <button type="button" class="toggle-indicator"\n                        aria-expanded="true"></button>\n            </div>\n            <div class="inside">\n                ${fields}\n            </div>\n        </div>`;let sections=[{title:__("General","groundhogg"),fields:`\n          <div class="gh-rows-and-columns">\n              <div class="gh-row">\n                  <div class="gh-col">\n                      <label for="email">${__("Optin Status","groundhogg")}</label>\n                      ${select({id:`optin-status`,name:"optin_status"},{0:__("No change","groundhogg"),...Groundhogg.filters.optin_status})}\n                  </div>\n                  <div class="gh-col">\n                      <label for="owner">${__("Owner","noun the contact owner","groundhogg")}</label>\n                      ${select({id:`owner`,name:"owner_id"},[{value:0,text:__("No change","groundhogg")},...Groundhogg.filters.owners.map((u=>({text:`${u.data.display_name} (${u.data.user_email})`,value:u.ID})))])}\n                  </div>\n              </div>\n          </div>`,onMount:({updateData:updateData})=>{$("#owner, #optin-status").on("change",(e=>{updateData({[e.target.name]:e.target.value})}))}},{title:__("Location","groundhogg"),fields:`\n          <div class="gh-rows-and-columns">\n              <div class="gh-row">\n                  <div class="gh-col">\n                      <label for="line1">${__("Line 1","groundhogg")}</label>\n                      ${input({id:"line1",name:"street_address_1"})}\n                  </div>\n                  <div class="gh-col">\n                      <label for="line2">${__("Line 2","groundhogg")}</label>\n                      ${input({id:"line2",name:"street_address_2"})}\n                  </div>\n              </div>\n              <div class="gh-row">\n                  <div class="gh-col">\n                      <label for="city">${__("City","groundhogg")}</label>\n                      ${input({id:"city",name:"city"})}\n                  </div>\n                  <div class="gh-col">\n                      <label for="postal_zip">${__("Postal/Zip Code","groundhogg")}</label>\n                      ${input({id:"postal_zip",name:"postal_zip"})}\n                  </div>\n              </div>\n              <div class="gh-row">\n                  <div class="gh-col">\n                      <label for="region">${__("State","groundhogg")}</label>\n                      ${input({id:"region",name:"region"})}\n                  </div>\n                  <div class="gh-col">\n                      <label for="country">${__("Country","groundhogg")}</label>\n                      ${select({id:"country",name:"country"},{0:__("Select a country","groundhogg"),...BulkEdit.countries})}\n                  </div>\n              </div>\n              <div class="gh-row">\n                  <div class="gh-col">\n                      <label for="time-zone">${__("Time Zone","groundhogg")}</label>\n                      ${select({id:"time-zone",name:"time_zone"},{0:__("Select a time zone","groundhogg"),...BulkEdit.time_zones})}\n                  </div>\n                  <div class="gh-col">\n                      <label for="locale">${__("Locale","groundhogg")}</label>\n                      ${BulkEdit.language_dropdown}\n                  </div>\n              </div>\n          </div>`,onMount:({updateData:updateData})=>{$("").on("change",(e=>{updateData({[e.target.name]:e.target.value})}));$("#locale, #time-zone, #country").select2()}},{title:'<span class=" dashicons dashicons-tag"></span>'+__("Apply Tags","groundhogg"),fields:`\n          <div id="apply-tags"></div>`,onMount:({setInPayload:setInPayload})=>{betterTagPicker("#apply-tags",{onChange:({addTags:addTags})=>{setInPayload({add_tags:addTags})}})}},{title:'<span class=" dashicons dashicons-tag"></span>'+__("Remove Tags","groundhogg"),fields:`\n          <div id="remove-tags"></div>`,onMount:({setInPayload:setInPayload})=>{betterTagPicker("#remove-tags",{onChange:({addTags:addTags})=>{setInPayload({remove_tags:addTags})}})}}];if(BulkEdit.gh_contact_custom_properties){BulkEdit.gh_contact_custom_properties.tabs.forEach((t=>{let groups=BulkEdit.gh_contact_custom_properties.groups.filter((g=>g.tab===t.id));let fields=BulkEdit.gh_contact_custom_properties.fields.filter((f=>groups.find((g=>g.id===f.group))));sections.push({title:t.name,fields:`<div id="${t.id}"></div>`,onMount:({updateMeta:updateMeta})=>{propertiesEditor(`#${t.id}`,{values:{},properties:{groups:groups,fields:fields},onChange:meta=>{updateMeta(meta)},canEdit:()=>false})}})}))}const sanitizeKey=label=>label.toLowerCase().replace(/[^a-z0-9]/g,"_");sections.push({title:__("Custom Meta","groundhogg"),fields:`\n        <div id="meta-list"></div>`,onMount:({updateMeta:updateMeta,deleteMeta:deleteMeta})=>{inputRepeaterWidget({selector:"#meta-list",rows:[],cellProps:[{className:"meta-key"},{}],cellCallbacks:[input,input],onMount:()=>{$(".meta-key").on("input",(e=>{let key=sanitizeKey(e.target.value);$(e.target).val(key)}))},onChange:rows=>{rows.forEach((([key,value])=>{if(!key){return}updateMeta({[key]:value})}))},onRemove:([key,value])=>{if(!key){return}deleteMeta(key)}}).mount()}});const template=()=>`\n        <div id="bulk-edit-inside">\n            <div class="include-filters-wrap">\n                <div class="include-block">${__("Include")}\n                </div>\n                <div id="filters"></div>\n            </div>\n            <div class="exclude-filters-wrap">\n                <div class="exclude-block">${__("Exclude")}\n                </div>\n                <div id="exclude-filters"></div>\n            </div>\n            <div id="edit-fields">\n                ${sections.map((({title:title,fields:fields})=>fieldSection({title:title,fields:fields}))).join("")}\n            </div>\n            <p>\n                <button id="commit" class="gh-button primary">${__("Commit")}\n                </button>\n            </p>\n        </div>`;const{query:query}=BulkEdit;let totalContacts=0;let data={},meta={};let payload={add_tags:[],remove_tags:[]};const updateData=_data=>{data={...data,..._data}};const updateMeta=_meta=>{meta={...meta,..._meta}};const deleteMeta=key=>{delete meta[key]};const setInPayload=_p=>{payload={...payload,..._p}};const fetchContactCount=()=>ContactsStore.count({...query}).then((t=>{totalContacts=t}));const setCommitText=()=>{$("#commit").text(sprintf(_n("Edit %s contact","Edit %s contacts",totalContacts,"groundhogg"),formatNumber(totalContacts)))};const mount=()=>{$("#bulk-edit").html(template());createFilters("#filters",query.filters,(filters=>{query.filters=filters;fetchContactCount().then(setCommitText)})).init();createFilters("#exclude-filters",query.exclude_filters,(filters=>{query.exclude_filters=filters;fetchContactCount().then(setCommitText)})).init();if(query.include){$(".include-filters-wrap, .exclude-filters-wrap").addClass("hidden")}sections.forEach((s=>s.onMount({updateData:updateData,updateMeta:updateMeta,deleteMeta:deleteMeta,setInPayload:setInPayload})));$(".toggle-indicator").on("click",(e=>{$(e.target).closest(".gh-panel").toggleClass("closed")}));$("#commit").on("click",(()=>{console.log({meta:meta,data:data,...payload});confirmationModal({alert:`<p>${sprintf(__("Are you sure you want to edit %s contacts? This action cannot be undone.","groundhogg"),bold(formatNumber(totalContacts)))}</p>`,onConfirm:()=>{progressModal({beforeProgress:()=>`<h2>${__("Updating Contacts...","groundhogg")}</h2><p class="gh-text danger">${__("Do not close this window!")}</p>`,onOpen:({setProgress:setProgress,close:close})=>{let offset=0;let limit=500;const patchContacts=()=>{ContactsStore.patchMany({query:{...query,offset:offset,limit:limit},data:data,meta:meta,...payload}).then((r=>{offset+=limit;setProgress(offset/totalContacts*100);if(offset<totalContacts){patchContacts();return}dialog({message:__("Contacts updated!","groundhogg")});window.open(adminPageURL("gh_contacts"),"_self")}))};patchContacts()}})}})}))};$((()=>{const{close:close}=loadingModal();fetchContactCount().then((()=>{mount();setCommitText();close()}))}))})(jQuery);