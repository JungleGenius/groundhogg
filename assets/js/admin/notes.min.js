($=>{const{notes:NotesStore}=Groundhogg.stores;const{icons:icons,select:select,tinymceElement:tinymceElement,addMediaToBasicTinyMCE:addMediaToBasicTinyMCE,moreMenu:moreMenu,tooltip:tooltip,dangerConfirmationModal:dangerConfirmationModal}=Groundhogg.element;const{post:post,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{userHasCap:userHasCap}=Groundhogg.user;const{formatNumber:formatNumber,formatTime:formatTime,formatDate:formatDate,formatDateTime:formatDateTime}=Groundhogg.formatting;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;const typeToIcon={call:icons.phone,note:icons.note,email:icons.email,meeting:icons.contact};const noteTypes={note:__("Note","groundhogg"),call:__("Call","groundhogg"),email:__("Email","groundhogg"),meeting:__("Meeting","groundhogg")};const templates={notes:(notes,adding=false,editing=false,title)=>`\n\t\t  <div class="notes-widget">\n\t\t\t  <div class="notes-header">\n\t\t\t\t  <h3>${title}</h3>\n\t\t\t\t  <button class="gh-button text icon secondary note-add">\n\t\t\t\t\t  <span class="dashicons dashicons-plus-alt2"></span>\n\t\t\t\t  </button>\n\t\t\t  </div>\n\t\t\t  <div class="notes">\n\t\t\t\t  ${adding?templates.addNote():``}\n\t\t\t\t  ${notes.sort(((a,b)=>b.data.timestamp-a.data.timestamp)).map((n=>editing==n.ID?templates.editNote(n):templates.note(n))).join("")}\n\t\t\t  </div>\n\t\t  </div>`,editNote:note=>`\n\t\t  <div class="add-note">\n\t\t\t  <textarea id="edit-note-editor">${note.data.content}</textarea>\n\t\t\t  <div class="actions">\n\t\t\t\t  <div>\n\t\t\t\t\t  <label>${__("Note type","groundhogg")}\n\t\t\t\t\t\t  ${select({id:"note-type"},noteTypes,note.data.type)}</label>\n\t\t\t\t  </div>\n\t\t\t\t  <div style="display: flex">\n\t\t\t\t\t  <button class="gh-button danger text cancel">${__("Cancel")}</button>\n\t\t\t\t\t  <button class="gh-button primary save">${__("Save")}</button>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>`,addNote:()=>`\n\t\t  <div class="add-note">\n\t\t\t  <textarea id="add-note-editor"></textarea>\n\t\t\t  <div class="actions">\n\t\t\t\t  <div>\n\t\t\t\t\t  <label>${__("Note type","groundhogg")}\n\t\t\t\t\t\t  ${select({id:"note-type"},noteTypes)}</label>\n\t\t\t\t  </div>\n\t\t\t\t  <div style="display: flex">\n\t\t\t\t\t  <button class="gh-button danger text cancel">${__("Cancel")}</button>\n\t\t\t\t\t  <button class="gh-button primary create">${__("Create")}</button>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>`,note:note=>{const{content:content,type:type,context:context,user_id:user_id,date_created:date_created,timestamp:timestamp}=note.data;const addedBy=()=>{switch(context){case"user":let user=Groundhogg.filters.owners.find((o=>o.ID==user_id));let username;if(!user){username=__("Unknown")}else{username=user.ID==Groundhogg.currentUser.ID?__("me"):user.data.display_name}return sprintf(__("Added by %s %s ago","groundhogg"),username,note.locale.time_diff);default:case"system":return sprintf(__("Added by %s %s ago","groundhogg"),__("System"),note.locale.time_diff);case"funnel":return sprintf(__("Added by %s %s ago","groundhogg"),__("Funnel"),note.locale.time_diff)}};return`\n\t\t  <div class="note">\n\t\t\t  <div class="icon">\n\t\t\t\t  ${typeToIcon[type]}\n\t\t\t  </div>\n\t\t\t  <div style="width: 100%">\n\t\t\t\t  <div class="note-header">\n\t\t\t\t\t  ${addedBy()}\n\t\t\t\t\t  <div class="actions">\n\t\t\t\t\t\t  <button class="gh-button text icon secondary note-more" data-id="${note.ID}">\n\t\t\t\t\t\t\t  ${icons.verticalDots}\n\t\t\t\t\t\t  </button>\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>\n\t\t\t\t  <div class="note-content">\n\t\t\t\t\t  ${content}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\n\t\t  </div>`}};const Notes=(selector,{object_type:object_type="",object_id:object_id=0,title:title=__("Notes","groundhogg")})=>{let state={adding:false,editing:false};const $el=$(selector);const render=()=>{wp.editor.remove("edit-note-editor");wp.editor.remove("add-note-editor");const notes=NotesStore.filter((({data:data})=>data.object_type==object_type&&data.object_id==object_id)).sort(((a,b)=>b.data.timestamp-a.data.timestamp));$el.html(templates.notes(notes,state.adding,state.editing,title));onMount()};const onMount=()=>{const addNote=()=>{if(state.editing){wp.editor.remove("edit-note-editor");state.editing=false}state.adding=true;render()};const editNote=id=>{if(state.adding){wp.editor.remove("add-note-editor");state.adding=false}if(state.editing){wp.editor.remove("edit-note-editor")}state.editing=id;render()};$(`${selector} .note-add`).on("click",(()=>{if(this.adding){return}addNote()}));if(!userHasCap("add_notes")){$(".note-add").remove()}tooltip(`${selector} .note-add`,{content:__("Add Note","groundhogg"),position:"left"});if(state.adding){const newNote={object_id:object_id,object_type:object_type,content:"",type:"note"};addMediaToBasicTinyMCE();let editor=tinymceElement("add-note-editor",{quicktags:false},(content=>{newNote.content=content}));$(`${selector} #note-type`).on("change",(e=>{newNote.type=e.target.value}));$(`${selector} .cancel`).on("click",(()=>{state.adding=false;render()}));$(`${selector} .create`).on("click",(()=>{state.adding=false;state.editing=false;NotesStore.post({data:{...newNote,content:editor.getContent({format:"raw"})}}).then((()=>{render()}))}))}else if(state.editing){const editedNote=NotesStore.get(state.editing);const updateNote={content:editedNote.data.content,type:editedNote.data.type};let editor=tinymceElement("edit-note-editor",{quicktags:false},(content=>{updateNote.content=content}));$(`${selector} #note-type`).on("change",(e=>{updateNote.type=e.target.value}));$(`${selector} .cancel`).on("click",(()=>{state.editing=false;render()}));$(`${selector} .save`).on("click",(()=>{state.adding=false;NotesStore.patch(state.editing,{data:{...updateNote,content:editor.getContent({format:"raw"})}}).then((()=>{state.editing=false;render()}))}))}$(`${selector} .note-more`).on("click",(e=>{const curNote=parseInt(e.currentTarget.dataset.id);const note=()=>NotesStore.get(curNote);const belongsToMe=()=>note().data.user_id==Groundhogg.currentUser.ID;moreMenu(e.currentTarget,{items:[{key:"edit",cap:belongsToMe()?"edit_notes":"edit_others_notes",text:__("Edit")},{key:"delete",cap:belongsToMe()?"delete_notes":"delete_others_notes",text:`<span class="gh-text danger">${__("Delete")}</span>`}].filter((i=>userHasCap(i.cap))),onSelect:k=>{switch(k){case"edit":editNote(curNote);break;case"delete":dangerConfirmationModal({alert:`<p>${__("Are you sure you want to delete this note?","groundhogg")}</p>`,onConfirm:()=>{NotesStore.delete(curNote).then((()=>render()))}});break}}})}))};if(!NotesStore.filter((n=>n.data.object_type==object_type&&n.data.object_id==object_id)).length){NotesStore.fetchItems({query:{object_id:object_id,object_type:object_type},limit:9999}).then((()=>{render()}))}else{render()}};console.log("here");Groundhogg.noteEditor=Notes})(jQuery);