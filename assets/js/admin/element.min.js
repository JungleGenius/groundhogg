(function($){function andList(array,text="and"){if(array.length===1){return array[0]}return`${array.slice(0,-1).join(", ")} ${text} ${array[array.length-1]}`}function orList(array){return andList(array,"or")}const createSlotFillProvider=()=>({fills:[],_slotsMounted:[],_slotsDemounted:[],slot:function(slotName,...args){this._slotsMounted.push({name:slotName,args:args});return this.fills.filter(fill=>fill.slot===slotName).map(fill=>fill.render(...args)).join("")},slotsMounted:function(){let slot;while(this._slotsMounted.length>0){slot=this._slotsMounted.pop();this.fills.filter(fill=>fill.slot===slot.name).forEach(fill=>{fill.onMount(...slot.args)});this._slotsDemounted.push(slot)}},slotsDemounted:function(){let slot;while(this._slotsDemounted.length>0){slot=this._slotsDemounted.pop();this.fills.filter(fill=>fill.slot===slot.name).forEach(fill=>{fill.onDemount(...slot.args)})}},fill:function(slot,component){this.fills.push({slot:slot,...{render:function(){},onMount:function(){},onDemount:function(){},...component}})}});function isString(string){return typeof string==="string"}const specialChars=string=>{if(!isString(string)){return string}return string.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;").replace(/"/g,"&quot;")};const kebabize=str=>{return str.split("").map((letter,idx)=>{return letter.toUpperCase()===letter?`${idx!==0?"-":""}${letter.toLowerCase()}`:letter}).join("")};const objectToStyle=object=>{const props=[];for(const prop in object){if(object.hasOwnProperty(prop)){props.push(`${kebabize(prop)}:${specialChars(object[prop])}`)}}return props.join(";")};const objectToProps=object=>{const props=[];for(const prop in object){if(object.hasOwnProperty(prop)){switch(prop){case"className":props.push(`class="${specialChars(object[prop])}"`);break;case"style":props.push(`style="${specialChars(objectToStyle(object[prop]))}"`);break;default:props.push(`${kebabize(prop)}="${specialChars(object[prop])}"`);break}}}return props.join(" ")};const Elements={input:function(props){props={type:"text",className:"input",...props};return`<input ${objectToProps(props)}/>`},select:function(props,options,selected){return`<select ${objectToProps(props)}>${createOptions(options,selected)}</select>`},option:function(value,text,selected){if(typeof value==="object"){value=value.value;text=value.text}return`
		  <option value="${specialChars(value)}" ${selected?"selected":""}>${text}</option>`},mappableFields:function(props,selected){return Elements.select(props,Groundhogg.fields.mappable,selected)},inputWithReplacementsAndEmojis:function({type:type="text",name:name,id:id,value:value,className:className,placeholder:placeholder=""},replacements=true,emojis=true){const classList=[replacements&&"input-with-replacements",emojis&&"input-with-emojis"];return`
		  <div class="input-wrap ${classList.filter(c=>c).join()}">
			  <input type="${type}" id="${id}" name="${name}" value="${specialChars(value)||""}" class="${className}"
			         placeholder="${specialChars(placeholder)}">
			  ${emojis?`<button class="emoji-picker-start" title="insert emoji"><span class="dashicons dashicons-smiley"></span>
			  </button>`:""}
			  ${replacements?`<button class="replacements-picker-start" title="insert replacement"><span
				  class="dashicons dashicons-admin-users"></span></button>`:""}
		  </div>`},inputWithReplacements:function(atts){return Elements.inputWithReplacementsAndEmojis(atts,true,false)},inputWithEmojis:function(atts){return Elements.inputWithReplacementsAndEmojis(atts,false,true)},textAreaWithReplacementsAndEmojis:function({name:name,id:id,value:value}){},textAreaWithReplacements:function({name:name,id:id,value:value}){},textAreaWithEmojis:function({name:name,id:id,value:value}){}};const tinymceElement=(editor_id,config,callback)=>{wp.editor.initialize(editor_id,config);if(callback){callback.call(this,editor_id)}};const createOptions=(options,selected)=>{const optionsString=[];if(Array.isArray(options)){options.forEach(option=>{optionsString.push(Elements.option(option,option,Array.isArray(selected)?selected.indexOf(option)!==-1:option===selected))})}else{for(const option in options){if(options.hasOwnProperty(option)){optionsString.push(Elements.option(option,options[option],Array.isArray(selected)?selected.indexOf(option)!==-1:option===selected))}}}return optionsString.join("")};const regexp=str=>{return new RegExp(str,"i")};if(!Element.prototype.matches){Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(s){var matches=(this.document||this.ownerDocument).querySelectorAll(s),i=matches.length;while(--i>=0&&matches.item(i)!==this){}return i>-1}}function clickInsideElement(e,selector){var el=e.srcElement||e.target;if(el&&el.matches(selector)){return el}else{while(el=el.parentNode){if(typeof el.matches!=="undefined"&&el.matches(selector)){return el}}}return false}const searchOptionsWidget=({selector:selector,options:options=[],groups:groups={},filterOption:filterOption=(option,search)=>option.match(regexp(search)),renderOption:renderOption=option=>option,noOptions:noOptions=`No options...`,onSelect:onSelect=option=>console.log(option),onClose:onClose=()=>{},onOpen:onOpen=()=>{}})=>({selector:selector,options:options,filterOption:filterOption,renderOption:renderOption,onClose:onClose,onSelect:onSelect,groups:groups,search:"",focusedOptionId:0,previousFocusedOptionId:false,focusedOption:false,render:function(){return`
		  <div class="search-options-widget-wrap">
			  <div class="search-options-widget" tabindex="0">
				  <div class="header">
					  ${Elements.input({name:"search",type:"search",className:"search-for-options",autocomplete:"off",placeholder:"Search..."})}
					  <button class="close">
						  <span class="dashicons dashicons-no-alt"></span>
					  </button>
				  </div>
				  <div class="search-options ${this.hasGroups()?"has-groups":"no-groups"}"></div>
			  </div>
		  </div>`},getOptions:function(){return options.filter((option,i)=>{if(this.search){return filterOption(option,this.search)}return true})},hasGroups:function(){return Object.keys(groups).length>0},renderSearchOptions:function(){const searchOptions=[];let focusedIndex=0;var self=this;const optionDiv=(option,group,id,index)=>{return`<div class="option ${index===this.focusedOptionId?"focused":""}" data-option="${id}" data-group="${group}">${renderOption(option)}</div>`};if(Object.keys(groups).length>0){Object.keys(groups).forEach((group,g)=>{const options=[];this.getOptions().filter(option=>option.group===group).forEach((option,o)=>{options.push(optionDiv(option,group,o,focusedIndex));focusedIndex++});if(options.length>0){searchOptions.push(`<div class="option-group" data-group="${group}">${groups[group]}</div>`,...options)}})}else{this.getOptions().forEach((option,o)=>{searchOptions.push(optionDiv(option,null,o,focusedIndex));focusedIndex++})}return searchOptions.length?searchOptions.join(""):`<div class="no-options">${noOptions}</div>`},selectOption:function(optionId,groupId){if(!this.hasGroups()){onSelect(this.getOptions()[optionId]);onClose()}else{Object.keys(groups).forEach((group,g)=>{this.getOptions().filter(option=>option.group==group).forEach((option,o)=>{if(group==groupId&&o==optionId){onSelect(option);onClose();return}})})}},mountOptions:function(){var self=this;const $options=$(`${selector} .search-options`);$options.html(this.renderSearchOptions());$(`${selector} .option`).on("click",function(e){const optionId=$(this).data("option");const groupId=$(this).data("group");self.selectOption(optionId,groupId)});const $focused=$(`${selector} .option.focused`);let offset;if(this.focusedOptionId>this.previousFocusedOptionId){offset=$focused.height()*($focused.index()+1);if(offset>$options.height())$options.scrollTop(offset-$options.height())}else if(this.focusedOptionId<this.previousFocusedOptionId){offset=$focused.height()*$focused.index();if(offset<$options.scrollTop())$options.scrollTop(offset)}},mount:function(){var self=this;const handleClose=()=>{onClose()};$(selector).html(self.render());this.mountOptions();$(`${selector} input.search-for-options`).on("change input",function(e){self.search=$(this).val();self.focusedOptionId=false;self.previousFocusedOptionId=false;self.mountOptions()}).focus();const el=document.querySelector(".search-options-widget");if(el.getBoundingClientRect().y+$(el).height()>window.innerHeight){el.classList.add("mount-from-bottom")}$(`${selector} button.close`).on("click",function(e){handleClose()});const handleKeyDown=e=>{const{type:type,key:key,keyCode:keyCode}=e;switch(key){case"Esc":case"Escape":handleClose();break;case"Down":case"ArrowDown":e.preventDefault();if(this.focusedOptionId===this.getOptions().length-1){return}this.previousFocusedOptionId=this.focusedOptionId;this.focusedOptionId++;this.mountOptions();break;case"Up":case"ArrowUp":e.preventDefault();if(this.focusedOptionId===0){return}this.previousFocusedOptionId=this.focusedOptionId;this.focusedOptionId--;this.mountOptions();break;case"Enter":e.preventDefault();const $focused=$(`${selector} .option.focused`);this.selectOption($focused.data("option"),$focused.data("group"));break}};$(".search-options-widget").on("keydown",handleKeyDown);onOpen()}});Groundhogg.element={...Elements,specialChars:specialChars,andList:andList,orList:orList,kebabize:kebabize,regexp:regexp,objectToProps:objectToProps,objectToStyle:objectToStyle,createOptions:createOptions,createSlotFillProvider:createSlotFillProvider,clickInsideElement:clickInsideElement,searchOptionsWidget:searchOptionsWidget,tinymceElement:tinymceElement}})(jQuery);