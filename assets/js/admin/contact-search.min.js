(function($){const{createFilters:createFilters}=Groundhogg.filters.functions;const{searchOptionsWidget:searchOptionsWidget,regexp:regexp,specialChars:specialChars,modal:modal,input:input,loadingDots:loadingDots,copyObject:copyObject,objectEquals:objectEquals,moreMenu:moreMenu,select:select,dangerConfirmationModal:dangerConfirmationModal,confirmationModal:confirmationModal,clickInsideElement:clickInsideElement,progressBar:progressBar,dialog:dialog,adminPageURL:adminPageURL}=Groundhogg.element;const{post:post,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{searches:SearchesStore,contacts:ContactsStore,tags:TagsStore,funnels:FunnelsStore}=Groundhogg.stores;const{tagPicker:tagPicker,funnelPicker:funnelPicker}=Groundhogg.pickers;const{StepTypes:StepTypes}=Groundhogg;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;StepTypes.setup();SearchesStore.itemsFetched(ContactSearch.searches);const loadFilters=filters=>{window.location.href=ContactSearch.url+"&filters="+btoa(JSON.stringify(filters))};const loadSearch=search=>{window.location.href=ContactSearch.url+"&saved_search="+search};const SearchApp={filtersEnabled:false,savedSearchEnabled:false,filters:[],filtersApp:null,searchesApp:null,currentSearch:null,init:function(){const handleUpdateFilters=filters=>{this.filters=filters;getContacts(filters);if(this.currentSearch){if(objectEquals(this.filters,this.currentSearch.query.filters)){$("#update-search").prop("disabled",true)}else{$("#update-search").prop("disabled",false)}}};this.filters=ContactSearch.filters||[];if(this.filters&&this.filters.length>0){this.filtersEnabled=true;$(".contact-quick-search").hide()}else if(ContactSearch.currentSearch){this.currentSearch=copyObject(ContactSearch.currentSearch);if(this.currentSearch.query.filters){this.filters=copyObject(this.currentSearch.query.filters,[])}}this.filtersApp=createFilters("#search-filters",this.filters,handleUpdateFilters);this.initSavedSearches();this.mount()},initSavedSearches:function(){this.searchesApp=searchOptionsWidget({selector:"#searches-picker",options:SearchesStore.getItems(),filterOption:(option,search)=>{return option.name.match(regexp(search))},renderOption:option=>option.name,onClose:()=>{this.savedSearchEnabled=false;this.mount()},onSelect:option=>{this.loadingSearch=true;loadSearch(option.id)},noOptions:__("No matching searches...","groundhogg")})},render:function(){if(this.filtersEnabled){return`
			<div class="enable-filters-wrap">
				<button class="enable-filters white"><span class="dashicons dashicons-filter"></button>
			</div>
			<div class="search-filters-wrap">
				<div id="search-filters"></div>
				<div class="search-contacts-wrap">
					<button id="search-contacts" class="button button-primary">${__("Search","groundhogg")}</button>
					${!this.currentSearch?`<button id="save-search" class="button button-secondary">${__("Save this search","groundhogg")}</button>`:`<button id="update-search" class="button button-secondary" ${objectEquals(this.filters,this.currentSearch.query.filters)?"disabled":""}>${__("Update","groundhogg")} "${this.currentSearch.name}"</button>`}
				</div>
			</div>
        `}return`
		  <button class="enable-filters white" style="padding-right: 10px"><span
			  class="dashicons dashicons-filter"></span> ${this.currentSearch?__("Edit Filters","groundhogg"):__("Filter Contacts","groundhogg")}
		  </button>
		  ${this.savedSearchEnabled?`<div id="searches-picker"></div>`:ContactSearch.searches.length?`<button id="load-saved-search" class="has-dashicon button button-secondary"><span class="dashicons dashicons-search"></span> <span class="text">${this.loadingSearch?__("Loading search","groundhogg"):__("Load saved search","groundhogg")}</span></button>`:""}`},mount:function(){$("#search-panel .filters").html(this.render());this.addListeners()},addListeners:function(){var self=this;const remount=()=>{this.mount()};const enableFilters=()=>{this.filtersEnabled=!this.filtersEnabled;if(this.filtersEnabled){$(".contact-quick-search").hide()}else{$(".contact-quick-search").show()}remount()};const enableSavedSearch=()=>{this.savedSearchEnabled=!this.savedSearchEnabled;remount()};if(this.filtersEnabled){this.filtersApp.init()}if(this.savedSearchEnabled){this.searchesApp.mount()}$(".enable-filters").on("click",function(){enableFilters()});$("#load-saved-search").on("click",function(){enableSavedSearch()});if(this.loadingSearch){$("#load-saved-search").prop("disabled",true);loadingDots("#load-saved-search span.text")}$("#search-contacts").on("click",e=>{$(e.target).html("Searching").prop("disabled",true);loadingDots("#search-contacts");if(this.currentSearch&&objectEquals(this.filters,this.currentSearch.query.filters)){loadSearch(this.currentSearch.id)}else{loadFilters(this.filters)}});$("#update-search").on("click",e=>{const $button=$(e.target);$button.prop("disabled",true);$button.html("Updating");const{stop:stop}=loadingDots("#update-search");SearchesStore.patch(this.currentSearch.id,{query:{filters:this.filters}}).then(search=>{stop();this.currentSearch=search;$button.html("Updated!");setTimeout(()=>{this.mount()},1e3)})});$("span#search-name").on("click",e=>{const $span=$(e.target);$span.html(input({name:"search_name",id:"saved-search-name-edit",value:this.currentSearch.name}));$("#saved-search-name-edit").focus().on("change blur keydown",e=>{if(e.type==="keydown"&&e.key!=="Enter"){return}const newName=e.target.value;$span.html(specialChars(newName));if(newName!==this.currentSearch.name){SearchesStore.patch(this.currentSearch.id,{name:newName}).then(s=>this.currentSearch=s).then(()=>$span.html(specialChars(this.currentSearch.name)))}})});$("#save-search").on("click",()=>{const{$modal:$modal,close:close}=modal({content:`
			  <h2>Name your search...</h2>
			  <p>${input({id:"search-name",placeholder:__("My saved search...","groundhogg")})}</p>
			  <button id="save" disabled class="gh-button primary">${__("Save","groundhogg")}</button>`});$("input#search-name").on("change input",e=>{this.newSearchName=e.target.value;if(!this.newSearchName){$("#save").prop("disabled",true)}else{$("#save").prop("disabled",false)}}).focus();$("#save.gh-button").on("click",e=>{if(!this.newSearchName){return}const $button=$(e.target);$button.prop("disabled",true);$button.html("Saving");const{stop:stop}=loadingDots("#save.gh-button");SearchesStore.post({name:this.newSearchName,query:{filters:this.filters}}).then(search=>{stop();$button.html("Saved!");this.currentSearch=search;this.mount();setTimeout(close,1e3)})})})}};let abortHandler;const getContacts=filters=>{if(abortHandler){abortHandler.abort()}abortHandler=new AbortController;const{signal:signal}=abortHandler;ContactsStore.count({filters:btoa(JSON.stringify(filters))},{signal:signal}).then(total=>{$("#search-contacts").html(`Show ${total} contacts`)})};$(function(){SearchApp.init()});$(()=>{$(".gh-actions").append(`<button type="button" class="more-actions button button-secondary">${__("More Actions","groundhogg")}</button>`);$(".more-actions").on("click",e=>{const{total_items:totalContacts,total_items_formatted:totalContactsFormatted,query:ContactQuery}=ContactsTable;moreMenu(e.currentTarget,{items:[{key:"edit",text:`Edit ${totalContactsFormatted} contacts`},{key:"export",text:`Export ${totalContactsFormatted} contacts`},{key:"broadcast",text:`Send a broadcast to ${totalContactsFormatted} contacts`},{key:"funnel",text:`Add ${totalContactsFormatted} contacts to a funnel`},{key:"delete",text:`<span class="gh-text danger">Delete ${totalContactsFormatted} contacts</span>`}],onSelect:key=>{switch(key){case"funnel":let funnel;let step;const addToFunnel=()=>{const steps=()=>{return`
					  <div class="gh-row">
						  <div class="gh-col">
							  <label class="block">Select a step</label>
							  ${select({id:"select-step",name:"step"},funnel.steps.sort((a,b)=>a.data.step_order-b.data.step_order).map(s=>({value:s.ID,text:s.data.step_title})),step&&step.ID)}
						  </div>
					  </div>`};return`
					<h2>Add contacts to a funnel</h2>
					<div class="gh-rows-and-columns">
						<div class="gh-row">
							<div class="gh-col">
								<label class="block">Select a funnel</label>
								${select({id:"select-funnel",name:"funnel"},FunnelsStore.getItems().map(f=>({value:f.ID,text:f.data.title})),funnel&&funnel.ID)}
							</div>
						</div>
						${funnel?steps():""}
						${funnel&&step?`<div class="gh-row"><div class="gh-col"><button class="gh-button primary">${__("Add","groundhogg")} ${totalContactsFormatted} to <b>${funnel.data.title}</b></button></div></div>`:""}
					</div>`};const mounted=()=>{funnelPicker("#select-funnel",false,items=>{FunnelsStore.itemsFetched(items)},{status:"active"}).on("change",({target:target})=>{funnel=FunnelsStore.get(parseInt($(target).val()));StepTypes.preloadSteps(funnel.steps).then(()=>{step=false;setContent(addToFunnel());mounted()})});const template=opt=>{if(!opt.id){return opt.text}const step=funnel.steps.find(s=>s.ID===parseInt(opt.id));const{step_type:step_type,step_group:step_group}=step.data;const StepType=StepTypes.getType(step.data.step_type);return $(`<div class="select2-step ${step_group} ${step_type}">${StepType.svg}<div class="step-name">${StepType.title(step)}</div></div>`)};$("#select-step").select2({templateSelection:template,templateResult:template}).on("change",({target:target})=>{step=funnel.steps.find(s=>s.ID===parseInt($(target).val()));setContent(addToFunnel());mounted()})};const{setContent:setContent}=modal({content:addToFunnel()});mounted();break;case"broadcast":const{close:closeModal}=modal({content:`<h2>${__("Send a broadcast","groundhogg")}</h2><div id="gh-broadcast-form" style="width: 400px"></div>`});Groundhogg.SendBroadcast("#gh-broadcast-form",{query:{...ContactQuery,number:-1,offset:0},total_contacts:totalContacts,which:"from_table"},{onScheduled:()=>{closeModal()}});break;case"delete":let number=100;let deleted=0;const deleteContacts=(onDelete,onComplete)=>{ContactsStore.deleteMany({...ContactQuery,number:number,offset:0}).then(items=>{deleted+=items.length;onDelete();if(items.length===0){onComplete();return}deleteContacts(onDelete,onComplete)})};dangerConfirmationModal({alert:`<p>Are you sure you want to delete <b>${totalContactsFormatted}</b> contacts? This cannot be undone. Consider <i>exporting</i> first!</p>`,onConfirm:()=>{modal({content:`<div id="delete-progress"></div>`,canClose:false});const{setProgress:setProgress}=progressBar("#delete-progress");const onDelete=()=>{setProgress(deleted/parseInt(totalContacts))};const onComplete=()=>{dialog({message:`<b>${deleted}</b> contacts deleted`});window.location.href=adminPageURL("gh_contacts")};deleteContacts(onDelete,onComplete)}});break}}})})});$(()=>{ContactsStore.itemsFetched(ContactsTable.items);$(document).on("click",".editinline",e=>{e.preventDefault();const ID=parseInt(e.currentTarget.dataset.id);const contact=ContactsStore.get(ID);if(contact&&contact.tags){TagsStore.itemsFetched(contact.tags)}const quickEdit=(editingName=false)=>{return`
			<div class="contact-quick-edit" tabindex="0">
				<div class="contact-quick-edit-header">
					<div class="avatar-and-name">
						<img height="50" width="50" src="${contact.data.gravatar}" alt="avatar"/>
						<h2 class="contact-name">
							${specialChars(`${contact.data.first_name} ${contact.data.last_name}`)}</h2>
					</div>
					<div class="actions">
						<a class="gh-button secondary" href="${contact.admin}">${__("Edit Full Profile","groundhogg")}</a>
					</div>
				</div>
				<div class="contact-quick-edit-fields">
					<div class="row">
						<div class="col">
							<label for="quick-edit-first-name">${__("First Name","groundhogg")}</label>
							${input({id:"quick-edit-first-name",name:"first_name",value:contact.data.first_name})}
						</div>
						<div class="col">
							<label for="quick-edit-last-name">${__("Last Name","groundhogg")}</label>
							${input({id:"quick-edit-last-name",name:"last_name",value:contact.data.last_name})}
						</div>
					</div>
					<div class="row">
						<div class="col">
							<label for="quick-edit-email">${__("Email Address","groundhogg")}</label>
							${input({type:"email",name:"email",id:"quick-edit-email",value:contact.data.email})}
						</div>
						<div class="col">
							<div class="row phone">
								<div class="col">
									<label for="quick-edit-primary-phone">${__("Primary Phone","groundhogg")}</label>
									${input({type:"tel",id:"quick-edit-primary-phone",name:"primary_phone",value:contact.meta.primary_phone})}
								</div>
								<div class="primary-phone-ext">
									<label for="quick-edit-primary-phone-extension">${__("Ext.","groundhogg")}</label>
									${input({type:"number",id:"quick-edit-primary-phone-extension",name:"primary_phone_extension",value:contact.meta.primary_phone_extension})}
								</div>
							</div>
						</div>
					</div>
					<div class="row">
						<div class="col">
							<label for="quick-edit-email">${__("Optin Status","groundhogg")}</label>
							${select({id:"quick-edit-optin-status",name:"optin_status"},Groundhogg.filters.optin_status,contact.data.optin_status)}
						</div>
						<div class="col">
							<label for="quick-edit-mobile-phone">${__("Mobile Phone","groundhogg")}</label>
							${input({type:"tel",id:"quick-edit-mobile-phone",name:"mobile_phone",value:contact.meta.mobile_phone})}
						</div>
					</div>
					<div class="row">
						<div class="col">
							<label for="quick-edit-email">Owner</label>
							${select({id:"quick-edit-owner",name:"owner_id"},Groundhogg.filters.owners.map(u=>({text:u.data.user_email,value:u.ID})),contact.data.owner_id)}
						</div>
						<div class="col">
							<label for="quick-edit-tags">Tags</label>
							${select({id:"quick-edit-tags",multiple:true},TagsStore.getItems().map(t=>({value:t.ID,text:t.data.tag_name})),contact.tags.map(t=>t.ID))}
						</div>
					</div>
				</div>
			</div>`};const{close:close,setContent:setContent}=modal({content:quickEdit()});const quickEditMounted=()=>{let payload;const clearPayload=()=>{payload={data:{},meta:{},add_tags:[],remove_tags:[]}};clearPayload();const mergePayload=data=>{for(const dataKey in data){if(data.hasOwnProperty(dataKey)){if(Array.isArray(data[dataKey])){payload[dataKey]=[...payload[dataKey],...data[dataKey]]}else{payload[dataKey]={...payload[dataKey],...data[dataKey]}}}}};let timeout;const updateContact=data=>{mergePayload(data);if(timeout){clearTimeout(timeout)}timeout=setTimeout(()=>{ContactsStore.patch(contact.ID,payload).then(()=>{ajax({action:"groundhogg_contact_table_row",contact:contact.ID}).then(r=>{dialog({message:__("Contact updated!","groundhogg")});$(`#contact-${contact.ID}`).replaceWith(r.data.row)})});clearPayload()},2e3)};const $quickEdit=$(".contact-quick-edit");$quickEdit.focus();tagPicker("#quick-edit-tags",true,items=>{TagsStore.itemsFetched(items)}).on("select2:unselect",e=>{updateContact({remove_tags:[e.params.data.id]})}).on("select2:select",e=>{updateContact({add_tags:[e.params.data.id]})});$("#quick-edit-first-name,#quick-edit-last-name,#quick-edit-email,#quick-edit-optin-status,#quick-edit-owner").on("change",e=>{updateContact({data:{[e.target.name]:e.target.value}})});$("#quick-edit-primary-phone,#quick-edit-primary-phone-extension,#quick-edit-mobile-phone").on("change",e=>{updateContact({meta:{[e.target.name]:e.target.value}})})};quickEditMounted()})})})(jQuery);