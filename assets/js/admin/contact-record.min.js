($=>{const{StepTypes:StepTypes}=Groundhogg;const{searchOptionsWidget:searchOptionsWidget,regexp:regexp,specialChars:specialChars,breadcrumbs:breadcrumbs,modal:modal,input:input,tabs:tabs,loadingDots:loadingDots,copyObject:copyObject,objectEquals:objectEquals,moreMenu:moreMenu,select:select,dangerConfirmationModal:dangerConfirmationModal,confirmationModal:confirmationModal,clickInsideElement:clickInsideElement,progressBar:progressBar,dialog:dialog,bold:bold,tooltip:tooltip,button:button,infoCard:infoCard,el:el,savingButtonOnClick:savingButtonOnClick,icons:icons,adminPageURL:adminPageURL}=Groundhogg.element;const{post:post,get:get,patch:patch,routes:routes,ajax:ajax}=Groundhogg.api;const{searches:SearchesStore,contacts:ContactsStore,tags:TagsStore,funnels:FunnelsStore,activity:ActivityStore,events:EventsStore,emails:EmailsStore}=Groundhogg.stores;const{tagPicker:tagPicker,funnelPicker:funnelPicker}=Groundhogg.pickers;const{userHasCap:userHasCap}=Groundhogg.user;const{formatNumber:formatNumber,formatTime:formatTime,formatDate:formatDate,formatDateTime:formatDateTime}=Groundhogg.formatting;const{sprintf:sprintf,__:__,_x:_x,_n:_n}=wp.i18n;const{InfoCardProvider:InfoCardProvider}=Groundhogg.utils;const{contact:contact}=GroundhoggContact;ContactsStore.itemsFetched([contact]);const simpleForm=rows=>{const row=({label:label,input:input})=>`\n\t\t  <div class="gh-row">\n\t\t\t  <div class="gh-col">\n\t\t\t\t  <label class="row-label">\n\t\t\t\t\t  <b>${label}</b>\n\t\t\t\t  </label>\n\t\t\t\t  ${Array.isArray(input)?`<div class="gh-input-group">${input.join("")}</div>`:input}\n\t\t\t  </div>\n\t\t  </div>`;return`\n\t\t<div class="gh-rows-and-columns">\n\t\t\t${rows.map(row).join("")}\n\t\t</div>`};const PrimaryInfoCards=InfoCardProvider({});const SecondaryInfoCards=InfoCardProvider({});PrimaryInfoCards.registerCard("contact-info",{title:()=>__("Contact info","groundhogg"),content:({getContact:getContact},{editing:editing=false})=>{const{first_name:first_name,last_name:last_name,email:email=""}=getContact().data;const{primary_phone:primary_phone="",primary_phone_extension:primary_phone_extension="",mobile_phone:mobile_phone=""}=getContact().meta;const view=()=>`\n\t\t\t<div class="space-between">\n\t\t\t\t<b>${__("Email")}</b><span>${email?`<a href="mailto:${email}" class="send-email">${email}</a>`:"-"}</span>\n\t\t\t</div>\n\t\t\t<div class="space-between">\n\t\t\t\t<b>${__("Phone")}</b><span>${primary_phone?`<a href="tel:${primary_phone}">${primary_phone} ${primary_phone_extension?`x${primary_phone_extension}`:""}</a>`:"-"}</span>\n\t\t\t</div>\n\t\t\t<div class="space-between">\n\t\t\t\t<b>${__("Mobile")}</b><span>${mobile_phone?`<a href="tel:${mobile_phone}">${mobile_phone}</a>`:"-"}</span>\n\t\t\t</div>\n\t\t\t<p>\n\t\t\t\t<button class="gh-button secondary small" id="edit-contact-info">${__("Edit")}</button>\n\t\t\t</p>`;const edit=()=>`${simpleForm([{label:__("Email Address"),input:input({name:"email",id:"edit-email",value:email,placeholder:__("john.doe@example.com","groundhogg")})},{label:__("Primary Phone"),input:`<div class="gh-input-group">${input({name:"primary_phone",id:"edit-primary-phone",value:primary_phone,placeholder:__("(555) 555-5555","groundhogg")})}${input({type:"number",name:"primary_phone_extension",id:"edit-primary-phone-extension",value:primary_phone_extension,placeholder:__("Extension","groundhogg")})}</div>`},{label:__("Mobile Phone"),input:input({name:"mobile_phone",id:"edit-mobile-phone",value:mobile_phone,placeholder:__("(555) 555-5555","groundhogg")})}])}\n\t\t<p class="align-right-space-between">\n\t\t\t<button class="gh-button danger text small" id="cancel-contact-info">${__("Cancel")}</button>\n\t\t\t<button class="gh-button primary small" id="save-contact-info">${__("Save")}</button>\n\t\t</p>`;return!editing?view():edit()},onMount:({getContact:getContact,updateContact:updateContact},{editing:editing=false},setState)=>{if(!editing){$("#edit-contact-info").on("click",(()=>setState({editing:true})))}else{let data={};let meta={};$("#edit-email").on("change",(({target:target})=>{data.email=target.value}));$("#edit-primary-phone,#edit-primary-phone-extension,#edit-mobile-phone").on("change",(({target:target})=>{meta[target.name]=target.value}));savingButtonOnClick("#save-contact-info",(()=>{updateContact({data:data,meta:meta}).then((()=>setState({editing:false})))}))}},preload:({contact:contact})=>{}});PrimaryInfoCards.registerCard("tags",{title:()=>__("Tags","groundhogg"),content:({contact:contact},{editing:editing=false})=>`${select({id:"edit-tags",name:"tags"})}\n\t  <div class="tag-button-save-wrap hidden">\n\t\t  <p class=" align-right-space-between">\n\t\t\t  <button class="gh-button danger text small" id="cancel-tag-changes">${__("Cancel")}</button>\n\t\t\t  <button class="gh-button primary small" id="save-tag-changes">${__("Save")}</button>\n\t\t  </p>\n\t  </div>\n      `,onMount:({getContact:getContact,updateContact:updateContact})=>{let request;const resetRequest=()=>{request={add_tags:[],remove_tags:[]}};resetRequest();const $p=$(".tag-button-save-wrap");const maybeShowBtn=()=>{if(request.add_tags.length||request.remove_tags.length){$p.show(0)}else{$p.hide(0)}};tagPicker("#edit-tags",true,(items=>TagsStore.itemsFetched(items)),{width:"100%",data:[...TagsStore.getItems().map((t=>({id:t.ID,text:t.data.tag_name,selected:getContact().tags.find((_t=>_t.ID==t.ID))})))]}).on("select2:select",(({params:params})=>{let tag=params.data;if(!getContact().tags.find((t=>tag.id==t.ID))){request.add_tags.push(parseInt(tag.id))}request.remove_tags=request.remove_tags.filter((tId=>tId!=tag.id));maybeShowBtn()})).on("select2:unselect",(({params:params})=>{let tag=params.data;if(getContact().tags.find((t=>tag.id==t.ID))){request.remove_tags.push(parseInt(tag.id))}request.add_tags=request.add_tags.filter((tId=>tId!=tag.id));maybeShowBtn()}));savingButtonOnClick("#save-tag-changes",(release=>{updateContact(request).then((()=>{release();resetRequest();maybeShowBtn()}))}))},preload:({contact:contact})=>{TagsStore.itemsFetched(contact.tags)}});PrimaryInfoCards.registerCard("company-details",{title:()=>__("Company","groundhogg"),content:({contact:contact},{editing:editing=false})=>{const view=()=>``;const edit=()=>``;return!editing?view():edit()},onMount:({contact:contact})=>{},preload:({contact:contact})=>{}});PrimaryInfoCards.registerCard("location",{title:()=>__("Location","groundhogg"),content:({getContact:getContact},{editing:editing=false})=>{const{street_address_1:street_address_1="",street_address_2:street_address_2="",city:city="",region:region="",country:country="",postal_zip:postal_zip=""}=getContact().meta;const edit=()=>`${simpleForm([{label:__("Line 1","groundhogg"),input:input({name:"street_address_1",id:"edit-street-address-1",value:street_address_1})},{label:__("Line 2","groundhogg"),input:input({name:"street_address_2",id:"edit-street-address-2",value:street_address_2})}])}`;const view=()=>`\n\t\t\t<p><b>${__("Address","groundhogg")}</b></p>\n\t\t\t<div title="${__("Line 1","groundhogg")}">${street_address_1}</div>\n\t\t\t<div title="${__("Line 2","groundhogg")}">${street_address_2}</div>\n\t\t\t<div title="${__("City","groundhogg")}">${city}</div>\n\t\t\t<div title="${__("State","groundhogg")}">${region}</div>\n\t\t\t<div title="${__("Zip Code","groundhogg")}">${postal_zip}</div>\n\t\t\t<button class="gh-button small secondary" id="edit-location">${__("Edit")}</button>\n        `;return`\n\t\t  <div id="contact-location">\n\t\t\t  ${editing?edit():view()}\n\t\t  </div>`},onMount:({contact:contact,updateContact:updateContact},{editing:editing=false},setState)=>{if(editing){$("#save-location").on("click",(()=>setState({editing:false})))}else{$("#edit-location").on("click",(()=>setState({editing:true})))}},preload:contact=>{}});PrimaryInfoCards.registerCard("compliance-details",{title:()=>__("Compliance","groundhogg"),content:({contact:contact,getContact:getContact})=>{const{marketing_consent_date:marketing_consent_date,data_processing_consent_date:data_processing_consent_date,terms_agreement_date:terms_agreement_date}=getContact().data;const isRealDate=d=>d!=="0000-00-00 00:00:00";return`\n\t\t  <div class="space-between">\n\t\t\t  <b>${__("Data processing consent")}</b><span>${isRealDate(data_processing_consent_date)?formatDate(data_processing_consent_date):"-"}</span>\n\t\t  </div>\n\t\t  <div class="space-between">\n\t\t\t  <b>${__("Marketing consent")}</b><span>${isRealDate(marketing_consent_date)?formatDate(marketing_consent_date):"-"}</span>\n\t\t  </div>\n\t\t  <div class="space-between">\n\t\t\t  <b>${__("Agreed to terms")}</b><span>${isRealDate(terms_agreement_date)?formatDate(terms_agreement_date):"-"}</span>\n\t\t  </div>`},onMount:({contact:contact})=>{},preload:({contact:contact})=>{}});SecondaryInfoCards.registerCard("user",{title:({data:data})=>__("WordPress User","groundhogg"),content:(contact,{editing:editing=false})=>{const view=()=>``;const edit=()=>``;return!editing?view():edit()},onMount:contact=>{},preload:contact=>{}});SecondaryInfoCards.registerCard("page_visits",{title:({data:data})=>__("Page Visits","groundhogg"),content:(contact,{editing:editing=false})=>{const view=()=>``;const edit=()=>``;return!editing?view():edit()},onMount:contact=>{},preload:contact=>{}});const ContactActions={};const ActivityTimeline={types:{wp_login:{icon:icons.email,render:({email:email})=>__("Logged in","groundhogg"),preload:()=>{}},wp_logout:{icon:icons.email,render:({email:email})=>__("Logged out","groundhogg"),preload:()=>{}},email_opened:{icon:icons.email,render:({email:email})=>sprintf(__("Opened %s","groundhogg"),bold(email.data.title)),preload:({email:email})=>{EmailsStore.itemsFetched([email])}},email_link_click:{icon:icons.email,render:({email:email,data:data})=>sprintf(__("Clicked %s in %s","groundhogg"),bold(data.referer),bold(email.data.title)),preload:({email:email})=>{EmailsStore.itemsFetched([email])}}},renderActivity(activity){if(activity.type==="event"){return`\n\t\t\t<li class="activity-item">\n\t\t\t\t<div class="activity-icon">${type.icon}</div>\n\t\t\t\t<div class="activity-rendered">\n\t\t\t\t\t<div class="activity-info">\n\t\t\t\t\t\t${type.render(activity)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="diff-time">\n\t\t\t\t\t\t${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>`}const type=this.types[activity.data.activity_type];return`\n\t\t  <li class="activity-item">\n\t\t\t  <div class="activity-icon">${type.icon}</div>\n\t\t\t  <div class="activity-rendered">\n\t\t\t\t  <div class="activity-info">\n\t\t\t\t\t  ${type.render(activity)}\n\t\t\t\t  </div>\n\t\t\t\t  <div class="diff-time">\n\t\t\t\t\t  ${sprintf(__("%s ago","groundhogg"),activity.locale.diff_time)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </li>`},render(activities){return`\n\t\t  <ul id="activity-timeline">\n\t\t\t  ${activities.map((a=>this.renderActivity(a))).join("")}\n\t\t  </ul>`},mount(selector,activities){const $el=$(selector);activities=activities.filter((a=>a.type==="event"||a.data.activity_type in this.types));if(!activities.length){$el.html(`<p>${__("No tracked activity yet","groundhogg")}</p>`);return}let promises=[...activities.filter((a=>a.type==="activity")).map((a=>this.types[a.data.activity_type].preload(a))),StepTypes.preloadSteps(activities.filter((a=>a.type==="event")).map())];Promise.all(promises).then((()=>{$el.html(this.render(activities))}))}};const ContactRecord={editingBasicDetails:false,contact:contact,render(){const header=()=>`\n         <div class="gh-header space-between">\n\t\t\t\t  <div class="title-wrap">\n\t\t\t\t\t  <h1 class="breadcrumbs">\n\t\t\t\t\t\t  ${breadcrumbs([__("Contacts","groundhogg"),`<div class="space-between"><img width="30" height="30" alt="profile picture" src="${contact.data.gravatar}"/> ${contact.data.full_name}</div>`])}\n\t\t\t\t\t  </h1>\n\t\t\t\t  </div>\n\t\t\t\t  <div class="actions">\n\n\t\t\t\t  </div>\n\t\t\t  </div>`;const editBasicDetails=()=>{let{first_name:first_name,last_name:last_name,email:email,optin_status:optin_status}=this.contact.data;return`\n\t\t\t<div class="inside" style="padding: 12px">\n\t\t\t\t${simpleForm([{label:__("Name"),input:[input({value:first_name,name:"first_name",id:"edit-first-name",placeholder:__("First","groundhogg")}),input({value:last_name,name:"last_name",id:"edit-last-name",placeholder:__("Last","groundhogg")})]},{label:__("Email address","groundhogg"),input:input({name:"email",id:"edit-email-primary",value:email})},{label:__("Optin Status","groundhogg"),input:select({name:"optin_status",id:"edit-optin-status"},Groundhogg.filters.optin_status,optin_status)}])}\n\t\t\t\t<p class="align-right-space-between">\n\t\t\t\t\t<button class="gh-button danger text small" id="cancel-basic-details">${__("Cancel")}</button>\n\t\t\t\t\t<button class="gh-button primary small" id="save-basic-details">${__("Save")}</button>\n\t\t\t\t</p>\n\t\t\t</div>`};const viewBasicDetails=()=>`<img class="avatar" width="100" height="100" alt="profile picture"\n\t\t             src="${contact.data.gravatar}"/>\n\t\t<div class="full-name">${contact.data.full_name}</div>\n\t\t<div class="email-address">${contact.data.email}</div>\n\t\t<div class="contact-actions">\n\t\t\t<button class="gh-button secondary text icon">${icons.email}</button>\n\t\t\t<button class="gh-button secondary text icon">${icons.phone}</button>\n\t\t\t<button class="gh-button secondary text icon">${icons.note}</button>\n\t\t\t<button class="gh-button secondary text icon">${icons.verticalDots}</button>\n\t\t</div>`;return`\n\t\t  <div id="contact-record">\n\t\t\t  <div class="space-between" id="contact-stuff">\n\t\t\t\t  <div class="gh-panel" id="general-details">\n\t\t\t\t\t  ${this.editingBasicDetails?editBasicDetails():viewBasicDetails()}\n\t\t\t\t\t  <div id="contact-primary-info-cards"></div>\n\t\t\t\t  </div>\n\t\t\t\t  <div id="main-stuff">\n\n\t\t\t\t  </div>\n\t\t\t\t  <div class="gh-panel" id="info-cards">\n\t\t\t\t\t  <h2 class="additional">${__("Additional info","groundhogg")}</h2>\n\t\t\t\t\t  <div id="more-info-cards">\n\n\t\t\t\t\t  </div>\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>`},mount(){$("#app").html(this.render());this.onMount()},onMount(){let contactChanges={};const updateContact=(data,r=false)=>ContactsStore.patch(contact.ID,data).then((c=>{dialog({message:__("Contact updated","groundhogg")});if(r){this.mount()}this.contact=c;return c}));const getContact=()=>ContactsStore.get(contact.ID);$(".full-name, .email-address").on("click",(()=>{this.editingBasicDetails=true;this.mount()}));PrimaryInfoCards.mount("#contact-primary-info-cards",{contact:contact,getContact:getContact,updateContact:updateContact});SecondaryInfoCards.mount("#more-info-cards",{contact:contact,getContact:getContact,updateContact:updateContact});tabs("#main-stuff",{tabClassName:"tab",contentClassName:"gh-panel has-tabs",tabWrapClassName:"gh-panel-tabs",curTab:this.curTab??"notes",onTabbed:tab=>this.curTab=tab,tabs:[{id:"notes",name:__("Notes","groundhogg"),content:()=>`<div id="notes-here" class="inside"></div>`,onMount:()=>{Groundhogg.noteEditor("#notes-here",{object_id:contact.ID,object_type:"contact",title:""})}},{id:"activity",name:__("Activity","groundhogg"),content:()=>`<div id="activity-here" class="inside"></div>`,onMount:()=>{Promise.all([ActivityStore.fetchItems({contact_id:this.contact.ID,limit:50}),EventsStore.fetchItems({contact_id:this.contact.ID,limit:50,orderby:"time",order:"DESC"})]).then((()=>{let allActivities=[...ActivityStore.getItems().map((a=>({...a,type:"activity",time:a.data.timestamp}))),...EventsStore.getItems().map((e=>({...e,type:"event",time:e.data.time})))].sort(((a,b)=>a.time-b.time));ActivityTimeline.mount("#activity-here",allActivities)}))}},{id:"emails",name:__("Emails","groundhogg"),content:()=>`<div id="emails-here" class="inside"></div>`,onMount:()=>{}}]})}};$((()=>{ContactRecord.mount()}))})(jQuery);