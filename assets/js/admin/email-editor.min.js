(function($){const{copyObject:copyObject,select:select,input:input,tinymceElement:tinymceElement,specialChars:specialChars,inputWithReplacementsAndEmojis:inputWithReplacementsAndEmojis}=Groundhogg.element;const{post:post,get:get,patch:patch,routes:routes}=Groundhogg.api;const EmailEditor=({selector:selector,email:email,onChange:onChange=email=>{},onCommit:onCommit=email=>{}})=>({selector:selector,email:copyObject(email),origEmail:copyObject(email),$el:$(selector),undoStates:[],redoStates:[],edited:{data:{},meta:{}},components:{editor:function(){return`
          <div id="email-editor-header">
              ${this.components.header.call(this)}
          </div>
          <div id="email-editor-body">
            <div id="email-editor-main">
              <div id="email-editor-content">
                  ${this.components.content.call(this)}
              </div>
              <div id="email-editor-controls">
                  ${this.components.controls.call(this)}
              </div>
            </div>
            <div id="email-editor-sidebar">
                ${this.components.sidebar.call(this)}
            </div>
          </div>
        `},header:function(){return`
          header
        `},content:function(){const fromOptions={};Groundhogg.filters.owners.forEach(owner=>{fromOptions[owner.ID]=`${owner.data.display_name} (${owner.data.user_email})`});return`
          <p>
            <label class="row-label">Send this email from...</label>
            ${select({id:"from-user",name:"form_user"},fromOptions,this.email.data.from_user)}
				  </p>
				  <p>
				  <label class="row-label">Replies are sent to...</label>
				  ${input({id:"reply-to",name:"reply_to",value:this.email.meta.reply_to_override})}
          </p>
          <p>
          <label>Subject:</label>
					  ${inputWithReplacementsAndEmojis({name:"subject",placeholder:"Subject line..."})}
          </p>
        `},sidebar:function(){return`
          sidebar
        `},controls:function(){return`
          controls
        `},inspector:function(){}},autoSaveChanges:function(){this.saveUndoState();post(`${routes.v4.emails}/${this.email.ID}/meta`,{edited:this.edited})},commitChanges:function(){patch(`${routes.v4.emails}/${this.email.ID}`,{data:this.edited.data,meta:this.edited.meta}).then(d=>{this.loadEmail(d.item);onCommit(this.email)})},updateEmailData:function(newData){this.edited.data={...this.email.edited.data,...newData};this.autoSaveChanges()},updateEmailMeta:function(newMeta){this.edited.meta={...this.email.edited.meta,...newMeta};this.autoSaveChanges();onChange(this.edited,this.email)},render:function(){return this.components.editor.call(this)},mount:function(){console.log("Hello World!");this.loadEmail(this.email);this.$el.html(this.render());this.onMount()},loadEmail:function(email){console.log(email);this.email=copyObject(email);if(email.meta.edited){this.edited=copyObject(email.meta.edited)}else{this.edited=copyObject(email)}},onMount:function(){},currentState:function(){const{email:email}=this;return{email:copyObject(email)}},saveUndoState:function(){this.undoStates.push(this.currentState())},undo:function(){var lastState=this.undoStates.pop();if(!lastState){return}this.redoStates.push(this.currentState());Object.assign(this,lastState);this.render()},redo:function(){var lastState=this.redoStates.pop();if(!lastState){return}this.undoStates.push(this.currentState());Object.assign(this,lastState);this.render()}});Groundhogg.EmailEditor=EmailEditor})(jQuery);