(function($){const{copyObject,select,input,tinymceElement,specialChars,breadcrumbs,improveTinyMCE,inputWithReplacementsAndEmojis,inputWithReplacements,inputRepeaterWidget,textarea,isValidEmail,adminPageURL,modal,tooltip,dialog,loadingDots,moreMenu,objectEquals,toggle,icons,codeEditor,confirmationModal,savingModal,dangerConfirmationModal}=Groundhogg.element;const{post,get,patch,delete:apiDelete,routes}=Groundhogg.api;const{user_test_email}=Groundhogg;const{emails:EmailsStore,campaigns:CampaignsStore}=Groundhogg.stores;const{campaignPicker}=Groundhogg.pickers;const{__,_x,_n,_nx,sprintf}=wp.i18n;const setFrameContent=(frame,content)=>{var blob=new Blob([content],{type:"text/html; charset=utf-8"});frame.src=URL.createObjectURL(blob)};const DesignTemplates=[{id:"boxed",name:__("Boxed"),settings:({width:width=640,alignment:alignment="left"})=>{return`
            <div class="gh-rows-and-columns">
                <div class="row">
                    <div class="col">
                        <label class="full-width">${__("Email Width")}</label>
                    </div>
                    <div class="col">
                        ${input({type:"number",value:width,id:"template-width"})}
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label class="">${__("Alignment:","groundhogg")}</label>
                    </div>
                    <div class="col">
                        <div class="gh-input-group">
                            <button id="align-left" data-alignment="left"
                                    class="change-alignment gh-button ${alignment==="left"?"primary":"secondary"}">
                                ${icons.alignLeft}
                            </button>
                            <button id="align-center" data-alignment="center"
                                    class="change-alignment gh-button ${alignment==="center"?"primary":"secondary"}">
                                ${icons.alignCenter}
                            </button>
                        </div>
                    </div>
                </div>
            </div>`},onMount:(settings,updateSetting)=>{$("#template-width").on("change input",e=>{updateSetting({width:e.currentTarget.value})});$(".change-alignment").on("click",e=>{updateSetting({alignment:e.currentTarget.dataset.alignment},true);$("#"+e.currentTarget.id).focus()})},template:({settings,content})=>{const{width:width=640,alignment:alignment="left"}=settings;return`<div class="template-boxed ${alignment}" style="max-width: ${width}px">${content}</div>`}},{id:"full_width",name:__("Full-Width"),settings:()=>{return""},template:({content})=>{return`<div class="template-full-width">${content}</div>`}},{id:"framed",name:__("Framed"),settings:({width:width=640,logo:logo="",logo_width:logo_width=360})=>{return`
            <div class="gh-rows-and-columns">
                <div class="row">
                    <div class="col">
                        <label class="full-width">${__("Email Width")}</label>
                    </div>
                    <div class="col">
                        ${input({type:"number",value:width,id:"template-width"})}
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label for="image-src" class="control-label">${__("Logo","groundhogg")}</label>
                        <div class="gh-input-group">
                            ${input({type:"text",id:"template-logo",value:logo,className:"full-width",name:"logo"})}
                            <button class="gh-button secondary icon" id="select-image">
                                ${icons.image}
                            </button>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label class="full-width">${__("Logo Width")}</label>
                    </div>
                    <div class="col">
                        ${input({type:"number",value:logo_width,id:"logo-width"})}
                    </div>
                </div>
            </div>`},onMount:(settings,updateSetting)=>{$("#template-width").on("change",e=>{updateSetting({width:e.target.value},true)});$("#logo-width").on("change",e=>{updateSetting({logo_width:e.target.value},true)});$("#template-logo").on("change",e=>{updateSetting({logo:e.target.value},true)});var file_frame;$("#select-image").on("click",event=>{var picker=$(this);event.preventDefault();if(file_frame){file_frame.open();return}file_frame=wp.media.frames.file_frame=wp.media({title:__("Select a image to upload"),button:{text:__("Use this image")},multiple:false});file_frame.on("select",function(){var attachment=file_frame.state().get("selection").first().toJSON();updateSetting({logo:attachment.url},true)});file_frame.open()})},template:({settings,content})=>{const{width:width=640,logo,logo_width:logo_width=360}=settings;return`
            <div class="template-framed">
                ${logo?`<img class="template-logo" src="${logo}" alt="logo" title="logo" style="max-width: ${logo_width}px"/>`:""}
                <div class="inner-content" style="max-width: ${width}px">
                    ${content}
                </div>
            </div>`}}];const EmailEditor=({selector,email,onChange:onChange=email=>{},onCommit:onCommit=email=>{},breadcrumbs:crumbs=["Emails"],onHeaderMount:onHeaderMount=()=>{},afterPublishActions:afterPublishActions=""})=>({selector:selector,email:copyObject(email),origEmail:copyObject(email),$el:$(selector),undoStates:[],redoStates:[],edited:{data:{},meta:{}},components:{editor(){return`
            <div id="email-editor">
                <div id="email-editor-header">
                    ${this.components.header.call(this)}
                </div>
                <div id="email-editor-body">

                </div>
            </div>
        `},header(){const titleEdit=()=>{return input({id:"email-title-edit",name:"email-title",value:this.email.data.title})};const titleDisplay=()=>{return`<span id="email-title">${specialChars(this.email.data.title)}</span><span class="dashicons dashicons-edit"></span>`};return`
            <div class="title-wrap">
                <h1 class="breadcrumbs">${breadcrumbs([...crumbs,this.isEditingTitle?titleEdit():titleDisplay()])}</h1>
            </div>
            <div class="actions">
                <div id="email-editor-sidebar-controls" class="gh-button-group">
                    <button id="send-test" class="gh-button secondary">${__("Send test email","groundhogg")}
                    </button>
                    <button data-device="mobile" class="show-preview gh-button secondary">
                        ${icons.smartphone}
                    </button>
                    <button data-device="desktop" class="show-preview gh-button secondary">
                        ${icons.desktop}
                    </button>
                </div>
                <div class="undo-and-redo">
                    <button class="redo dashicon-button" ${this.redoStates.length?"":"disabled"}><span
                            class="dashicons dashicons-redo"></span></button>
                    <button class="undo dashicon-button" ${this.undoStates.length?"":"disabled"}><span
                            class="dashicons dashicons-undo"></span></button>
                </div>
                <div class="publish-actions">
                    ${this.email.data.status==="ready"?`<button id="to-draft" class="gh-button danger text">Back to draft</button>
					<button id="commit" class="gh-button primary" ${this.hasChanges()?"":"disabled"}>Update</button>`:`<button id="commit" class="gh-button action">Publish</button>`}
                </div>
                <button id="email-actions" class="gh-button secondary text icon">${icons.verticalDots}</button>
                ${afterPublishActions}
            </div>
        `},content(){const{subject:subject="",pre_header:pre_header=""}=this.edited.data;return`
            <div class="inline-label">
                <label for="subject">Subject:</label>
                ${inputWithReplacementsAndEmojis({id:"subject",name:"subject",placeholder:"Subject line...",value:subject})}
            </div>
            <div class="inline-label">
                <label for="preview-text">Preview:</label>
                ${inputWithReplacementsAndEmojis({id:"preview-text",name:"pre_header",placeholder:"Preview text...",value:pre_header})}
            </div>
        `},contentEditor(){const{content:content=""}=this.edited.data;return`
            <div class="email-content-wrap">
                ${textarea({id:"content",className:"wp-editor-area",value:this.edited.data.content})}
            </div>`},controls(){return`
            <h3>Custom email headers</h3>
            <div id="email-editor-advanced-headers">
            </div>
        `},inspector(){}},autoSaveTimeout:null,abortController:null,autoSaveChanges(){if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}this.autoSaveTimeout=setTimeout(()=>{this.autoSaveTimeout=null;this.abortController=new AbortController;const{signal}=this.abortController;EmailsStore.patch(this.email.ID,{meta:{edited:this.edited}},{signal:signal}).then(e=>{this.loadEmail(e);this.abortController=null})},3e3)},hasChanges(){const ignoreProps=["status"];for(let prop in this.edited.data){if(ignoreProps.includes(prop)){continue}if(this.email.data[prop]!==this.edited.data[prop]){return true}}return false},update(data){return EmailsStore.patch(this.email.ID,data).then(e=>{this.loadEmail(e);return e}).catch(e=>{dialog({type:"error",message:__("Something went wrong","groundhogg")})})},commitChanges(){if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}else if(this.abortController){this.abortController.abort()}$("#commit").text(__("Updating","groundhogg")).prop("disabled",true);const{stop}=loadingDots("#commit");return EmailsStore.patch(this.email.ID,{data:{...this.edited.data,status:"ready",title:this.email.data.title},meta:{...this.edited.meta,edited:{...this.edited}}}).then(e=>{this.loadEmail(e);this.mount();onCommit(e);stop();dialog({message:__("Email updated!","groundhogg")})}).catch(e=>{dialog({type:"error",message:__("Something went wrong","groundhogg")})})},updateEmailData(newData){this.updateEmail(newData,{})},updateEmailMeta(newMeta){this.updateEmail({},newMeta)},updateEmail(newData={},newMeta={}){this.saveUndoState();this.edited.data={...this.edited.data,...newData};this.edited.meta={...this.edited.meta,...newMeta};this.autoSaveChanges();onChange(this.edited,this.email)},render(){return this.components.editor.call(this)},mount(){if(this.mounted){this.demount()}this.mounted=true;this.loadEmail(this.email);this.$el.html(this.render());this.onMount()},remount(){if(this.mounted){this.demount()}this.mounted=true;this.$el.html(this.render());this.onMount()},loadEmail(email){this.email=copyObject(email);if(email.meta.edited){this.edited=copyObject(email.meta.edited)}else{this.edited=copyObject(email)}},onMount(){let saveTimer;const handleContentOnChange=content=>{clearTimeout(saveTimer);saveTimer=setTimeout(()=>{this.updateEmailData({content:content});mountHeader()},150)};const mountHeader=()=>{$("#email-editor-header").html(this.components.header.call(this));headerMounted()};const headerMounted=()=>{const handleOnSelect=key=>{switch(key){case"campaigns":const campaignContent=()=>{return`
                    <div class="manage-campaigns" style="width: 400px">
                        <h2>${__("Add this email to one or more campaigns...","groundhogg")}</h2>
                        <p>${select({id:"manage-campaigns",multiple:true})}</p>
                        <p>
                            ${__("Campaigns are a tool to group marketing assets for reporting. Visit the dashboard to see an analytics breakdown by campaign.","groundhogg")}</p>
                    </div>`};modal({content:campaignContent()});campaignPicker("#manage-campaigns",true,items=>{CampaignsStore.itemsFetched(items)},{placeholder:__("Select one or more campaigns","groundhogg"),width:"100%",data:[{id:"",text:""},...this.email.campaigns.map(c=>({...c,id:c.ID,text:c.data.name,selected:true}))]}).on("select2:select",async e=>{let campaign=e.params.data;if(!CampaignsStore.hasItem(campaign.id)){campaign=await CampaignsStore.post({data:{name:campaign.id}}).then(c=>({id:c.ID,name:c.data.name}))}post(`${routes.v4.emails}/${this.email.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then(r=>this.loadEmail(r.item))}).on("select2:unselect",async e=>{let campaign=e.params.data;apiDelete(`${routes.v4.emails}/${this.email.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then(r=>this.loadEmail(r.item))});break;case"export":window.location.href=this.email.links.export;break;case"share":const sharingModalOnMount=()=>{$("#sharing-enabled").on("change",({target})=>{this.update({meta:{sharing:target.checked?"enabled":"disabled"}}).then(()=>{setShareContent(sharingModalContent());sharingModalOnMount()})})};const sharingModalContent=()=>{if(this.email.meta.sharing!=="enabled"){return`
                      <div class="share">
                          <h2>${__("Sharing is not enabled","groundhogg")}</h2>
                          <p>${__("Enable sharing?","groundhogg")} ${toggle({name:"sharing",id:"sharing-enabled",checked:this.email.meta.sharing==="enabled",onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}</p>
                          <p>
                              ${__("When sharing is enabled this email can be downloaded via a private link.","groundhogg")}</p>
                      </div>`}else{return`
                      <div class="share">
                          <h2>${__("Share this email","groundhogg")}</h2>
                          ${input({type:"url",className:"code full-width",readonly:true,value:this.email.links.export,onfocus:"this.select()"})}
                          <p>
                              ${__("Anyone with the above link will be able to download a copy of this email.","groundhogg")}</p>
                          <p>${__("Enable sharing?","groundhogg")} ${toggle({name:"sharing",id:"sharing-enabled",checked:this.email.meta.sharing==="enabled",onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}</p>
                      </div>`}};const{setContent:setShareContent}=modal({content:sharingModalContent()});sharingModalOnMount();break;case"reports":window.location.href=this.email.links.report;break;case"delete":dangerConfirmationModal({alert:`<p><b>${__("Delete this email?","groundhogg")}</b></p>
                <p>${__("Any associated events and reports will also be deleted.","groundhogg")}</p>
                <p>${__("This action cannot be undone. Are you sure?","groundhogg")}</p>`,confirmText:__("Delete"),onConfirm:()=>{EmailsStore.delete(this.email.ID).then(()=>{dialog({message:__("Email deleted!","groundhogg")});window.location.href=adminPageURL("gh_emails")})}});break;case"archive":dangerConfirmationModal({alert:`
                    <p>
                        <b>${_x("Archive this funnel?","archive is representing a verb in this phrase","groundhogg")}</b>
                    </p>
                    <p>
                        ${__("Any active contacts will be removed from the funnel permanently. The funnel will become un-editable until restored.","groundhogg")}</p>`,confirmText:_x("Archive","a verb meaning to add an item to an archive","groundhogg"),onConfirm:()=>{this.update({data:{status:"archived"}}).then(()=>{dialog({message:__("Funnel Archived","groundhogg")});window.location.href=adminPageURL("gh_funnels")})}});break;case"send":if(this.email.data.status!=="ready"){confirmationModal({alert:`<p>${__("Before this email can be sent it must be published. Would you like to publish it now?","groundhogg")}<p>`,confirmText:__("Publish"),onConfirm:()=>{this.commitChanges().then(()=>{handleOnSelect("send")})}});break}const{close}=modal({content:`<div id="gh-broadcast-form" style="width: 400px"></div>`});Groundhogg.SendBroadcast("#gh-broadcast-form",{email:this.email},{onScheduled:()=>{dialog({message:__("Broadcast scheduled")});close()}});break}};$("#email-actions").on("click",e=>{moreMenu(e.currentTarget,{onSelect:handleOnSelect,items:[{key:"campaigns",text:`${icons.campaign} ${_x("Campaigns","noun meaning collection of marketing materials","groundhogg")}`},{key:"export",text:`${icons.export} ${_x("Export","a verb meaning to download","groundhogg")}`},{key:"share",text:`${icons.share} ${_x("Share","a verb meaning to share something","groundhogg")}`},{key:"reports",text:`${icons.chart} ${__("Reports","groundhogg")}`},{key:"send",text:`${icons.megaphone} ${__("Send Broadcast","groundhogg")}`},{key:"archive",text:`${icons.folder} <span
                        class="gh-text danger">${_x("Archive","a verb meaning to add an item to an archive","groundhogg")}</span>`},{key:"delete",text:`${icons.trash} <span class="gh-text danger">${__("Delete")}</span>`}]})});$(".show-preview").on("click",e=>{const device=e.currentTarget.dataset.device;modal({dialogClasses:"no-padding",content:`<iframe id="preview" class="${device}"></div>`});const{built,edited_preview}=this.email.context;setFrameContent($("#preview")[0],edited_preview||built)});$("#send-test").on("click",e=>{if(!this.testEmailAddress){this.testEmailAddress=user_test_email}const modalContent=(isSending=false)=>{return`<h2>Send a test email to the following address...</h2>
            <div class="test-email-address-wrap">
                ${input({type:"email",id:"email-address",name:"email-address",placeholder:"Your email...",disabled:isSending,value:this.testEmailAddress})}
                <button id="initiate-test" class="gh-button primary" ${isSending?"disabled":""}>
                    <span>${isSending?"Sending":"Send"}</span>
                </button>
            </div>`};const{$modal,close:closeModal,setContent}=modal({content:modalContent()});$("#email-address").autocomplete({source:Groundhogg.filters.owners.map(u=>u.data.user_email),change:e=>{this.testEmailAddress=e.target.value;mountHeader()}});$("#initiate-test").on("click",()=>{setContent(modalContent(true));const{stop:stopDots}=loadingDots("#initiate-test");post(`${routes.v4.emails}/${this.email.ID}/test`,{to:this.testEmailAddress,edited:this.edited}).then(r=>{stopDots();setContent(`<p>Test sent to <b>${this.testEmailAddress}</b></p>`);setTimeout(closeModal,2e3)})})});$("#commit").on("click",()=>{this.commitChanges()});$("#to-draft").on("click",()=>{dangerConfirmationModal({alert:`<p>${__("Once in draft mode this email cannot be sent. Are you sure?","groundhogg")}</p>`,confirmText:__("Unpublish"),onConfirm:()=>{const{close}=savingModal();EmailsStore.patch(this.email.ID,{data:{status:"draft"}}).then(e=>{this.loadEmail(e);close();mountHeader()})}})});$(".undo-and-redo .undo").on("click",e=>{this.undo();$(".undo-and-redo .undo").focus()});tooltip(".undo-and-redo .undo",{content:__("Undo"),position:"bottom"});$(".undo-and-redo .redo").on("click",e=>{this.redo();$(".undo-and-redo .redo").focus()});tooltip(".undo-and-redo .redo",{content:__("Redo"),position:"bottom"});if(!this.isEditingTitle){$("#email-title").on("click",e=>{this.isEditingTitle=true;mountHeader()})}else{$("#email-title-edit").focus().on("change blur keydown",e=>{if(e.type==="keydown"&&e.key!=="Enter"){return}const title=e.target.value;this.email.data.title=title;this.isEditingTitle=false;mountHeader();EmailsStore.patch(this.email.ID,{data:{title:title}}).then(e=>{this.loadEmail(e)})})}onHeaderMount()};const emailControls=()=>{const message_typeOptions={marketing:__("Marketing","groundhogg"),transactional:__("Transactional","groundhogg")};const{reply_to_override:reply_to_override="",alignment:alignment="left",message_type:message_type="marketing",alt_body:alt_body="",use_custom_alt_body:use_custom_alt_body=false,template:template="boxed"}=this.edited.meta;return`
            <div class="display-flex column gap-20">
                <div class="gh-panel">
                    <div class="inside">
                        <p>
                            <label class="">${__("Send this email from:","groundhogg")}</label>
                            ${select({id:"from-user",name:"from_user"})}
                        </p>
                        <p>
                            <label class="">${__("Replies are sent to:","grounhogg")}</label>
                            ${input({id:"reply-to",className:"full-width",name:"reply_to_override",value:reply_to_override})}
                        </p>
                        <div id="email-editor-sidebar-options">
                            <div id="email-editor-sidebar-message_type">
                                <label class="">${__("Message type:")}</label>
                                <div class="gh-input-group">
                                    ${select({id:"message-type",name:"message_type"},message_typeOptions,message_type)}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="gh-panel">
                    <div class="gh-panel-header">
                        <h2>${__("Template","groundhogg")}</h2>
                        <button class="toggle-indicator"></button>
                    </div>
                    <div class="inside">
                        <div class="gh-rows-and-columns">
                            <div class="row">
                                <div class="col">
                                    <label>${__("Select Template Design")}</label>
                                    ${select({id:"template"},DesignTemplates.map(t=>({value:t.id,text:t.name})),template)}
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    ${DesignTemplates.find(t=>t.id===template).settings(this.edited.meta)}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="gh-panel">
                    <div class="gh-panel-header">
                        <h2>${__("Advanced","groundhogg")}</h2>
                        <button class="toggle-indicator"></button>
                    </div>
                    <div class="inside">
                        <div class="gh-rows-and-columns">
                            <div class="gh-row">
                                <div class="gh-col">
                                    <div class="space-between">
                                        <label>${__("Send a plain text version","groundhogg")}</label>
                                        ${toggle({id:"toggle-plain-text",onLabel:__("Yes"),offLabel:__("No"),checked:use_custom_alt_body})}
                                    </div>
                                </div>
                            </div>
                            <div class="gh-row">
                                <div class="gh-col">
                                    ${use_custom_alt_body?`<button class="gh-button secondary" id="edit-plain-text">${__("Edit plain text version","groundhogg")}</button>`:""}
                                </div>
                            </div>
                            <div class="gh-row">
                                <div class="gh-col">
                                    <button class="gh-button secondary" id="edit-custom-headers">${__("Edit custom email headers","groundhogg")}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `};const emailControlsOnMount=()=>{const{template:template="boxed"}=this.edited.meta;$("#toggle-plain-text").on("change",e=>{this.updateEmailMeta({use_custom_alt_body:e.target.checked});this.remount()});$("#edit-plain-text").on("click",e=>{const altBodyEditor=()=>{return`
                <div class="space-between">
                    <h3>${__("Edit plain text version","groundhogg")}</h3>
                    <button class="gh-button secondary" id="generate-alt-body">${__("Generate","groundhogg")}
                    </button>
                </div>
                ${textarea({value:this.edited.meta.alt_body||"",id:"plain-text-copy",style:{width:500,height:500}})}`};modal({content:altBodyEditor(),onOpen:({setContent})=>{$("#generate-alt-body").on("click",()=>{post(`${routes.v4.emails}/generate-alt-body`,{content:this.edited.data.content}).then(({alt_body})=>{this.updateEmailMeta({alt_body:alt_body});setContent(altBodyEditor())})});$("#plain-text-copy").on("change input",e=>{this.updateEmailMeta({alt_body:e.target.value})})}})});$("#edit-custom-headers").on("click",e=>{modal({content:`
                <h2>${__("Custom Email Headers","groundhogg")}</h2>
                <div id="email-editor-advanced-headers"></div>`,onOpen:({setContent})=>{const getHeadersArray=()=>{const{custom_headers:custom_headers={}}=this.edited.meta;const rows=[];Object.keys(custom_headers).forEach(key=>{rows.push([key,custom_headers[key]])});if(!rows.length){rows.push(["",""])}return rows};const headersEditor=inputRepeaterWidget({selector:"#email-editor-advanced-headers",rows:getHeadersArray(),cellProps:[{placeholder:"Header..."},{placeholder:"Value..."}],cellCallbacks:[input,inputWithReplacements],onChange:rows=>{const headers={};rows.forEach(([key,value])=>{headers[key]=value});this.updateEmailMeta({custom_headers:headers});mountHeader()}});headersEditor.mount()}})});const{from_user:from_user=0}=this.edited.data;$("#from-user").select2({data:Groundhogg.filters.owners.map(owner=>({text:owner.data.user_email,id:owner.ID,selected:owner.ID==from_user}))}).on("change",e=>{this.updateEmailData({from_user:parseInt(e.target.value)});mountHeader()});$("#message-type").on("change",e=>{this.updateEmailMeta({message_type:e.target.value});mountHeader()});$("#reply-to").autocomplete({change:e=>{this.updateEmailMeta({reply_to_override:e.target.value});mountHeader()},source:["{owner_email}",...Groundhogg.filters.owners.map(u=>u.data.user_email)]});$("#template").on("change",e=>{this.updateEmailMeta({template:e.target.value});this.remount()});try{DesignTemplates.find(t=>t.id===template).onMount(this.edited.meta,(newMeta,reRender)=>{this.updateEmailMeta(newMeta);if(reRender){this.remount()}})}catch(e){}};if(email.meta.type!=="html"){const{template:template="boxed"}=this.edited.meta;Groundhogg.EmailBlockEditor("#email-editor-body",{email:this.edited,template:DesignTemplates.find(t=>t.id===template).template,scrollDepth:this.scrollDepth,onScroll:y=>{this.scrollDepth=y},onMount:()=>{$("#subject, #preview-text").on("change",e=>{this.updateEmailData({[e.target.name]:e.target.value});mountHeader()})},emailControls:()=>emailControls(),emailControlsOnMount:()=>emailControlsOnMount(),onChange:({css,html,blocks})=>{this.updateEmail({content:html},{css:css,blocks:blocks});mountHeader()}}).init()}else{let UI=`
            <div class="display-flex gap-20" style="padding: 0 20px;">
                <div class="gh-panel full-width">
                    ${textarea({id:"content"})}
                </div>
                <div>
                    ${emailControls()}
                </div>
            </div>`;$("#email-editor-body").html(UI);this.codemirror=codeEditor({selector:"#content",initialContent:this.edited.data.content,height:"80vh",onChange:content=>{this.updateEmail({content:content});mountHeader()}}).editor;emailControlsOnMount()}headerMounted()},demount(){this.onDemount()},onDemount(){if(this.edited.meta.type==="html"){this.codemirror.toTextArea()}else{wp.editor.remove("content")}},currentState(){const{email,edited}=this;return{email:copyObject(email),edited:copyObject(edited)}},saveUndoState(){this.clearRedoStates();this.undoStates.push(this.currentState())},clearRedoStates(){this.redoStates=[]},undo(){var lastState=this.undoStates.pop();if(!lastState){return}this.redoStates.push(this.currentState());Object.assign(this,lastState);this.remount()},redo(){var lastState=this.redoStates.pop();if(!lastState){return}this.undoStates.push(this.currentState());Object.assign(this,lastState);this.remount()}});Groundhogg.EmailEditor=EmailEditor})(jQuery);