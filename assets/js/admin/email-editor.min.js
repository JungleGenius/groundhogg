(function($){const{copyObject:copyObject}=Groundhogg.element;const{post:post,get:get,patch:patch,routes:routes}=Groundhogg.api;const EmailEditor=({selector:selector,email:email,onChange:onChange=email=>{},onCommit:onCommit=email=>{}})=>({selector:selector,email:copyObject(email),origEmail:copyObject(email),$el:$(selector),undoStates:[],redoStates:[],edited:{data:{},meta:{}},components:{editor:function({data:data,meta:meta,ID:ID}){},header:function({}){},content:function({subject:subject}){},sidebar:function({}){},controls:function(){},inspector:function(){}},autoSaveChanges:function(){this.saveUndoState();post(`${routes.v4.emails}/${this.email.ID}/meta`,{edited:this.edited})},commitChanges:function(){patch(`${routes.v4.emails}/${this.email.ID}`,{data:this.edited.data,meta:this.edited.meta}).then(d=>{this.loadEmail(d.item);onCommit(this.email)})},updateEmailData:function(newData){this.edited.data={...this.email.edited.data,...newData};this.autoSaveChanges()},updateEmailMeta:function(newMeta){this.edited.meta={...this.email.edited.meta,...newMeta};this.autoSaveChanges();onChange(this.edited,this.email)},render:function(){return this.components.editor(this.edited)},mount:function(){console.log("Hello World!");this.loadEmail(this.email);this.$el.html(this.render());this.onMount()},loadEmail:function(email){console.log(email);this.email=copyObject(email);if(email.meta.edited){this.edited=copyObject(email.meta.edited)}else{this.edited=copyObject(email)}},onMount:function(){},currentState:function(){const{email:email}=this;return{email:copyObject(email)}},saveUndoState:function(){this.undoStates.push(this.currentState())},undo:function(){var lastState=this.undoStates.pop();if(!lastState){return}this.redoStates.push(this.currentState());Object.assign(this,lastState);this.render()},redo:function(){var lastState=this.redoStates.pop();if(!lastState){return}this.undoStates.push(this.currentState());Object.assign(this,lastState);this.render()}});Groundhogg.EmailEditor=EmailEditor})(jQuery);