(function($){const{copyObject:copyObject,select:select,input:input,tinymceElement:tinymceElement,specialChars:specialChars,breadcrumbs:breadcrumbs,improveTinyMCE:improveTinyMCE,inputWithReplacementsAndEmojis:inputWithReplacementsAndEmojis,inputWithReplacements:inputWithReplacements,inputRepeaterWidget:inputRepeaterWidget,textarea:textarea,isValidEmail:isValidEmail,adminPageURL:adminPageURL,modal:modal,tooltip:tooltip,dialog:dialog,loadingDots:loadingDots,moreMenu:moreMenu,objectEquals:objectEquals,toggle:toggle,icons:icons,codeEditor:codeEditor,confirmationModal:confirmationModal,savingModal:savingModal,dangerConfirmationModal:dangerConfirmationModal}=Groundhogg.element;const{post:post,get:get,patch:patch,delete:apiDelete,routes:routes}=Groundhogg.api;const{user_test_email:user_test_email}=Groundhogg;const{emails:EmailsStore,campaigns:CampaignsStore}=Groundhogg.stores;const{campaignPicker:campaignPicker}=Groundhogg.pickers;const{__:__,_x:_x,_n:_n,_nx:_nx,sprintf:sprintf}=wp.i18n;const setFrameContent=(frame,content)=>{var blob=new Blob([content],{type:"text/html; charset=utf-8"});frame.src=URL.createObjectURL(blob)};const EmailEditor=({selector:selector,email:email,onChange:onChange=(email=>{}),onCommit:onCommit=(email=>{}),breadcrumbs:crumbs=["Emails"],onHeaderMount:onHeaderMount=(()=>{}),afterPublishActions:afterPublishActions=""})=>({selector:selector,email:copyObject(email),origEmail:copyObject(email),$el:$(selector),undoStates:[],redoStates:[],edited:{data:{},meta:{}},components:{editor(){return`\n            <div id="email-editor">\n                <div id="email-editor-header">\n                    ${this.components.header.call(this)}\n                </div>\n                <div id="email-editor-body">\n\n                </div>\n            </div>\n        `},header(){const titleEdit=()=>input({id:"email-title-edit",name:"email-title",value:this.email.data.title});const titleDisplay=()=>`<span id="email-title">${specialChars(this.email.data.title)}</span><span class="dashicons dashicons-edit"></span>`;return`\n            <div class="title-wrap">\n                <h1 class="breadcrumbs">${breadcrumbs([...crumbs,this.isEditingTitle?titleEdit():titleDisplay()])}</h1>\n            </div>\n            <div class="actions">\n                <div class="undo-and-redo">\n                    <button class="redo dashicon-button" ${this.redoStates.length?"":"disabled"}><span\n                            class="dashicons dashicons-redo"></span></button>\n                    <button class="undo dashicon-button" ${this.undoStates.length?"":"disabled"}><span\n                            class="dashicons dashicons-undo"></span></button>\n                </div>\n                <div class="publish-actions">\n                    ${this.email.data.status==="ready"?`<button id="to-draft" class="gh-button danger text">Back to draft</button>\n\t\t\t\t\t<button id="commit" class="gh-button primary" ${this.hasChanges()?"":"disabled"}>Update</button>`:`<button id="commit" class="gh-button action">Publish</button>`}\n                </div>\n                <button id="email-actions" class="gh-button secondary text icon">${icons.verticalDots}</button>\n                ${afterPublishActions}\n            </div>\n        `},content(){const{subject:subject="",pre_header:pre_header=""}=this.edited.data;return`\n            <div class="inline-label">\n                <label for="subject">Subject:</label>\n                ${inputWithReplacementsAndEmojis({id:"subject",name:"subject",placeholder:"Subject line...",value:subject})}\n            </div>\n            <div class="inline-label">\n                <label for="preview-text">Preview:</label>\n                ${inputWithReplacementsAndEmojis({id:"preview-text",name:"pre_header",placeholder:"Preview text...",value:pre_header})}\n            </div>\n        `},contentEditor(){const{content:content=""}=this.edited.data;return`\n            <div class="email-content-wrap">\n                ${textarea({id:"content",className:"wp-editor-area",value:this.edited.data.content})}\n            </div>`},controls(){return`\n            <h3>Custom email headers</h3>\n            <div id="email-editor-advanced-headers">\n            </div>\n        `},inspector(){}},autoSaveTimeout:null,abortController:null,autoSaveChanges(){if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}this.autoSaveTimeout=setTimeout((()=>{this.autoSaveTimeout=null;this.abortController=new AbortController;const{signal:signal}=this.abortController;EmailsStore.patch(this.email.ID,{meta:{edited:this.edited}},{signal:signal}).then((e=>{this.loadEmail(e);this.abortController=null}))}),3e3)},hasChanges(){const ignoreProps=["status"];for(let prop in this.edited.data){if(ignoreProps.includes(prop)){continue}if(this.email.data[prop]!==this.edited.data[prop]){return true}}return false},update(data){return EmailsStore.patch(this.email.ID,data).then((e=>{this.loadEmail(e);return e})).catch((e=>{dialog({type:"error",message:__("Something went wrong","groundhogg")})}))},commitChanges(){if(this.autoSaveTimeout){clearTimeout(this.autoSaveTimeout)}else if(this.abortController){this.abortController.abort()}$("#commit").text(__("Updating","groundhogg")).prop("disabled",true);const{stop:stop}=loadingDots("#commit");return EmailsStore.patch(this.email.ID,{data:{...this.edited.data,status:"ready",title:this.email.data.title},meta:{...this.edited.meta,edited:{...this.edited}}}).then((e=>{this.loadEmail(e);this.mount();onCommit(e);stop();dialog({message:__("Email updated!","groundhogg")})})).catch((e=>{dialog({type:"error",message:__("Something went wrong","groundhogg")})}))},updateEmailData(newData){this.updateEmail(newData,{})},updateEmailMeta(newMeta){this.updateEmail({},newMeta)},updateEmail(newData={},newMeta={}){this.saveUndoState();this.edited.data={...this.edited.data,...newData};this.edited.meta={...this.edited.meta,...newMeta};this.autoSaveChanges();onChange(this.edited,this.email)},render(){return this.components.editor.call(this)},mount(){if(this.mounted){this.demount()}this.mounted=true;this.loadEmail(this.email);this.$el.html(this.render());this.onMount()},remount(){if(this.mounted){this.demount()}this.mounted=true;this.$el.html(this.render());this.onMount()},loadEmail(email){this.email=copyObject(email);if(email.meta.edited){this.edited=copyObject(email.meta.edited)}else{this.edited=copyObject(email)}},onMount(){let saveTimer;const handleContentOnChange=content=>{clearTimeout(saveTimer);saveTimer=setTimeout((()=>{this.updateEmailData({content:content});mountHeader()}),150)};const mountHeader=()=>{$("#email-editor-header").html(this.components.header.call(this));headerMounted()};const headerMounted=()=>{const handleOnSelect=key=>{switch(key){case"campaigns":const campaignContent=()=>`\n                    <div class="manage-campaigns" style="width: 400px">\n                        <h2>${__("Add this email to one or more campaigns...","groundhogg")}</h2>\n                        <p>${select({id:"manage-campaigns",multiple:true})}</p>\n                        <p>\n                            ${__("Campaigns are a tool to group marketing assets for reporting. Visit the dashboard to see an analytics breakdown by campaign.","groundhogg")}</p>\n                    </div>`;modal({content:campaignContent()});campaignPicker("#manage-campaigns",true,(items=>{CampaignsStore.itemsFetched(items)}),{placeholder:__("Select one or more campaigns","groundhogg"),width:"100%",data:[{id:"",text:""},...this.email.campaigns.map((c=>({...c,id:c.ID,text:c.data.name,selected:true})))]}).on("select2:select",(async e=>{let campaign=e.params.data;if(!CampaignsStore.hasItem(campaign.id)){campaign=await CampaignsStore.post({data:{name:campaign.id}}).then((c=>({id:c.ID,name:c.data.name})))}post(`${routes.v4.emails}/${this.email.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then((r=>this.loadEmail(r.item)))})).on("select2:unselect",(async e=>{let campaign=e.params.data;apiDelete(`${routes.v4.emails}/${this.email.ID}/relationships`,{other_id:campaign.id,other_type:"campaign"}).then((r=>this.loadEmail(r.item)))}));break;case"export":window.location.href=this.email.links.export;break;case"share":const sharingModalOnMount=()=>{$("#sharing-enabled").on("change",(({target:target})=>{this.update({meta:{sharing:target.checked?"enabled":"disabled"}}).then((()=>{setShareContent(sharingModalContent());sharingModalOnMount()}))}))};const sharingModalContent=()=>{if(this.email.meta.sharing!=="enabled"){return`\n                      <div class="share">\n                          <h2>${__("Sharing is not enabled","groundhogg")}</h2>\n                          <p>${__("Enable sharing?","groundhogg")} ${toggle({name:"sharing",id:"sharing-enabled",checked:this.email.meta.sharing==="enabled",onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}</p>\n                          <p>\n                              ${__("When sharing is enabled this email can be downloaded via a private link.","groundhogg")}</p>\n                      </div>`}else{return`\n                      <div class="share">\n                          <h2>${__("Share this email","groundhogg")}</h2>\n                          ${input({type:"url",className:"code full-width",readonly:true,value:this.email.links.export,onfocus:"this.select()"})}\n                          <p>\n                              ${__("Anyone with the above link will be able to download a copy of this email.","groundhogg")}</p>\n                          <p>${__("Enable sharing?","groundhogg")} ${toggle({name:"sharing",id:"sharing-enabled",checked:this.email.meta.sharing==="enabled",onLabel:_x("YES","toggle switch","groundhogg"),offLabel:_x("NO","toggle switch","groundhogg")})}</p>\n                      </div>`}};const{setContent:setShareContent}=modal({content:sharingModalContent()});sharingModalOnMount();break;case"reports":window.location.href=this.email.links.report;break;case"delete":dangerConfirmationModal({alert:`<p><b>${__("Delete this email?","groundhogg")}</b></p>\n                <p>${__("Any associated events and reports will also be deleted.","groundhogg")}</p>\n                <p>${__("This action cannot be undone. Are you sure?","groundhogg")}</p>`,confirmText:__("Delete"),onConfirm:()=>{EmailsStore.delete(this.email.ID).then((()=>{dialog({message:__("Email deleted!","groundhogg")});window.location.href=adminPageURL("gh_emails")}))}});break;case"archive":dangerConfirmationModal({alert:`\n                    <p>\n                        <b>${_x("Archive this funnel?","archive is representing a verb in this phrase","groundhogg")}</b>\n                    </p>\n                    <p>\n                        ${__("Any active contacts will be removed from the funnel permanently. The funnel will become un-editable until restored.","groundhogg")}</p>`,confirmText:_x("Archive","a verb meaning to add an item to an archive","groundhogg"),onConfirm:()=>{this.update({data:{status:"archived"}}).then((()=>{dialog({message:__("Funnel Archived","groundhogg")});window.location.href=adminPageURL("gh_funnels")}))}});break;case"send":if(this.email.data.status!=="ready"){confirmationModal({alert:`<p>${__("Before this email can be sent it must be published. Would you like to publish it now?","groundhogg")}<p>`,confirmText:__("Publish"),onConfirm:()=>{this.commitChanges().then((()=>{handleOnSelect("send")}))}});break}const{close:close}=modal({content:`<div id="gh-broadcast-form" style="width: 400px"></div>`});Groundhogg.SendBroadcast("#gh-broadcast-form",{email:this.email},{onScheduled:()=>{dialog({message:__("Broadcast scheduled")});close()}});break}};$("#email-actions").on("click",(e=>{moreMenu(e.currentTarget,{onSelect:handleOnSelect,items:[{key:"campaigns",text:`${icons.campaign} ${_x("Campaigns","noun meaning collection of marketing materials","groundhogg")}`},{key:"export",text:`${icons.export} ${_x("Export","a verb meaning to download","groundhogg")}`},{key:"share",text:`${icons.share} ${_x("Share","a verb meaning to share something","groundhogg")}`},{key:"reports",text:`${icons.chart} ${__("Reports","groundhogg")}`},{key:"send",text:`${icons.megaphone} ${__("Send Broadcast","groundhogg")}`},{key:"archive",text:`${icons.folder} <span\n                        class="gh-text danger">${_x("Archive","a verb meaning to add an item to an archive","groundhogg")}</span>`},{key:"delete",text:`${icons.trash} <span class="gh-text danger">${__("Delete")}</span>`}]})}));$("#commit").on("click",(()=>{this.commitChanges()}));$("#to-draft").on("click",(()=>{dangerConfirmationModal({alert:`<p>${__("Once in draft mode this email cannot be sent. Are you sure?","groundhogg")}</p>`,confirmText:__("Unpublish"),onConfirm:()=>{const{close:close}=savingModal();EmailsStore.patch(this.email.ID,{data:{status:"draft"}}).then((e=>{this.loadEmail(e);close();mountHeader()}))}})}));$(".undo-and-redo .undo").on("click",(e=>{this.undo();$(".undo-and-redo .undo").focus()}));tooltip(".undo-and-redo .undo",{content:__("Undo"),position:"bottom"});$(".undo-and-redo .redo").on("click",(e=>{this.redo();$(".undo-and-redo .redo").focus()}));tooltip(".undo-and-redo .redo",{content:__("Redo"),position:"bottom"});if(!this.isEditingTitle){$("#email-title").on("click",(e=>{this.isEditingTitle=true;mountHeader()}))}else{$("#email-title-edit").focus().on("change blur keydown",(e=>{if(e.type==="keydown"&&e.key!=="Enter"){return}const title=e.target.value;this.email.data.title=title;this.isEditingTitle=false;mountHeader();EmailsStore.patch(this.email.ID,{data:{title:title}}).then((e=>{this.loadEmail(e)}))}))}onHeaderMount()};const emailControls=()=>{const message_typeOptions={marketing:__("Marketing","groundhogg"),transactional:__("Transactional","groundhogg")};const{reply_to_override:reply_to_override="",alignment:alignment="left",message_type:message_type="marketing",alt_body:alt_body="",use_custom_alt_body:use_custom_alt_body=false}=this.edited.meta;return`\n            <div class="display-flex column gap-20">\n                <div class="gh-panel">\n                    <div class="inside">\n                        <div id="email-editor-sidebar-controls" class="gh-button-group">\n                            <button id="send-test" class="gh-button secondary">${__("Send test email","groundhogg")}\n                            </button>\n                            <button data-device="mobile" class="show-preview gh-button secondary">\n                                ${icons.smartphone}\n                            </button>\n                            <button data-device="desktop" class="show-preview gh-button secondary">\n                                ${icons.desktop}\n                            </button>\n                        </div>\n                        <p>\n                            <label class="">${__("Send this email from:","groundhogg")}</label>\n                            ${select({id:"from-user",name:"from_user"})}\n                        </p>\n                        <p>\n                            <label class="">${__("Replies are sent to:","grounhogg")}</label>\n                            ${input({id:"reply-to",className:"full-width",name:"reply_to_override",value:reply_to_override})}\n                        </p>\n                        <div id="email-editor-sidebar-options">\n                            <div>\n                                <label class="">${__("Alignment:","groundhogg")}</label>\n                                <div class="gh-input-group">\n                                    <button id="align-left" data-alignment="left"\n                                            class="change-alignment gh-button ${alignment==="left"?"primary":"secondary"}">\n                                        ${icons.alignLeft}\n                                    </button>\n                                    <button id="align-center" data-alignment="center"\n                                            class="change-alignment gh-button ${alignment==="center"?"primary":"secondary"}">\n                                        ${icons.alignCenter}\n                                    </button>\n                                </div>\n                            </div>\n                            <div id="email-editor-sidebar-message_type">\n                                <label class="">${__("Message type:")}</label>\n                                <div class="gh-input-group">\n                                    ${select({id:"message-type",name:"message_type"},message_typeOptions,message_type)}\n                                </div>\n                                \n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="gh-panel">\n                    <div class="gh-panel-header">\n                        <h2>${__("Advanced","groundhogg")}</h2>\n                        <button class="toggle-indicator"></button>\n                    </div>\n                    <div class="inside">\n                        <div class="gh-rows-and-columns">\n                            <div class="gh-row">\n                                <div class="gh-col">\n                                    <div class="space-between">\n                                        <label>${__("Send a plain text version","groundhogg")}</label>\n                                        ${toggle({id:"toggle-plain-text",onLabel:__("Yes"),offLabel:__("No"),checked:use_custom_alt_body})}\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="gh-row">\n                                <div class="gh-col">\n                                    ${use_custom_alt_body?`<button class="gh-button secondary" id="edit-plain-text">${__("Edit plain text version","groundhogg")}</button>`:""}\n                                </div>\n                            </div>\n                            <div class="gh-row">\n                                <div class="gh-col">\n                                    <button class="gh-button secondary" id="edit-custom-headers">${__("Edit custom email headers","groundhogg")}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `};const emailControlsOnMount=()=>{$(".show-preview").on("click",(e=>{const device=e.currentTarget.dataset.device;modal({dialogClasses:"no-padding",content:`<iframe id="preview" class="${device}"></div>`});const{built:built,edited_preview:edited_preview}=this.email.context;setFrameContent($("#preview")[0],edited_preview||built)}));$("#toggle-plain-text").on("change",(e=>{this.updateEmailMeta({use_custom_alt_body:e.target.checked});this.remount()}));$("#edit-plain-text").on("click",(e=>{const altBodyEditor=()=>`\n                <div class="space-between">\n                    <h3>${__("Edit plain text version","groundhogg")}</h3>\n                    <button class="gh-button secondary" id="generate-alt-body">${__("Generate","groundhogg")}\n                    </button>\n                </div>\n                ${textarea({value:this.edited.meta.alt_body||"",id:"plain-text-copy",style:{width:500,height:500}})}`;modal({content:altBodyEditor(),onOpen:({setContent:setContent})=>{$("#generate-alt-body").on("click",(()=>{post(`${routes.v4.emails}/generate-alt-body`,{content:this.edited.data.content}).then((({alt_body:alt_body})=>{this.updateEmailMeta({alt_body:alt_body});setContent(altBodyEditor())}))}));$("#plain-text-copy").on("change input",(e=>{this.updateEmailMeta({alt_body:e.target.value})}))}})}));$("#edit-custom-headers").on("click",(e=>{modal({content:`\n                <h2>${__("Custom Email Headers","groundhogg")}</h2>\n                <div id="email-editor-advanced-headers"></div>`,onOpen:({setContent:setContent})=>{const getHeadersArray=()=>{const{custom_headers:custom_headers={}}=this.edited.meta;const rows=[];Object.keys(custom_headers).forEach((key=>{rows.push([key,custom_headers[key]])}));if(!rows.length){rows.push(["",""])}return rows};const headersEditor=inputRepeaterWidget({selector:"#email-editor-advanced-headers",rows:getHeadersArray(),cellProps:[{placeholder:"Header..."},{placeholder:"Value..."}],cellCallbacks:[input,inputWithReplacements],onChange:rows=>{const headers={};rows.forEach((([key,value])=>{headers[key]=value}));this.updateEmailMeta({custom_headers:headers});mountHeader()}});headersEditor.mount()}})}));const{from_user:from_user=0}=this.edited.data;$("#from-user").select2({data:Groundhogg.filters.owners.map((owner=>({text:owner.data.user_email,id:owner.ID,selected:owner.ID==from_user})))}).on("change",(e=>{this.updateEmailData({from_user:parseInt(e.target.value)});mountHeader()}));$("#message-type").on("change",(e=>{this.updateEmailMeta({message_type:e.target.value});mountHeader()}));$("#reply-to").autocomplete({change:e=>{this.updateEmailMeta({reply_to_override:e.target.value});mountHeader()},source:["{owner_email}",...Groundhogg.filters.owners.map((u=>u.data.user_email))]});$(".change-alignment").on("click",(e=>{this.updateEmailMeta({alignment:e.currentTarget.dataset.alignment});this.remount();$("#"+e.currentTarget.id).focus()}));$("#send-test").on("click",(e=>{if(!this.testEmailAddress){this.testEmailAddress=user_test_email}const modalContent=(isSending=false)=>`<h2>Send a test email to the following address...</h2>\n            <div class="test-email-address-wrap">\n                ${input({type:"email",id:"email-address",name:"email-address",placeholder:"Your email...",disabled:isSending,value:this.testEmailAddress})}\n                <button id="initiate-test" class="gh-button primary" ${isSending?"disabled":""}>\n                    <span>${isSending?"Sending":"Send"}</span>\n                </button>\n            </div>`;const{$modal:$modal,close:closeModal,setContent:setContent}=modal({content:modalContent()});$("#email-address").autocomplete({source:Groundhogg.filters.owners.map((u=>u.data.user_email)),change:e=>{this.testEmailAddress=e.target.value;mountHeader()}});$("#initiate-test").on("click",(()=>{setContent(modalContent(true));const{stop:stopDots}=loadingDots("#initiate-test");post(`${routes.v4.emails}/${this.email.ID}/test`,{to:this.testEmailAddress,edited:this.edited}).then((r=>{stopDots();setContent(`<p>Test sent to <b>${this.testEmailAddress}</b></p>`);setTimeout(closeModal,2e3)}))}))}))};if(email.meta.type!=="html"){Groundhogg.EmailBlockEditor("#email-editor-body",{email:this.edited,scrollDepth:this.scrollDepth,onScroll:y=>{this.scrollDepth=y},onMount:()=>{$("#subject, #preview-text").on("change",(e=>{this.updateEmailData({[e.target.name]:e.target.value});mountHeader()}))},emailControls:()=>emailControls(),emailControlsOnMount:()=>emailControlsOnMount(),onChange:({css:css,html:html,blocks:blocks})=>{this.updateEmail({content:html},{css:css,blocks:blocks});mountHeader()}}).init()}else{let UI=`\n            <div class="display-flex gap-20" style="padding: 0 20px;">\n                <div class="gh-panel full-width">\n                    ${textarea({id:"content"})}\n                </div>\n                <div>\n                    ${emailControls()}\n                </div>\n            </div>`;$("#email-editor-body").html(UI);this.codemirror=codeEditor({selector:"#content",initialContent:this.edited.data.content,height:"80vh",onChange:content=>{this.updateEmail({content:content});mountHeader()}}).editor;emailControlsOnMount()}headerMounted()},demount(){this.onDemount()},onDemount(){if(this.edited.meta.type==="html"){this.codemirror.toTextArea()}else{wp.editor.remove("content")}},currentState(){const{email:email,edited:edited}=this;return{email:copyObject(email),edited:copyObject(edited)}},saveUndoState(){this.clearRedoStates();this.undoStates.push(this.currentState())},clearRedoStates(){this.redoStates=[]},undo(){var lastState=this.undoStates.pop();if(!lastState){return}this.redoStates.push(this.currentState());Object.assign(this,lastState);this.remount()},redo(){var lastState=this.redoStates.pop();if(!lastState){return}this.undoStates.push(this.currentState());Object.assign(this,lastState);this.remount()}});Groundhogg.EmailEditor=EmailEditor})(jQuery);