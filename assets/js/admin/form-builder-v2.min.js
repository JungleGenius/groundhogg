(function($){const{toggle:toggle,textarea:textarea,input:input,select:select,inputWithReplacements:inputWithReplacements,uuid:uuid,inputRepeaterWidget:inputRepeaterWidget,icons:icons}=Groundhogg.element;const{sprintf:sprintf,__:__,_x:_x}=wp.i18n;const{metaPicker:metaPicker,tagPicker:tagPicker}=Groundhogg.pickers;const columnWidths={"1/1":1,"1/2":.5,"1/3":.33333,"1/4":.25,"2/3":.66666,"3/4":.75};const columnClasses={"1/1":"col-1-of-1","1/2":"col-1-of-2","1/3":"col-1-of-3","1/4":"col-1-of-4","2/3":"col-2-of-3","3/4":"col-3-of-4"};const fieldWidth=({column_width:column_width})=>{return columnWidths[column_width]};const groupFieldsInRows=({fields:fields,button:button})=>{fields=[...fields,button];return fields.reduce((rows,field)=>{const rowWidth=rows[rows.length-1].reduce((width,field)=>{return width+fieldWidth(field)},0);if(rowWidth+fieldWidth(field)>1){rows.push([])}rows[rows.length-1].push(field);return rows},[[]])};const defaultField={className:"",id:"",type:"text",name:"text",value:"",label:"New field",hide_label:false,required:false,column_width:"1/1"};const defaultForm={button:{type:"button",text:"Submit",label:"Submit",column_width:"1/1"},fields:[{...defaultField,type:"first",name:"first_name",label:"First Name",required:true},{...defaultField,type:"last",name:"last_name",label:"Last Name",required:true},{...defaultField,type:"email",name:"email",label:"Email",required:true}]};const Settings={basic:function(label,atts){const{id:id}=atts;return`<label for="${id}">${label}</label>
	  <div class="setting">${input(atts)}</div>`},basicWithReplacements:function(label,atts){const{id:id}=atts;return`<label for="${id}">${label}</label> ${inputWithReplacements(atts)}`},type:{type:"type",edit:function({type:type="text"}){return`<label for="type">Type</label>
		<div class="setting">
			${select({id:"type",name:"type"},getFieldTypeOptions(),type)}
		</div>`},onMount:function(field,updateField){$("#type").on("change",e=>{updateField({type:e.target.value},true)})}},name:{type:"name",edit:function({name:name=""}){return`<label for="type">Name</label>
		<div class="setting">
			${input({id:"name",name:"name",value:name})}
		</div>`},onMount:function(field,updateField){metaPicker("#name").on("change",e=>{updateField({name:e.target.value})})}},required:{type:"required",edit:function({required:required=false}){return`<label for="required">Required</label>
		<div class="setting">${toggle({id:"required",name:"required",className:"required",onLabel:"Yes",offLabel:"No",checked:required})}
		</div>`},onMount:function(field,updateField){$("#required").on("change",e=>{updateField({required:e.target.checked})})}},label:{type:"label",edit:function({label:label=""}){return Settings.basic("Label",{id:"label",name:"label",className:"label",value:label,placeholder:""})},onMount:function(field,updateField){$("#label").on("change",e=>{updateField({label:e.target.value})})}},hideLabel:{type:"hideLabel",edit:function({hide_label:hide_label=false}){return`<label for="hide-label">Hide label</label>
		<div class="setting">${toggle({id:"hide-label",name:"hide_label",className:"hide-label",onLabel:"Yes",offLabel:"No",checked:hide_label})}
		</div>`},onMount:function(field,updateField){$("#hide-label").on("change",e=>{updateField({hide_label:e.target.checked})})}},text:{type:"text",edit:function({text:text=""}){return Settings.basic("Button Text",{id:"text",name:"text",className:"text regular-text",value:text,placeholder:""})},onMount:function(field,updateField){$("#text").on("change",e=>{updateField({text:e.target.value})})}},value:{type:"value",edit:function({value:value=""}){return Settings.basicWithReplacements("Value",{id:"value",name:"value",className:"value regular-text",value:value,placeholder:""})},onMount:function(field,updateField){$("#value").on("change",e=>{updateField({value:e.target.value})})}},placeholder:{type:"placeholder",edit:function({placeholder:placeholder=""}){return Settings.basic("Placeholder",{id:"placeholder",name:"Placeholder",className:"placeholder",value:placeholder,placeholder:""})},onMount:function(field,updateField){$("#placeholder").on("change",e=>{updateField({placeholder:e.target.value})})}},id:{type:"id",edit:function({id:id=""}){return Settings.basic("CSS Id",{id:"css-id",name:"id",className:"css-id",value:id,placeholder:"css-id"})},onMount:function(field,updateField){$("#css-id").on("change",e=>{updateField({id:e.target.value})})}},className:{type:"className",edit:function({className:className=""}){return Settings.basic("CSS Class",{id:"className",name:"className",className:"css-class-name",value:className,placeholder:"css-class-name"})},onMount:function(field,updateField){$("#className").on("change",e=>{updateField({className:e.target.value})})}},phoneType:{type:"phoneType",edit:function({phone_type:phone_type="primary"}){return`<label for="phone-type">Phone Type</label>
		<div class="setting">${select({id:"phone-type",name:"phone_type",className:"phone-type"},{primary:"Primary Phone",mobile:"Mobile Phone",company:"Company Phone"},phone_type)}
		</div>`},onMount:function(field,updateField){$("#phone-type").on("change",e=>{updateField({phone_type:e.target.value})})}},columnWidth:{type:"columnWidth",edit:function({column_width:column_width}){return`<label for="column-width">Column Width</label>
		<div class="setting">${select({id:"column-width",name:"column_width",className:"column-width"},{"1/1":"1/1","1/2":"1/2","1/3":"1/3","1/4":"1/4","2/3":"2/3","3/4":"3/4"},column_width)}
		</div>`},onMount:function(field,updateField){$("#column-width").on("change",e=>{updateField({column_width:e.target.value})})}},options:{type:"options",edit:function({options:options=[""]}){const selectOption=(option,i)=>{return`
			  <div class="select-option-wrap">
				  ${input({id:`select-option-${i}`,className:"select-option",value:option,dataKey:i})}
				  <button class="dashicon-button remove-option" data-key="${i}"><span
					  class="dashicons dashicons-no-alt"></span></button>
			  </div>`};return`
			<div class="options">
				<label>${_x("Options","label for dropdown options","groundhogg")}</label>
				<div class="select-options"></div>
			</div>`},onMount:function({options:options=[""],tags:tags={}},updateField,currentField){inputRepeaterWidget({selector:".select-options",rows:options.map(v=>[v,tags[v]]),cellCallbacks:[input,props=>{console.log(props);return`
				<div class="inline-tag-picker">
					${icons.tag}
            <div class="show-on-hover">
                ${select({...props,class:"tag-picker"},{},[])}
            </div>
				</div>`}],onMount:()=>{tagPicker(".tag-picker")},cellProps:[{placeholder:_x("Value...","input placeholder","groundhogg")}],onChange:rows=>{updateField({options:rows.map(r=>r[0]),tags:{}})}}).mount()}},optionNone:{type:"optionNone",edit:function({option_none:option_none}){}}};const previewField=field=>{return getFieldType(field.type).preview(field)};const getFieldType=type=>{if(!FieldTypes.hasOwnProperty(type)){return false}return{...FieldTypes.default,...FieldTypes[type]}};const getFieldTypeOptions=()=>{const options=[];for(const type in FieldTypes){if(FieldTypes.hasOwnProperty(type)&&FieldTypes[type].hasOwnProperty("name")&&!FieldTypes[type].hasOwnProperty("hide")){options.push({value:type,text:FieldTypes[type].name})}}return options};const standardContentSettings=[Settings.type.type,Settings.required.type,Settings.hideLabel.type,Settings.label.type,Settings.placeholder.type,Settings.columnWidth.type];const standardMetaContentSettings=[Settings.type.type,Settings.name.type,Settings.required.type,Settings.hideLabel.type,Settings.label.type,Settings.placeholder.type,Settings.columnWidth.type];const standardAdvancedSettings=[Settings.value.type,Settings.id.type,Settings.className.type];const fieldPreview=({type:type="text",id:id=uuid(),name:name="name",placeholder:placeholder="",value:value="",label:label="",hide_label:hide_label=false,required:required=false,className:className=""})=>{const inputField=input({id:id,type:type,name:name,placeholder:placeholder,value:value,className:`gh-input ${className}`});if(hide_label){return inputField}if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`};const FieldTypes={default:{name:"default",content:[],advanced:[],hide:true,preview:field=>fieldPreview({...field,type:"text"})},button:{name:"Button",hide:true,content:[Settings.text.type,Settings.columnWidth.type],advanced:[Settings.id.type,Settings.className.type],preview:function({text:text,id:id,className:className}){return`<button id="${id}" class="gh-button secondary ${className}">${text}</button>`}},first:{name:"First Name",content:standardContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,name:"first_name",type:"text"})},last:{name:"Last Name",content:standardContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,name:"last_name",type:"text"})},email:{name:"Email",content:standardContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"email",name:"email"})},phone:{name:"Phone Number",content:[...standardContentSettings,Settings.phoneType.type],advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"tel",name:field.phoneType+"_phone"})},gdpr:{},terms:{},recaptcha:{},text:{name:"Text",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview(field)},textarea:{name:"Textarea",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:({type:type="text",id:id=uuid(),name:name="name",placeholder:placeholder="",value:value="",label:label="",hide_label:hide_label=false,required:required=false,className:className=""})=>{const inputField=textarea({id:id,type:type,name:name,placeholder:placeholder,value:value,className:`gh-input ${className}`});if(hide_label){return inputField}if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},number:{name:"Number",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"number"})},dropdown:{name:"Dropdown",content:[Settings.type.type,Settings.name.type,Settings.required.type,Settings.hideLabel.type,Settings.label.type,Settings.options.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:({id:id=uuid(),name:name="name",options:options=[],label:label="",hide_label:hide_label=false,required:required=false,className:className=""})=>{const inputField=select({id:id,name:name,className:`gh-input ${className}`},options.map(opt=>({text:opt,value:opt})));if(hide_label){return inputField}if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},radio:{name:"Radio",content:[Settings.type.type,Settings.required.type,Settings.label.type,Settings.options.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:({id:id=uuid(),name:name="name",options:options=[],label:label="",required:required=false,className:className=""})=>{const inputField=options.map(opt=>{return`
			  <div class="gh-radio-wrapper">
				  <label class="gh-radio-label">
					  ${input({type:"radio",id:id,required:required,className:className,name:name,value:opt})} ${opt}
				  </label>
			  </div>`}).join("");return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},checkbox:{},address:{},birthday:{},date:{name:"Date",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"date"})},time:{name:"Time",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"time"})},file:{}};const Templates={settings:function(field,settingsTab){const fieldType=getFieldType(field.type);const settings=settingsTab==="advanced"?fieldType.advanced:fieldType.content;return`
		  <div class="settings-tabs">
			  <a class="settings-tab ${settingsTab==="content"?"active":""}" data-tab="content">Content</a>
			  <a class="settings-tab ${settingsTab==="advanced"?"active":""}" data-tab="advanced">Advanced</a>
		  </div>
		  <div class="settings">
			  ${settings.map(setting=>`<div class="row">${Settings[setting].edit(field)}</div>`).join("")}
		  </div>`},field:function(key,field,isEditing,settingsTab,isSpecial=false){const{type:type,label:label}=field;const fieldType=getFieldType(type);return`
		  <div class="form-field" data-key="${key}">
			  <div class="field-header">
				  <div class="details">
					  <div class="field-label">${label}</div>
					  <div class="field-type">${fieldType.name}</div>
				  </div>
				  <div class="actions">
					  ${!isSpecial?`
					  <!-- Duplicate/Delete -->
					  <button class="duplicate" data-key="${key}"><span class="dashicons dashicons-admin-page"></span>
					  </button>
					  <button class="delete" data-key="${key}"><span class="dashicons dashicons-no"></span></button>`:`<button class="open" data-key="${key}"><span class="dashicons ${isEditing?"dashicons-arrow-up":"dashicons-arrow-down"}"></span></button>`}
				  </div>
			  </div>
			  ${isEditing?Templates.settings(field,settingsTab):""}
		  </div>`},builder:function(form,activeField,settingsTab){return`
		  <div id="form-builder" data-id="${form.id}">
			  <div id="fields-editor" class="fields-editor">
				  <div id="form-fields">
					  ${form.fields.map((field,index)=>Templates.field(index,field,activeField===index,settingsTab)).join("")}
				  </div>
				  <button class="add-field gh-button secondary">Add Field</button>
				  <div id="button-settings">
					  ${this.field("button",form.button,activeField==="button",settingsTab,true)}
				  </div>
			  </div>
			  <div id="form-preview-wrap" class="panel">
				  <label class="row-label">Preview...</label>
				  <div id="form-preview">
					  ${this.preview(form)}
				  </div>
			  </div>
		  </div>`},preview:function(form){const rows=groupFieldsInRows(form);const formHTML=rows.map(row=>{const rowHTML=row.map(field=>{const{column_width:column_width}=field;return`
			  <div class="gh-form-column ${columnClasses[column_width]}">
				  <div class="gh-form-field">
					  ${previewField(field)}
				  </div>
			  </div>`}).join("");return`
			<div class="gh-form-row">${rowHTML}</div>`}).join("");return`
		  <div class="gh-form-wrapper">
			  ${formHTML}
		  </div>`}};const FormBuilder=(selector,form=defaultForm,onChange=form=>{console.log(form)})=>({form:{...defaultForm,...form},el:null,activeField:false,activeFieldTab:"content",init:function(){this.el=$(selector);this.mount()},mount:function(){this.render();this.onMount()},onMount:function(){var self=this;const render=()=>{this.mount()};const renderPreview=()=>{this.renderPreview()};const currentField=()=>{switch(this.activeField){case"button":return this.form.button;default:return this.form.fields[this.activeField]}};const setActiveField=id=>{self.activeField=id;self.activeFieldTab="content";render()};const addField=()=>{this.form.fields.push(defaultField);setActiveField(this.form.fields.length-1);onChange(this.form)};const deleteField=id=>{this.form.fields.splice(id,1);if(this.activeField===id){this.activeField=false;self.activeFieldTab="content"}render();onChange(this.form)};const duplicateField=id=>{const field=this.form.fields[id];this.form.fields.splice(id,0,field);setActiveField(id+1);onChange(this.form)};const updateField=(atts,reRenderSettings=false,reRenderPreview=true)=>{switch(this.activeField){case"button":this.form.button={...this.form.button,...atts};break;default:this.form.fields[this.activeField]={...this.form.fields[this.activeField],...atts};break}if(reRenderSettings){render()}else if(reRenderPreview){renderPreview()}onChange(this.form)};const $builder=$("#form-builder");$builder.on("click",".add-field",addField);$builder.on("click",".form-field",e=>{const $field=$(e.currentTarget);const $target=$(e.target);let fieldKey=$field.data("key");if(fieldKey!=="button"){fieldKey=parseInt(fieldKey)}if($target.is("button.delete, button.delete .dashicons")){deleteField(fieldKey)}else if($target.is("button.duplicate, button.duplicate .dashicons")){duplicateField(fieldKey)}else{if(fieldKey!==self.activeField){setActiveField(fieldKey)}else if(e.target.classList.contains("settings-tab")){self.activeFieldTab=e.target.dataset.tab;render()}}});if(self.activeField!==false){if(self.activeFieldTab==="content"){getFieldType(currentField().type).content.forEach(setting=>{Settings[setting].onMount(currentField(),updateField,currentField)})}else{getFieldType(currentField().type).advanced.forEach(setting=>{Settings[setting].onMount(currentField(),updateField,currentField)})}}$("#form-fields").sortable({placeholder:"field-placeholder",handle:".field-header",start:function(e,ui){ui.placeholder.height(ui.item.height());ui.placeholder.width(ui.item.width())},update:function(e,ui){const newFields=[];$("#form-fields .form-field").each(function(i){const fieldId=parseInt($(this).data("key"));newFields.push(self.form.fields[fieldId])});self.form.fields=newFields;render();onChange(self.form)}})},renderPreview:function(){$("#form-preview").html(Templates.preview(this.form))},render:function(){this.el.html(Templates.builder(this.form,this.activeField,this.activeFieldTab))}});Groundhogg.formBuilder=FormBuilder})(jQuery);