(function($){const{toggle:toggle,textarea:textarea,input:input,select:select,inputWithReplacements:inputWithReplacements,uuid:uuid,inputRepeaterWidget:inputRepeaterWidget,icons:icons,miniModal:miniModal,tooltip:tooltip,copyObject:copyObject,sanitizeKey:sanitizeKey}=Groundhogg.element;const{sprintf:sprintf,__:__,_x:_x}=wp.i18n;const{tags:TagsStore}=Groundhogg.stores;const{metaPicker:metaPicker,tagPicker:tagPicker}=Groundhogg.pickers;const columnClasses={"1/1":"col-1-of-1","1/2":"col-1-of-2","1/3":"col-1-of-3","1/4":"col-1-of-4","2/3":"col-2-of-3","3/4":"col-3-of-4"};const defaultField={className:"",id:"",type:"text",name:"",value:"",label:"New field",hide_label:false,required:false,column_width:"1/1"};const defaultForm={button:{type:"button",text:"Submit",label:"Submit",column_width:"1/1"},fields:[{...defaultField,type:"first",name:"first_name",label:"First Name",required:true},{...defaultField,type:"last",name:"last_name",label:"Last Name",required:true},{...defaultField,type:"email",name:"email",label:"Email",required:true}]};const Settings={basic(label,atts){const{id:id}=atts;return`<label for="${id}">${label}</label>\n\t  <div class="setting">${input(atts)}</div>`},basicWithReplacements(label,atts){const{id:id}=atts;return`<label for="${id}">${label}</label> ${inputWithReplacements(atts)}`},type:{type:"type",edit({type:type="text"}){return`<label for="type">Type</label>\n\t\t<div class="setting">\n\t\t\t${select({id:"type",name:"type"},getFieldTypeOptions(),type)}\n\t\t</div>`},onMount(field,updateField){$("#type").on("change",(e=>{updateField({type:e.target.value},true)}))}},property:{type:"property",edit({property:property=false}){return`<label for="type">${__("Custom Field")}</label>\n\t\t<div class="setting">\n\t\t\t${select({id:"property",name:"property"},Funnel.contact_custom_fields.map((field=>({value:field.id,text:field.label}))),property)}\n\t\t</div>`},onMount(field,updateField){$("#property").on("change",(e=>{let property=e.target.value;let label=Funnel.contact_custom_fields.find((f=>f.id===property)).label;updateField({property:property,label:label},true)}))}},tags:{type:"tags",edit(){return`<label for="type">${__("Apply Tags")}</label>\n\t\t<div class="setting">\n\t\t\t${select({id:"apply-tags",name:"apply-tags"})}\n\t\t</div>`},onMount({tags:tags=[]},updateField){const renderTagPicker=()=>{tagPicker("#apply-tags",true,(items=>TagsStore.itemsFetched(items)),{data:tags.map((id=>({id:id,text:TagsStore.get(id).data.tag_name,selected:true})))}).on("change",(e=>{let tags=$(e.target).val().map((id=>parseInt(id)));updateField({tags:tags})}))};if(tags&&!TagsStore.hasItems(tags)){TagsStore.fetchItems({id:tags}).then((()=>{renderTagPicker()}))}else{renderTagPicker()}}},name:{type:"name",edit({name:name=""}){return`<label for="type">${__("Internal Name","groundhogg")}</label>\n\t\t<div class="setting">\n\t\t\t${input({id:"name",name:"name",value:name})}\n\t\t</div>`},onMount(field,updateField){metaPicker("#name").on("change",(e=>{updateField({name:e.target.value})}))}},required:{type:"required",edit({required:required=false}){return`<label for="required">${__("Required","groundhogg")}</label>\n\t\t<div class="setting">${toggle({id:"required",name:"required",className:"required",onLabel:"Yes",offLabel:"No",checked:required})}\n\t\t</div>`},onMount(field,updateField){$("#required").on("change",(e=>{updateField({required:e.target.checked})}))}},checked:{type:"checked",edit({checked:checked=false}){return`<label for="required">${__("Checked by default","groundhogg")}</label>\n\t\t<div class="setting">${toggle({id:"checked",name:"checked",className:"checked",onLabel:"Yes",offLabel:"No",checked:checked})}\n\t\t</div>`},onMount(field,updateField){$("#checked").on("change",(e=>{updateField({checked:e.target.checked})}))}},label:{type:"label",edit({label:label=""}){return Settings.basic("Label",{id:"label",name:"label",className:"label",value:label,placeholder:""})},onMount(field,updateField){$("#label").on("change input",(e=>{let label=e.target.value;updateField({label:label});if(!field.name){$("#name").val(sanitizeKey(label)).trigger("change")}}))}},hideLabel:{type:"hideLabel",edit({hide_label:hide_label=false}){return`<label for="hide-label">Hide label</label>\n\t\t<div class="setting">${toggle({id:"hide-label",name:"hide_label",className:"hide-label",onLabel:"Yes",offLabel:"No",checked:hide_label})}\n\t\t</div>`},onMount(field,updateField){$("#hide-label").on("change",(e=>{updateField({hide_label:e.target.checked})}))}},text:{type:"text",edit({text:text=""}){return Settings.basic("Button Text",{id:"text",name:"text",className:"text regular-text",value:text,placeholder:""})},onMount(field,updateField){$("#text").on("change",(e=>{updateField({text:e.target.value})}))}},value:{type:"value",edit({value:value=""}){return Settings.basicWithReplacements("Value",{id:"value",name:"value",className:"value regular-text",value:value,placeholder:""})},onMount(field,updateField){$("#value").on("change",(e=>{updateField({value:e.target.value})}))}},placeholder:{type:"placeholder",edit({placeholder:placeholder=""}){return Settings.basic("Placeholder",{id:"placeholder",name:"Placeholder",className:"placeholder",value:placeholder,placeholder:""})},onMount(field,updateField){$("#placeholder").on("change",(e=>{updateField({placeholder:e.target.value})}))}},id:{type:"id",edit({id:id=""}){return Settings.basic("CSS Id",{id:"css-id",name:"id",className:"css-id",value:id,placeholder:"css-id"})},onMount(field,updateField){$("#css-id").on("change",(e=>{updateField({id:e.target.value})}))}},className:{type:"className",edit({className:className=""}){return Settings.basic("CSS Class",{id:"className",name:"className",className:"css-class-name",value:className,placeholder:"css-class-name"})},onMount(field,updateField){$("#className").on("change",(e=>{updateField({className:e.target.value})}))}},phoneType:{type:"phoneType",edit({phone_type:phone_type="primary"}){return`<label for="phone-type">${_x("Phone Type","form field setting","groundhogg")}</label>\n\t\t<div class="setting">${select({id:"phone-type",name:"phone_type",className:"phone-type"},{primary:"Primary Phone",mobile:"Mobile Phone",company:"Company Phone"},phone_type)}\n\t\t</div>`},onMount(field,updateField){$("#phone-type").on("change",(e=>{updateField({phone_type:e.target.value})}))}},columnWidth:{type:"columnWidth",edit({column_width:column_width}){return`<label for="column-width">Column Width</label>\n\t\t<div class="setting">${select({id:"column-width",name:"column_width",className:"column-width"},{"1/1":"1/1","1/2":"1/2","1/3":"1/3","1/4":"1/4","2/3":"2/3","3/4":"3/4"},column_width)}\n\t\t</div>`},onMount(field,updateField){$("#column-width").on("change",(e=>{updateField({column_width:e.target.value})}))}},fileTypes:{type:"fileTypes",edit:({file_types:file_types})=>`\n\t\t\t<div class="setting">\n\t\t\t\t<label>${_x("Restrict file types","groundhogg")}</label>\n\t\t\t\t${select({name:"file-types",id:"file-types",multiple:true},[{text:"jpeg",value:"jpeg"},{text:"png",value:"png"},{text:"pdf",value:"pdf"},{text:"doc",value:"doc"},{text:"docx",value:"docx"}],file_types)}\n\t\t\t</div>`,onMount:(field,updateField)=>{$("#file-types").select2().on("change",(e=>{updateField({file_types:$(e.target).val()})}))}},options:{type:"options",edit({options:options=[""]}){const selectOption=(option,i)=>`\n\t\t\t  <div class="select-option-wrap">\n\t\t\t\t  ${input({id:`select-option-${i}`,className:"select-option",value:option,dataKey:i})}\n\t\t\t\t  <button class="dashicon-button remove-option" data-key="${i}"><span\n\t\t\t\t\t  class="dashicons dashicons-no-alt"></span></button>\n\t\t\t  </div>`;return`\n\t\t\t<div class="options full-width">\n\t\t\t\t<label>${_x("Options","label for dropdown options","groundhogg")}</label>\n\t\t\t\t<div class="select-options"></div>\n\t\t\t</div>`},onMount({options:options=[["",[]]]},updateField,currentField){let allTags=options.map((opt=>opt[1])).reduce(((a,i)=>[...a,i]),[]);if(!TagsStore.hasItems(allTags)){TagsStore.fetchItems({id:allTags})}inputRepeaterWidget({selector:".select-options",rows:options,sortable:true,cellCallbacks:[input,field=>`\n\t\t\t\t  <div class="inline-tag-picker">\n\t\t\t\t\t  ${icons.tag}\n\t\t\t\t\t  ${input({className:"input hidden tags-input",...field})}\n\t\t\t\t  </div>`],onMount:()=>{let modal=false;const openModal=el=>{if(modal){modal.close()}modal=miniModal(el,{content:select({id:"tags"}),onOpen:()=>{let $input=$($(el).find("input"));let selected=$input.val().split(",").map((t=>parseInt(t))).filter((id=>TagsStore.has(id)));tagPicker("#tags",true,(items=>TagsStore.itemsFetched(items)),{data:selected.map((id=>({id:id,text:TagsStore.get(id).data.tag_name,selected:true})))}).on("change",(e=>{let tagIds=$(e.target).val().map((id=>parseInt(id)));$input.val(tagIds.join(",")).trigger("change")}))},closeOnFocusout:false})};$(".inline-tag-picker").on("click",(e=>{let el=e.currentTarget;openModal(el)}));tooltip(".inline-tag-picker",{content:__("Apply a tag")})},cellProps:[{placeholder:_x("Value...","input placeholder","groundhogg")},{}],onChange:rows=>{updateField({options:rows})}}).mount()}},optionNone:{type:"optionNone",edit({option_none:option_none}){}}};const previewField=field=>getFieldType(field.type).preview(field);const getFieldType=type=>{if(!FieldTypes.hasOwnProperty(type)){return false}return{...FieldTypes.default,...FieldTypes[type]}};const getFieldTypeOptions=()=>{const options=[];for(const type in FieldTypes){if(FieldTypes.hasOwnProperty(type)&&FieldTypes[type].hasOwnProperty("name")&&!FieldTypes[type].hasOwnProperty("hide")){options.push({value:type,text:FieldTypes[type].name})}}return options};const standardContentSettings=[Settings.type.type,Settings.required.type,Settings.hideLabel.type,Settings.label.type,Settings.placeholder.type,Settings.columnWidth.type];const standardMetaContentSettings=[Settings.type.type,Settings.label.type,Settings.name.type,Settings.placeholder.type,Settings.hideLabel.type,Settings.required.type,Settings.columnWidth.type];const standardAdvancedSettings=[Settings.value.type,Settings.id.type,Settings.className.type];const fieldPreview=({type:type="text",id:id=uuid(),name:name="name",placeholder:placeholder="",value:value="",label:label="",hide_label:hide_label=false,required:required=false,className:className=""})=>{const inputField=input({id:id,type:type,name:name,placeholder:placeholder,value:value,className:`gh-input ${className}`});if(hide_label){return inputField}if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`};const FieldTypes={default:{name:"default",content:[],advanced:[],hide:true,preview:field=>fieldPreview({...field,type:"text"})},button:{name:"Button",hide:true,content:[Settings.text.type,Settings.columnWidth.type],advanced:[Settings.id.type,Settings.className.type],preview({text:text="Submit",id:id="",className:className=""}){return`<button id="${id}" class="gh-button primary ${className} full-width">${text}</button>`}},first:{name:"First Name",content:standardContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,name:"first_name",type:"text"})},last:{name:"Last Name",content:standardContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,name:"last_name",type:"text"})},email:{name:"Email",content:standardContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"email",name:"email"})},phone:{name:"Phone Number",content:[Settings.type.type,Settings.label.type,Settings.phoneType.type,Settings.placeholder.type,Settings.hideLabel.type,Settings.required.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"tel",name:field.phone_type+"_phone"})},gdpr:{name:__("GDPR","groundhogg"),content:[Settings.type.type,Settings.label.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:({id:id=uuid(),name:name="name",value:value="1",label:label="",required:required=false,className:className="",checked:checked=false})=>{if(!value){value="1"}const inputField=input({id:id,type:"checkbox",className:`gh-checkbox-input ${className}`,name:name,value:value,checked:checked});if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label">${inputField} ${label}</label>`}},terms:{},recaptcha:{},text:{name:"Text",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview(field)},url:{name:"URL",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"url"})},textarea:{name:"Textarea",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:({type:type="text",id:id=uuid(),name:name="name",placeholder:placeholder="",value:value="",label:label="",hide_label:hide_label=false,required:required=false,className:className=""})=>{const inputField=textarea({id:id,type:type,name:name,placeholder:placeholder,value:value,className:`gh-input ${className}`});if(hide_label){return inputField}if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},number:{name:"Number",content:standardMetaContentSettings,advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"number"})},dropdown:{name:"Dropdown",content:[Settings.type.type,Settings.label.type,Settings.name.type,Settings.placeholder.type,Settings.hideLabel.type,Settings.required.type,Settings.options.type,Settings.columnWidth.type],advanced:[Settings.id.type,Settings.className.type],preview:({id:id=uuid(),name:name="name",options:options=[],placeholder:placeholder="",label:label="",hide_label:hide_label=false,required:required=false,className:className=""})=>{options=options.map((opt=>({text:Array.isArray(opt)?opt[0]:opt,value:Array.isArray(opt)?opt[0]:opt})));if(placeholder){options.unshift({text:placeholder,value:""})}const inputField=select({id:id,name:name,className:`gh-input ${className}`},options);if(hide_label){return inputField}if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},radio:{name:"Radio",content:[Settings.type.type,Settings.label.type,Settings.name.type,Settings.required.type,Settings.options.type,Settings.columnWidth.type],advanced:[Settings.id.type,Settings.className.type],preview:({id:id=uuid(),name:name="name",options:options=[],label:label="",required:required=false,className:className=""})=>{const inputField=options.map((opt=>`\n\t\t\t  <div class="gh-radio-wrapper">\n\t\t\t\t  <label class="gh-radio-label">\n\t\t\t\t\t  ${input({type:"radio",id:id,className:className,name:name,value:Array.isArray(opt)?opt[0]:opt})} ${Array.isArray(opt)?opt[0]:opt}\n\t\t\t\t  </label>\n\t\t\t  </div>`)).join("");if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},checkboxes:{name:__("Checkbox List"),content:[Settings.type.type,Settings.label.type,Settings.name.type,Settings.required.type,Settings.options.type,Settings.columnWidth.type],advanced:[Settings.id.type,Settings.className.type],preview:({id:id=uuid(),name:name="name",options:options=[],label:label="",required:required=false,className:className=""})=>{const inputField=options.map((opt=>`\n\t\t\t  <div class="gh-radio-wrapper">\n\t\t\t\t  <label class="gh-radio-label">\n\t\t\t\t\t  ${input({type:"checkbox",id:id,className:className,name:name+"[]",value:Array.isArray(opt)?opt[0]:opt})} ${Array.isArray(opt)?opt[0]:opt}\n\t\t\t\t  </label>\n\t\t\t  </div>`)).join("");if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label" for="${id}">${label}</label><div class="gh-form-field-input">${inputField}</div>`}},checkbox:{name:__("Checkbox","groundhogg"),content:[Settings.type.type,Settings.label.type,Settings.name.type,Settings.tags.type,Settings.required.type,Settings.checked.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:({id:id=uuid(),name:name="name",value:value="1",label:label="",required:required=false,className:className="",checked:checked=false})=>{if(!value){value="1"}const inputField=input({id:id,type:"checkbox",className:`gh-checkbox-input ${className}`,name:name,value:value,checked:checked});if(required){label+=' <span class="required">*</span>'}return`<label class="gh-input-label">${inputField} ${label}</label>`}},address:{},birthday:{},date:{name:"Date",content:[Settings.type.type,Settings.label.type,Settings.name.type,Settings.hideLabel.type,Settings.required.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"date"})},time:{name:_x("Time","form field","groundhogg"),content:[Settings.type.type,Settings.label.type,Settings.name.type,Settings.hideLabel.type,Settings.required.type,Settings.columnWidth.type],advanced:standardAdvancedSettings,preview:field=>fieldPreview({...field,type:"time"})},file:{name:_x("File","form field","groundhogg"),content:[Settings.type.type,Settings.name.type,Settings.required.type,Settings.hideLabel.type,Settings.label.type,Settings.fileTypes.type,Settings.columnWidth.type],advanced:[Settings.id.type,Settings.className.type],preview:field=>fieldPreview({...field,type:"file"})},custom_field:{name:_x("Custom Field","form field","groundhogg"),content:[Settings.type.type,Settings.property.type,Settings.required.type,Settings.columnWidth.type],advanced:[Settings.value.type,Settings.id.type,Settings.className.type],preview:({id:id=uuid(),property:property=false,value:value="",required:required=false,className:className=""})=>{property=Funnel.contact_custom_fields.find((f=>f.id===property));if(!property){return""}property=copyObject(property);return FieldTypes[property.type].preview({...property,value:value,required:required,className:className})}}};const Templates={settings(field,settingsTab){const fieldType=getFieldType(field.type);const settings=settingsTab==="advanced"?fieldType.advanced:fieldType.content;return`\n\t\t  <div class="settings-tabs">\n\t\t\t  <a class="settings-tab ${settingsTab==="content"?"active":""}" data-tab="content">Content</a>\n\t\t\t  <a class="settings-tab ${settingsTab==="advanced"?"active":""}" data-tab="advanced">Advanced</a>\n\t\t  </div>\n\t\t  <div class="settings">\n\t\t\t  ${settings.map((setting=>`<div class="row">${Settings[setting].edit(field)}</div>`)).join("")}\n\t\t  </div>`},field(key,field,isEditing,settingsTab,isSpecial=false){const{type:type,label:label}=field;const fieldType=getFieldType(type);return`\n\t\t  <div class="form-field" data-key="${key}">\n\t\t\t  <div class="field-header">\n\t\t\t\t  <div class="details">\n\t\t\t\t\t  <div class="field-label">${label}</div>\n\t\t\t\t\t  <div class="field-type">${fieldType.name}</div>\n\t\t\t\t  </div>\n\t\t\t\t  <div class="actions">\n\t\t\t\t\t  ${!isSpecial?`\n\t\t\t\t\t  \x3c!-- Duplicate/Delete --\x3e\n\t\t\t\t\t  <button class="duplicate" data-key="${key}"><span class="dashicons dashicons-admin-page"></span>\n\t\t\t\t\t  </button>\n\t\t\t\t\t  <button class="delete" data-key="${key}"><span class="dashicons dashicons-no"></span></button>`:`<button class="open" data-key="${key}"><span class="dashicons ${isEditing?"dashicons-arrow-up":"dashicons-arrow-down"}"></span></button>`}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  ${isEditing?Templates.settings(field,settingsTab):""}\n\t\t  </div>`},builder(form,activeField,settingsTab){return`\n\t\t  <div id="form-builder" data-id="${form.id}">\n\t\t\t  <div id="fields-editor" class="fields-editor">\n\t\t\t\t  <div id="form-fields">\n\t\t\t\t\t  ${form.fields.map(((field,index)=>Templates.field(index,field,activeField===index,settingsTab))).join("")}\n\t\t\t\t  </div>\n\t\t\t\t  <button class="add-field gh-button secondary">Add Field</button>\n\t\t\t\t  <div id="button-settings">\n\t\t\t\t\t  ${this.field("button",form.button,activeField==="button",settingsTab,true)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t\t  <div id="form-preview-wrap" class="panel">\n\t\t\t\t  <label class="row-label">Preview...</label>\n\t\t\t\t  <div id="form-preview">\n\t\t\t\t\t  ${this.preview(form)}\n\t\t\t\t  </div>\n\t\t\t  </div>\n\t\t  </div>`},preview(form){let{button:button,fields:fields}=form;const formHTML=[...fields,button].map((field=>{const{column_width:column_width}=field;return`\n\t\t\t<div class="gh-form-column ${columnClasses[column_width]}">\n\t\t\t\t${previewField(field)}\n\t\t\t</div>`})).join("");return`\n\t\t  <div class="gh-form-wrapper">\n\t\t\t  ${formHTML}\n\t\t  </div>`}};const FormBuilder=(selector,form=defaultForm,onChange=(form=>{console.log(form)}))=>({form:{...defaultForm,...form},el:null,activeField:false,activeFieldTab:"content",init(){this.el=$(selector);this.mount()},mount(){this.render();this.onMount()},onMount(){var self=this;const render=()=>{this.mount()};const renderPreview=()=>{this.renderPreview()};const currentField=()=>{switch(this.activeField){case"button":return this.form.button;default:return this.form.fields[this.activeField]}};const setActiveField=id=>{self.activeField=id;self.activeFieldTab="content";render()};const addField=()=>{this.form.fields.push(defaultField);setActiveField(this.form.fields.length-1);onChange(this.form)};const deleteField=id=>{this.form.fields.splice(id,1);if(this.activeField===id){this.activeField=false;self.activeFieldTab="content"}render();onChange(this.form)};const duplicateField=id=>{const field=this.form.fields[id];this.form.fields.splice(id,0,field);setActiveField(id+1);onChange(this.form)};const updateField=(atts,reRenderSettings=false,reRenderPreview=true)=>{switch(this.activeField){case"button":this.form.button={...this.form.button,...atts};break;default:this.form.fields[this.activeField]={...this.form.fields[this.activeField],...atts};break}if(reRenderSettings){render()}else if(reRenderPreview){renderPreview()}onChange(this.form)};const $builder=$("#form-builder");$builder.on("click",".add-field",addField);$builder.on("click",".form-field",(e=>{const $field=$(e.currentTarget);const $target=$(e.target);let fieldKey=$field.data("key");if(fieldKey!=="button"){fieldKey=parseInt(fieldKey)}if($target.is("button.delete, button.delete .dashicons")){deleteField(fieldKey)}else if($target.is("button.duplicate, button.duplicate .dashicons")){duplicateField(fieldKey)}else{if(fieldKey!==self.activeField){setActiveField(fieldKey)}else if(e.target.classList.contains("settings-tab")){self.activeFieldTab=e.target.dataset.tab;render()}}}));if(self.activeField!==false){if(self.activeFieldTab==="content"){getFieldType(currentField().type).content.forEach((setting=>{Settings[setting].onMount(currentField(),updateField,currentField)}))}else{getFieldType(currentField().type).advanced.forEach((setting=>{Settings[setting].onMount(currentField(),updateField,currentField)}))}}$("#form-fields").sortable({placeholder:"field-placeholder",handle:".field-header",start:function(e,ui){ui.placeholder.height(ui.item.height());ui.placeholder.width(ui.item.width())},update:function(e,ui){const newFields=[];$("#form-fields .form-field").each((function(i){const fieldId=parseInt($(this).data("key"));newFields.push(self.form.fields[fieldId])}));self.form.fields=newFields;render();onChange(self.form)}})},renderPreview(){$("#form-preview").html(Templates.preview(this.form))},render(){this.el.html(Templates.builder(this.form,this.activeField,this.activeFieldTab))}});Groundhogg.formBuilder=FormBuilder})(jQuery);