(function($){const{input:input,select:select,regexp:regexp,specialChars:specialChars,clickInsideElement:clickInsideElement,orList:orList,andList:andList,searchOptionsWidget:searchOptionsWidget,loadingDots:loadingDots}=Groundhogg.element;const{tagPicker:tagPicker,emailPicker:emailPicker,linkPicker:linkPicker}=Groundhogg.pickers;const{emails:EmailsStore,tags:TagsStore,funnels:FunnelsStore}=Groundhogg.stores;const Filters={view:function(){},edit:function(){},types:{},groups:{}};const renderFilterView=(filter,filterGroupIndex,filterIndex)=>{return`
		<div class="filter filter-view" data-key="${filterIndex}" data-group="${filterGroupIndex}" tabindex="0">
			${Filters.types[filter.type].view(filter,filterGroupIndex,filterIndex)}
			<button class="delete-filter"><span class="dashicons dashicons-no-alt"></span></button>
		</div>`};const renderFilterEdit=(filter,filterGroupIndex,filterIndex)=>{return`
		<div class="filter filter-edit-wrap" data-key="${filterIndex}" data-group="${filterGroupIndex}">
			<div class="filter-edit" tabindex="0">
				<div class="header">
					<b>${Filters.types[filter.type].name}</b>
					<button class="close-edit"><span class="dashicons dashicons-no-alt"></span></button>
				</div>
				<div class="settings">
					${Filters.types[filter.type].edit(filter,filterGroupIndex,filterIndex)}
				</div>
				<div class="actions">
					<button class="delete"><span class="dashicons dashicons-trash"></span></button>
					<button class="commit"><span class="dashicons dashicons-yes"></span></button>
				</div>
			</div>
		</div>`};const registerFilterGroup=(group,name)=>{Filters.groups[group]=name};const registerFilter=(type,group="general",name="",opts={})=>{if(typeof name==="object"){let tmpOpts=name;name=opts;opts=tmpOpts}Filters.types[type]={type:type,group:group,name:name,view:function(filter){},edit:function(filter){},onMount:function(filter){},onDemount:function(filter){},preload:function(){},defaults:{},...opts}};const Comparisons={equals:"Equals",not_equals:"Not equals",contains:"Contains",not_contains:"Does not contain",starts_with:"Starts with",ends_with:"Ends with",does_not_start_with:"Does not start with",does_not_end_with:"Does not end with",less_than:"Less than",greater_than:"Greater than",empty:"Is empty",not_empty:"Is not empty"};const createFilters=(el="",filters=[],onChange=f=>{console.log(f)})=>({onChange:onChange,filters:filters,el:el,initFlag:false,currentGroup:false,currentFilter:false,isAddingFilterToGroup:false,tempFilterSettings:{},selectFiltersWidget:null,render:function(){var self=this;const groups=[];this.filters.forEach((filterGroup,j)=>{const filters=[];filterGroup.forEach((filter,k)=>{filters.push(self.currentGroup===j&&self.currentFilter===k?renderFilterEdit(filter,j,k):renderFilterView(filter,j,k))});filters.push(self.isAddingFilterToGroup===j?`<div class="add-filter-wrap"></div>`:`<button data-group="${j}" class="add-filter">
				  <span class="dashicons dashicons-plus-alt2"></span>
			  </button>`);groups.push(filters.join(""))});const separator=`<div class="or-separator"><span class="or-circle">Or...</span></div>`;return`
		  <div id="search-filters-editor">
			  ${groups.length>0?`${groups.map(group=>`<div class="group">${group}</div>`).join(separator)}
			  ${separator}`:""}
			  <div class="group" data-group="${groups.length}">
				  ${self.isAddingFilterToGroup===groups.length?`<div class="add-filter-wrap"></div>`:`<button data-group="${groups.length}" class="add-filter">
				  <span class="dashicons dashicons-plus-alt2"></span>
			  </button>`}
			  </div>
		  </div>`},init:function(){if(this.initFlag){this.mount()}else{this.initFlag=true;this.preload()}},mount:function(){$(el).html(this.render());this.eventHandlers()},preload:async function(){const promises=[];this.filters.forEach(group=>{group.forEach(filter=>{const{type:type}=filter;const filterType=Filters.types[type];let p=filterType.preload(filter);if(!p){return}if(Array.isArray(p)&&p.length>0){promises.push(...p)}else{promises.push(p)}})});if(promises.length===0){this.mount();return}$(el).html('<p><span id="search-loading-dots-pill">Loading<span id="search-loading-dots"></span></span></p>');const{stop:stopDots}=loadingDots("#search-loading-dots");if(promises.length>0){await Promise.all(promises)}stopDots();this.mount()},demount:function(){},eventHandlers:function(){var self=this;const reMount=()=>{self.mount()};const getFilterSettings=(group,key)=>{return self.filters[group][key]};const setActiveFilter=(group,filter,addingToGroup=false)=>{self.currentFilter=filter;self.currentGroup=group;self.isAddingFilterToGroup=addingToGroup;reMount()};const addFilter=(opts,group)=>{group=group>=0?group:this.isAddingFilterToGroup;if(self.filters.length===0){group=0;self.filters.push([])}else if(!self.filters[group]){self.filters.push([]);group=self.filters.length-1}self.filters[group].push({...opts});onChange(self.filters);setActiveFilter(group,self.filters[group].length-1)};const updateFilter=opts=>{this.tempFilterSettings={...this.tempFilterSettings,...opts};return this.tempFilterSettings};const commitFilter=(group,key)=>{group=group>=0?group:self.currentGroup;key=key>=0?key:self.currentFilter;self.filters[group][key]={...self.filters[group][key],...self.tempFilterSettings};this.tempFilterSettings={};onChange(self.filters);setActiveFilter(false,false)};const deleteFilter=(group,key)=>{group=group>=0?group:self.currentGroup;key=key>=0?key:self.currentFilter;self.filters[group].splice(key,1);if(self.filters.length>1&&self.filters[group].length===0){self.filters.splice(group,1)}onChange(self.filters);reMount()};this.filterPicker=searchOptionsWidget({selector:".add-filter-wrap",options:Object.values(Filters.types),groups:Filters.groups,onSelect:option=>{addFilter({type:option.type,...option.defaults})},filterOption:(option,search)=>{return option.name.match(regexp(search))},renderOption:option=>option.name,onClose:()=>{this.isAddingFilterToGroup=false;this.mount()},noOptions:"No matching filters..."});if(this.isAddingFilterToGroup!==false){this.filterPicker.mount()}if(this.currentGroup!==false&&this.currentFilter!==false){const $filterEdit=$(".filter-edit");$filterEdit.parent().width($filterEdit.width());const filterSettings=getFilterSettings(this.currentGroup,this.currentFilter);this.tempFilterSettings=filterSettings;const{type:type}=filterSettings;Filters.types[type].onMount(filterSettings,updateFilter);$filterEdit.on("keydown",e=>{const{key:key}=e;switch(key){case"Esc":case"Escape":setActiveFilter(false,false);break;case"Enter":break}}).focus()}$(`${el} .filter-view`).on("keydown",function(e){switch(e.key){case"Enter":case"Space":setActiveFilter($(this).data("group"),$(this).data("key"));break}});$(`${el} #search-filters-editor`).on("click",function(e){const clickedOnAddFilter=clickInsideElement(e,"button.add-filter");const clickedOnAddFilterSearch=clickInsideElement(e,"div.add-filter-wrap");const clickedOnFilterView=clickInsideElement(e,".filter.filter-view");const clickedOnFilterEdit=clickInsideElement(e,".filter-edit");if(clickedOnAddFilter){setActiveFilter(false,false,parseInt(clickedOnAddFilter.dataset.group))}else if(clickedOnFilterView){const clickedOnFilterDelete=clickInsideElement(e,".delete-filter");const filter=parseInt(clickedOnFilterView.dataset.key);const group=parseInt(clickedOnFilterView.dataset.group);if(clickedOnFilterDelete){deleteFilter(group,filter)}else{setActiveFilter(group,filter)}}else if(clickedOnFilterEdit){const clickedOnEditClose=clickInsideElement(e,".close-edit");const clickedOnDeleteFilter=clickInsideElement(e,".delete");const clickedOnCommitChanges=clickInsideElement(e,".commit");if(clickedOnEditClose){setActiveFilter(false,false)}else if(clickedOnCommitChanges){commitFilter()}else if(clickedOnDeleteFilter){deleteFilter()}}else if(clickedOnAddFilterSearch){}else{}})}});Groundhogg.filters.functions={createFilters:createFilters};const dateRanges={"24_hours":"In the last 24 hours","7_days":"In the last 7 days","30_days":"In the last 30 days","60_days":"In the last 60 days","90_days":"In the last 90 days","365_days":"In the last 365 days",before:"Before",after:"After",between:"Between"};const standardActivityDateFilterOnMount=(filter,updateFilter)=>{$("#filter-date-range, #filter-date, #filter-date2").on("change",function(e){const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()});if($el.prop("name")==="date_range"){const $date=$("#filter-date");const $date2=$("#filter-date2");switch($el.val()){case"between":$date.removeClass("hidden");$date2.removeClass("hidden");break;case"after":case"before":$date.removeClass("hidden");$date2.addClass("hidden");break;default:$date.addClass("hidden");$date2.addClass("hidden");break}}})};const standardActivityDateTitle=(before,{date_range:date_range,date:date,date2:date2})=>{switch(date_range){default:return`${before} ${dateRanges[date_range].toLowerCase()}`;case"between":return`${before} between <b>${date}</b> and <b>${date2}</b>`;case"before":return`${before} before <b>${date}</b>`;case"after":return`${before} after <b>${date}</b>`}};const standardActivityDateDefaults={date_range:"24_hours",date:"",date2:""};const standardActivityDateOptions=({date_range:date_range="24_hours",date:date="",date2:date2=""})=>{return` ${select({id:"filter-date-range",name:"date_range"},dateRanges,date_range)}

		  ${input({type:"date",value:date,id:"filter-date",className:`date ${["between","after","before"].includes(date_range)?"":"hidden"}`,name:"date"})}

		  ${input({type:"date",value:date2,name:"date2",id:"filter-date2",className:`value ${date_range==="between"?"":"hidden"}`})}`};const BasicTextFilter=name=>({name:name,view:function({compare:compare,value:value}){switch(compare){case"empty":case"not_empty":return`<b>${name}</b> ${Comparisons[compare].toLowerCase()}`;default:return`<b>${name}</b> ${Comparisons[compare].toLowerCase()} <b>${specialChars(value)}</b>`}},edit:function({compare:compare,value:value}){return`${select({id:"filter-compare",name:"compare"},Comparisons,compare)} ${input({id:"filter-value",name:"value",value:value})}`},onMount:function(filter,updateFilter){$("#filter-compare, #filter-value").on("change",function(e){const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{compare:"equals",value:""}});registerFilterGroup("contact","Contact");registerFilterGroup("activity","Activity");registerFilter("first_name","contact",{...BasicTextFilter("First Name")});registerFilter("last_name","contact",{...BasicTextFilter("Last Name")});registerFilter("email","contact",{...BasicTextFilter("Email Address")});const phoneTypes={primary:"Primary Phone",mobile:"Mobile Phone",company:"Company Phone"};registerFilter("phone","contact",{name:"Phone Number",view:function({phone_type:phone_type="primary",compare:compare,value:value}){switch(compare){case"empty":case"not_empty":return`<b>${phoneTypes[phone_type]}</b> ${Comparisons[compare].toLowerCase()}`;default:return`<b>${phoneTypes[phone_type]}</b> ${Comparisons[compare].toLowerCase()} <b>${specialChars(value)}</b>`}},edit:function({phone_type:phone_type,compare:compare,value:value}){return`${select({id:"filter-phone-type",name:"phone_type"},phoneTypes,phone_type)}
	  ${select({id:"filter-compare",name:"compare"},Comparisons,compare)} ${input({id:"filter-value",name:"value",value:value})}`},onMount:function(filter,updateFilter){$("#filter-phone-type, #filter-compare, #filter-value").on("change",function(e){const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{phone_type:"primary",compare:"equals",value:""}});registerFilter("date_created","contact",{view:function(filter){return standardActivityDateTitle("<b>Created</b>",filter)},edit:function(filter){return standardActivityDateOptions(filter)},onMount:function(filter,updateFilter){standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults}},"Date Created");const{optin_status:optin_status,owners:owners}=Groundhogg.filters;registerFilter("optin_status","contact",{view:function({compare:compare,value:value}){switch(compare){default:case"in":return`<b>Optin status</b> is ${orList(value.map(v=>`<b>${optin_status[v]}</b>`))}`;case"not_in":return`<b>Optin status</b> is not ${andList(value.map(v=>`<b>${optin_status[v]}</b>`))}`}},edit:function({compare:compare,value:value}){return`
		  ${select({id:"filter-compare",name:"compare",class:""},{in:"Is one of",not_in:"Is not one of"},compare)}
		  ${select({id:"filter-value",name:"value",class:"gh-select2",multiple:true},optin_status,value)} `},onMount:function(filter,updateFilter){$("#filter-value").select2();$("#filter-value, #filter-compare").on("change",function(e){const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{compare:"in",value:[]}},"Optin Status");registerFilter("owner","contact",{view:function({compare:compare,value:value}){const ownerName=ID=>{let user=owners.find(owner=>owner.ID==ID);return`${user.data.user_login} (${user.data.user_email})`};switch(compare){default:case"in":return`<b>Contact owner</b> is ${orList(value.map(v=>`<b>${ownerName(v)}</b>`))}`;case"not_in":return`<b>Contact owner</b> is not ${orList(value.map(v=>`<b>${ownerName(v)}</b>`))}`}},edit:function({compare:compare,value:value}){var values={};$.map(owners,function(user,index){values[user.data.ID]=`${user.data.user_login} (${user.data.user_email})`});return`
		  ${select({id:"filter-compare",name:"compare"},{in:"Is one of",not_in:"Is not one of"},compare)}

		  ${select({id:"filter-value",name:"value",multiple:true},values,value)} `},onMount:function(filter,updateFilter){$("#filter-value").select2();$("#filter-value, #filter-compare").on("change",function(e){const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{compare:"equals",value:[]}},"Owner");registerFilter("tags","contact",{view:function({tags:tags=[],compare:compare,compare2:compare2}){if(!tags){return"tags"}const tagNames=tags.map(id=>`<b>${TagsStore.get(parseInt(id)).data.tag_name}</b>`);switch(compare2){case"any":return`<b>Tags</b> ${compare} ${orList(tagNames)}`;default:case"all":return`<b>Tags</b> ${compare} ${andList(tagNames)}`}},edit:function({tags:tags,compare:compare,compare2:compare2}){tags=tags.map(id=>parseInt(id));return`
		  ${select({id:"filter-compare",name:"compare"},{includes:"Includes",excludes:"Excludes"},compare)}

		  ${select({id:"filter-compare2",name:"compare2"},{any:"Any",all:"All"},compare2)}

		  ${select({id:"filter-tags",name:"tags",className:"tag-picker",multiple:true},tags.map(id=>({value:id,text:TagsStore.get(id).data.tag_name})),tags)}`},onMount:function(filter,updateFilter){tagPicker("#filter-tags",true,items=>{TagsStore.itemsFetched(items)}).on("change",e=>{updateFilter({tags:$(e.target).val()})});$("#filter-compare, #filter-compare2").on("change",function(e){const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{compare:"includes",compare2:"any",tags:[]},preload:({tags:tags})=>{return TagsStore.fetchItems({tag_id:tags})}},"Tags");registerFilter("meta","contact",{view:function({meta:meta,compare:compare,value:value}){switch(compare){case"empty":case"not_empty":return`<b>${meta}</b> ${Comparisons[compare].toLowerCase()}`;default:return`<b>${meta}</b> ${Comparisons[compare].toLowerCase()} <b>${specialChars(value)}</b>`}},edit:function({meta:meta,compare:compare,value:value},filterGroupIndex,filterIndex){return`
		  ${input({id:"filter-meta",name:"meta",className:"meta-picker",dataGroup:filterIndex,dataKey:filterIndex,value:meta})}
		  ${select({id:"filter-compare",name:"compare",dataGroup:filterIndex,dataKey:filterIndex},Comparisons,compare)} ${input({id:"filter-value",name:"value",dataGroup:filterIndex,dataKey:filterIndex,value:value})}`},onMount:function(filter,updateFilter){const{metaPicker:metaPicker}=Groundhogg.pickers;metaPicker("#filter-meta");$("#filter-compare, #filter-value, #filter-meta").on("change",function(e){const $el=$(this);const{compare:compare}=updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{meta:"",compare:"equals",value:""}},"Custom meta");registerFilter("email_opened","activity",{view:function({email_id:email_id,date_range:date_range,date:date,date2:date2}){const emailName=email_id?EmailsStore.get(email_id).data.title:"any email";return standardActivityDateTitle(`Opened <b>${emailName}</b>`,{date_range:date_range,date:date,date2:date2})},edit:function({email_id:email_id,date_range:date_range,date:date,date2:date2}){const pickerOptions=email_id?{[email_id]:EmailsStore.get(email_id).data.title}:{};return`
		  ${select({id:"filter-email",name:"email_id"},pickerOptions,email_id)}

		  ${standardActivityDateOptions({date_range:date_range,date:date,date2:date2})}`},onMount:function(filter,updateFilter){emailPicker("#filter-email",false,items=>{EmailsStore.itemsFetched(items)}).on("change",e=>{updateFilter({email_id:parseInt(e.target.value)})});standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults,email_id:0},preload:({email_id:email_id})=>{return EmailsStore.fetchItem(parseInt(email_id))}},"Email Opened");registerFilter("email_link_clicked","activity",{view:function({email_id:email_id,link:link,date_range:date_range,date:date,date2:date2}){const emailName=email_id?EmailsStore.get(email_id).data.title:"any email";return standardActivityDateTitle(`Clicked ${link?"<b>"+link+"</b>":"a link"} in <b>${emailName}</b>`,{date_range:date_range,date:date,date2:date2})},edit:function({email_id:email_id,date_range:date_range,date:date,date2:date2}){const pickerOptions=email_id?{[email_id]:EmailsStore.get(email_id).data.title}:{};return`
		  ${select({id:"filter-email",name:"email_id"},pickerOptions,email_id)}

		  ${input({id:"filter-link",name:"link",autocomplete:"off",placeholder:"Start typing..."})}

		  ${standardActivityDateOptions({date_range:date_range,date:date,date2:date2})}`},onMount:function(filter,updateFilter){emailPicker("#filter-email",false,items=>{EmailsStore.itemsFetched(items)}).on("change",e=>{updateFilter({email_id:parseInt(e.target.value)})});linkPicker("#filter-link").on("change input blur",({target:target})=>{updateFilter({link:target.value})});standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults,link:"",email_id:0}},"Email Link Clicked");registerFilter("logged_in","activity",{view:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateTitle("<b>Logged in</b>",{date_range:date_range,date:date,date2:date2})},edit:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateOptions({date_range:date_range,date:date,date2:date2})},onMount:function(filter,updateFilter){standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults}},"Logged In");registerFilter("not_logged_in","activity",{view:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateTitle("<b>Has not logged in</b>",{date_range:date_range,date:date,date2:date2})},edit:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateOptions({date_range:date_range,date:date,date2:date2})},onMount:function(filter,updateFilter){standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults}},"Has Not Logged In");registerFilter("was_active","activity",{view:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateTitle("<b>Was active</b>",{date_range:date_range,date:date,date2:date2})},edit:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateOptions({date_range:date_range,date:date,date2:date2})},onMount:function(filter,updateFilter){standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults}},"Was Active");registerFilter("was_not_active","activity",{view:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateTitle("<b>Was not active</b>",{date_range:date_range,date:date,date2:date2})},edit:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateOptions({date_range:date_range,date:date,date2:date2})},onMount:function(filter,updateFilter){standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults}},"Was Not Active");registerFilter("funnel_event_history","activity","Funnel History",{view:function({funnel_id:funnel_id,step_id:step_id,date_range:date_range,date:date,date2:date2}){const funnel=FunnelsStore.get(funnel_id);const step=funnel.steps.find(s=>s.ID===step_id);return standardActivityDateTitle(`Completed <b>${step.data.step_title}</b> in <b>${funnel.data.title}</b>`,{date_range:date_range,date:date,date2:date2})},edit:function({date_range:date_range,date:date,date2:date2}){return standardActivityDateOptions({date_range:date_range,date:date,date2:date2})},onMount:function(filter,updateFilter){standardActivityDateFilterOnMount(filter,updateFilter)},defaults:{...standardActivityDateDefaults}})})(jQuery);