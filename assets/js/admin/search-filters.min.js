(function($){const{input:input,select:select,regexp:regexp,specialChars:specialChars,clickInsideElement:clickInsideElement}=Groundhogg.element;const Filters={view:function(){},edit:function(){},types:{},groups:{}};const renderFilterView=(filter,filterGroupIndex,filterIndex)=>{return`
		<div class="filter filter-view" data-key="${filterIndex}" data-group="${filterGroupIndex}">
			${Filters.types[filter.type].view(filter,filterGroupIndex,filterIndex)}
			<button class="delete-filter"><span class="dashicons dashicons-no-alt"></span></button>
		</div>`};const renderFilterEdit=(filter,filterGroupIndex,filterIndex)=>{return`
		<div class="filter filter-edit-wrap" data-key="${filterIndex}" data-group="${filterGroupIndex}">
			<div class="filter-edit">
				<div class="header">
					<b>${Filters.types[filter.type].name}</b>
					<button class="close-edit"><span class="dashicons dashicons-no-alt"></span></button>
				</div>
				<div class="settings">
					${Filters.types[filter.type].edit(filter,filterGroupIndex,filterIndex)}
				</div>
				<div class="actions">
					<button class="delete"><span class="dashicons dashicons-trash"></span></button>
					<button class="commit"><span class="dashicons dashicons-yes"></span></button>
				</div>
			</div>
		</div>`};const registerFilterGroup=(group,name)=>{Filters.groups[group]=name};const registerFilter=(type,group="general",opts={},name="")=>{Filters.types[type]={type:type,group:group,name:name,view:function(filter){},edit:function(filter){},onMount:function(filter){},onDemount:function(filter){},defaults:{},...opts}};const Comparisons={equals:"Equals",not_equals:"Not equals",contains:"Contains",not_contains:"Does not contain",starts_with:"Starts with",ends_with:"Ends with",does_not_start_with:"Does not start with",does_not_end_with:"Does not end with",less_than:"Less than",greater_than:"Greater than",is_empty:"Is empty",is_not_empty:"Is not empty"};const FilterSearch=addFilter=>({search:"",render:function(){return`
		  <div class="add-filter">
			  <div class="header">
				  ${input({id:"filter-search",name:"search",type:"search",autocomplete:"off",placeholder:"Search..."})}
				  <button class="close"><span class="dashicons dashicons-no-alt"></span></button>
			  </div>
			  <div class="filter-options">
			  </div>
		  </div>`},renderFilters:function(){const options=[];const self=this;Object.keys(Filters.groups).forEach(group=>{const filters=[];Object.values(Filters.types).filter(f=>f.group===group).forEach(filter=>{if(!self.search||self.search&&filter.name.match(regexp(self.search))){filters.push(`<div class="option" data-type="${filter.type}">${filter.name}</div>`)}});if(filters.length>0){options.push(`<div class="option-group" data-group="${group}">${Filters.groups[group]}</div>`,...filters)}});return options.join("")},mountFilters:function(){$(".filter-options").html(this.renderFilters());$(".filter-options .option").on("click",function(e){const type=$(this).data("type");const filter={type:type,...Filters.types[type].defaults};addFilter(filter)})},mount:function(){var self=this;$(".add-filter-wrap").html(self.render());this.mountFilters();$("#filter-search").on("change input",function(e){self.search=$(this).val();self.mountFilters()})}});const createFilters=(el,filters,onChange)=>({onChange:onChange,filters:filters,el:el,currentGroup:false,currentFilter:false,isAddingFilter:false,tempFilterSettings:{},render:function(){var self=this;const groups=[];this.filters.forEach((filterGroup,j)=>{const filters=[];filterGroup.forEach((filter,k)=>{filters.push(self.currentGroup===j&&self.currentFilter===k?renderFilterEdit(filter,j,k):renderFilterView(filter,j,k))});groups.push(filters.join(""))});return`
		  <div id="search-filters-editor">
			  ${groups.join('<div class="or-separator"></div>')}
			  ${this.isAddingFilter?`<div class="add-filter-wrap"></div>`:`<button class="add-filter">
				  <span class="dashicons dashicons-plus-alt2"></span>
			  </button>`}
		  </div>`},mount:function(){$(el).html(this.render());this.eventHandlers()},demount:function(){},eventHandlers:function(){var self=this;const reMount=()=>{self.mount()};const getFilterSettings=(group,key)=>{return self.filters[group][key]};const setActiveFilter=(group,filter)=>{self.currentFilter=filter;self.currentGroup=group;self.isAddingFilter=false;reMount();if(self.currentGroup!==false&&self.currentFilter!==false){const $filterEdit=$(".filter-edit");$filterEdit.parent().width($filterEdit.width());const filterSettings=getFilterSettings(self.currentGroup,self.currentFilter);self.tempFilterSettings=filterSettings;const{type:type}=filterSettings;Filters.types[type].onMount(filterSettings,updateFilter)}};const addFilter=(opts,group)=>{group=group>=0?group:0;if(self.filters.length===0){group=0;self.filters.push([])}self.filters[group].push({...opts});onChange(self.filters);setActiveFilter(group,self.filters[group].length-1)};const updateFilter=opts=>{console.log(opts);self.tempFilterSettings={...self.tempFilterSettings,...opts};return self.tempFilterSettings};const commitFilter=(group,key)=>{group=group>=0?group:self.currentGroup;key=key>=0?key:self.currentFilter;self.filters[group][key]={...self.filters[group][key],...self.tempFilterSettings};this.tempFilterSettings={};onChange(self.filters);setActiveFilter(false,false)};const deleteFilter=(group,key)=>{group=group>=0?group:self.currentGroup;key=key>=0?key:self.currentFilter;console.log({group:group,key:key});self.filters[group].splice(key,1);if(group!==0&&self.filters[group].length===0){self.filters.splice(group,1)}onChange(self.filters);reMount()};if(this.isAddingFilter){const adding=FilterSearch(addFilter);adding.mount()}$(`${el} #search-filters-editor`).on("click",function(e){const clickedOnAddFilter=clickInsideElement(e,"button.add-filter");const clickedOnAddFilterSearch=clickInsideElement(e,"div.add-filter");const clickedOnFilterView=clickInsideElement(e,".filter.filter-view");const clickedOnFilterEdit=clickInsideElement(e,".filter-edit");if(clickedOnAddFilter){self.isAddingFilter=true;self.currentFilter=false;self.currentGroup=false;reMount()}else if(clickedOnFilterView){const clickedOnFilterDelete=clickInsideElement(e,".delete-filter");const filter=parseInt(clickedOnFilterView.dataset.key);const group=parseInt(clickedOnFilterView.dataset.group);if(clickedOnFilterDelete){deleteFilter(group,filter)}else{setActiveFilter(group,filter)}}else if(clickedOnFilterEdit){const clickedOnEditClose=clickInsideElement(e,".close-edit");const clickedOnDeleteFilter=clickInsideElement(e,".delete");const clickedOnCommitChanges=clickInsideElement(e,".commit");if(clickedOnEditClose){setActiveFilter(false,false)}else if(clickedOnCommitChanges){commitFilter()}else if(clickedOnDeleteFilter){deleteFilter()}else{}}else if(clickedOnAddFilterSearch){const clickedOnClose=clickInsideElement(e,".close");if(clickedOnClose){self.isAddingFilter=false;reMount()}}else{self.currentFilter=false;self.currentGroup=false;reMount()}})}});Groundhogg.filters.functions={createFilters:createFilters};const BasicTextFilter=name=>({name:name,view:function({compare:compare,value:value},filterGroupIndex,filterIndex){switch(compare){case"_":case"!_":return`<b>${name}</b> ${Comparisons[compare].toLowerCase()}`;default:return`<b>${name}</b> ${Comparisons[compare].toLowerCase()} <b>${specialChars(value)}</b>`}},edit:function({compare:compare,value:value},filterGroupIndex,filterIndex){return`${select({id:"filter-compare",name:"compare",dataGroup:filterIndex,dataKey:filterIndex},Comparisons,compare)} ${input({id:"filter-value",name:"value",dataGroup:filterIndex,dataKey:filterIndex,value:value})}`},onMount:function(filter,updateFilter){console.log(filter);$("#filter-compare, #filter-value").on("change",function(e){console.log(e);const $el=$(this);updateFilter({[$el.prop("name")]:$el.val()})})},defaults:{compare:"equals",value:""}});registerFilterGroup("contact","Contact");registerFilter("first_name","contact",{...BasicTextFilter("First Name")});registerFilter("last_name","contact",{...BasicTextFilter("Last Name")});registerFilter("email","contact",{...BasicTextFilter("Email Address")});registerFilter("date_created","contact",{view:function({compare:compare,value:value,value2:value2},filterGroupIndex,filterIndex){switch(compare){case"before":return`<b>Date created</b> is before <b>${value}</b>`;case"after":return`<b>Date created</b> is after <b>${value}</b>`;case"between":return`<b>Date created</b> is between <b>${value}</b> and <b>${value2}</b>`}},edit:function({compare:compare,value:value,value2:value2},filterGroupIndex,filterIndex){return`${select({id:"filter-compare",name:"compare"},{before:"Before",after:"After",between:"Between"},compare)} ${input({type:"date",value:value,id:"filter-value",name:"value"})} ${input({type:"date",value:value2,id:"filter-value2",className:"hidden",name:"value2"})}`},onMount:function(filter,updateFilter){$("#filter-compare, #filter-value, #filter-value2").on("change",function(e){const $el=$(this);const{compare:compare}=updateFilter({[$el.prop("name")]:$el.val()});if(compare==="between"){$("#filter-value2").removeClass("hidden")}else{$("#filter-value2").addClass("hidden")}})},defaults:{compare:"before",value:"",value2:""}},"Date Created");const{optin_status:optin_status,owners:owners}=Groundhogg.filters})(jQuery);