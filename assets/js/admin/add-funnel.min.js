(function($,Templates){const{breadcrumbs:breadcrumbs,select:select,regexp:regexp,modal:modal,input:input,primaryButton:primaryButton,loadingDots:loadingDots}=Groundhogg.element;const{templates:templates,stepTypes:stepTypes}=Templates;const{post:post,get:get,routes:routes}=Groundhogg.api;const hasRequiredSteps=steps=>{return steps.reduce((hasStep,{data:data,type:type})=>{if(data){return stepTypes.hasOwnProperty(data.step_type)&&hasStep}else if(type){return stepTypes.hasOwnProperty(type)&&hasStep}return false},true)};const rowsOf=(size,items)=>{return items.reduce((rows,item)=>{if(rows[rows.length-1].length===size){rows.push([])}rows[rows.length-1].push(item);return rows},[[]])};const createFunnel=template=>{return post(`${routes.v4.funnels}`,{...template,ID:false}).then(r=>r.item)};const fillRow=(size,fill,row)=>{while(row.length<size){row.push(fill)}return row};const FunnelTemplatePicker=({selector:selector,breadcrumbs:crumbs=["Funnels","Add New"],onSelect:onSelect=funnel=>{console.log(funnel)},afterHeaderActions:afterHeaderActions="",onMount:onMount=()=>{}})=>({search:"",selectedTemplate:"",$el:$(selector),renderTemplate:template=>{const{ID:ID,data:data,meta:meta,steps:steps}=template;const stepCount=steps.length;const canUse=hasRequiredSteps(steps);const numActions=steps.filter(({data:data})=>data.step_group==="action").length;const numBenchmarks=steps.filter(({data:data})=>data.step_group==="benchmark").length;const pills=[`<span class="pill">${stepCount} steps</span>`,`<span class="pill green">${numActions} ${numActions===1?"action":"actions"}</span>`,`<span class="pill orange">${numBenchmarks} ${numBenchmarks===1?"benchmark":"benchmarks"}</span>`];return`
		  <div class="gh-panel template ${canUse?"enabled":"disabled"}" tabindex="0">
			  <div class="template-header">
				  <h2>${data.title}</h2>
				  <div class="actions" tabindex="0">
					  <button data-template="${ID}" class="select-template gh-button primary"
					          ${canUse?"":"disabled"}>Use Template
					  </button>
				  </div>
			  </div>
			  <div class="inside">
				  <p>${meta.description||""}</p>
				  <p>
					  ${pills.join("")}
				  </p>
			  </div>
		  </div>`},render:function(){return`
		  <div class="templates-picker">
			  <div id="header" class="gh-header is-sticky">
				  <div class="title-wrap">
					  <h1 class="breadcrumbs">
						  ${breadcrumbs(crumbs)}
					  </h1>
				  </div>
				  <div class="search-templates">
					  ${select({id:"campaign",name:"campaign"},{a:"campaign a",b:"campaign b"})}
					  <input type="search" id="search" name="search" placeholder="Search templates" value=""/>
				  </div>
				  <div class="template-actions">
					  <button id="import-button" class="gh-button secondary">Import</button>
					  <button id="scratch-button" class="gh-button secondary">Start From Scratch</button>
					  ${afterHeaderActions}
				  </div>
			  </div>
			  <div id="view"></div>
		  </div>`},renderTemplates:function(){return`<div id="templates">${rowsOf(3,this.getTemplates().map(t=>this.renderTemplate(t))).map(r=>`<div class="row">${fillRow(3,'<div class="fill"></div>',r).join("")}</div>`).join("")}</div>`},getTemplates:function(){return templates.filter(t=>{if(!this.search){return true}return t.data.title.match(regexp(this.search))})},titleModal:function(){const modalContent=(isCreating=false)=>{return`
			<div id="template-name"><h2>Name your email</h2>
				${input({id:"title-input",placeholder:"Title",value:this.newTitle,disabled:isCreating})}
				${primaryButton({id:"create",className:"medium bold",text:isCreating?"Creating":"Creat Email",disabled:isCreating||!this.newTitle})}
			</div>`};const{close:close,setContent:setContent}=modal({content:modalContent()});const handleCreate=()=>{setContent(modalContent(true));loadingDots(`#create`);createFunnel({...this.selectedTemplate,data:{...this.selectedTemplate.data,title:this.newTitle}}).then(funnel=>{close();onSelect(funnel)})};$(`#create`).on("click",handleCreate);$(`#title-input`).focus().on("change input keydown",e=>{this.newTitle=e.target.value;if(this.newTitle){$("#create").prop("disabled",false)}else{$("#create").prop("disabled",true)}if(e.type==="keydown"&&e.key==="Enter"&&this.newTitle){handleCreate()}})},mountTemplates:function(){$(`${selector} #view`).html(this.renderTemplates());$(`${selector} button.select-template`).on("click",e=>{const templateId=e.target.dataset.template;const template=templates.find(t=>t.ID==templateId);this.selectedTemplate=template;this.newTitle=this.selectedTemplate.data.title;this.titleModal()});$(`${selector} iframe.template-frame`).each(function(){const template=this.dataset.template})},renderImport:function(){if(this.importTemplate){return`
			<div id="import">
				<h1>Import your Email</h1>
				<div class="template-preview-wrap">
					<div class="import-template-preview">
						<iframe id="template-preview"></iframe>
					</div>
					<div class="template-actions">
						${primaryButton({text:"Use this template",id:"create-from-import",className:"big bold loud"})}
						<a href="#" class="cancel action-link">&larr; Cancel</a>
					</div>
				</div>
			</div>`}return`
		  <div id="import">
			  <h1>Import your Funnel</h1>
			  <input type="file" id="import-file" name="import" accept=".funnel"/>
			  ${this.importError?`<p class="error">${this.importError}</p>`:""}
			  <p><a class="action-link cancel">&larr; Cancel</a></p>
		  </div>`},mountImport:function(){$(`${selector} #view`).html(this.renderImport());if(this.importTemplate){setFrameContent($("#template-preview")[0],this.importTemplate.data.content);$("#create-from-import").on("click",e=>{this.selectedTemplate=this.importTemplate;this.newTitle=this.selectedTemplate.data.title||"";this.titleModal()})}const onReaderLoadHTML=e=>{const content=e.target.result;if(!content){this.importError="The provided file is not a valid funnel.";this.mountImport();this.importError="";return}this.importTemplate={data:{content:content},meta:{type:"html"}};this.mountImport()};const onReaderLoadJSON=e=>{const template=JSON.parse(e.target.result);if(!template){this.importError="The provided file is not a valid funnel.";this.mountImport();this.importError=""}else{this.importError="";this.importTemplate=template;this.mountImport()}};$(`${selector} a.cancel`).on("click",()=>{this.reset();this.mountTemplates()});$(`${selector} #import-file`).on("change",e=>{const files=e.target.files;const reader=new FileReader;const file=files[0];const ext=file.name.split(".").pop().toLowerCase();switch(ext){case"html":reader.onload=onReaderLoadHTML;reader.readAsText(file);return;case"json":reader.onload=onReaderLoadJSON;reader.readAsText(file);return}})},reset:function(){this.selectedTemplate=false;this.importTemplate=false;this.newTitle=""},mount:function(){this.$el.html(this.render());this.mountTemplates();$(`${selector} #search`).on("input change",e=>{this.search=e.target.value;this.reset();this.mountTemplates()});$(`${selector} #import-button`).on("click",e=>{this.reset();this.mountImport()});$(`${selector} #scratch-button`).on("click",e=>{this.reset();this.selectedTemplate={data:{},meta:{}};this.titleModal()});onMount()}});Groundhogg.FunnelTemplatePicker=FunnelTemplatePicker})(jQuery,AddFunnel);