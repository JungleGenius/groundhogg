($=>{const{sprintf,__,_x,_n}=wp.i18n;const State=Groundhogg.createState({route:"auth",endpoint:"apikeys",request:{}});const{Div,Fragment,makeEl,Modal,Span,Pg,An,Ul,Ol,Li,Input,Select,Toggle,Button,Dashicon,InputRepeater,ItemPicker}=MakeEl;const{icons,andList,el,escHTML,copyObject}=Groundhogg.element;const jsonCopy=stuff=>JSON.parse(JSON.stringify(stuff));const ApiRegistry=Groundhogg.createRegistry();const{root:apiRoot}=Groundhogg.api.routes.v4;const{base64_json_encode}=Groundhogg.functions;function setNestedValue(obj,path,value){const keys=path.split(".");let current=obj;for(let i=0;i<keys.length-1;i++){const key=keys[i];if(!current[key]){current[key]={}}current=current[key]}current[keys[keys.length-1]]=value}function getNestedValue(obj,path){const keys=path.split(".");let current=obj;for(let i=0;i<keys.length;i++){if(!current.hasOwnProperty(keys[i])){return undefined}current=current[keys[i]]}return current}const CommonParams={filters:plural=>({param:"filters",description:()=>Fragment([Pg({},sprintf(__("Filters are the most comprehensive way to search for %s that match your criteria.","groundhogg"),plural)),currEndpoint().method==="GET"?Pg({},sprintf(__('When using filters with <code class="get">GET</code> it is best to JSON encode and then base64 encode the filters.',"groundhogg"),plural)):""]),type:"array",required:false,control:({param,id})=>{let filters=getFromRequest(param);if(!Array.isArray(filters)){filters=[]}return Groundhogg.filters.ContactFilters(id,filters,filters=>{filters=filters.map(group=>group.map(({id,...filter})=>filter));if(currEndpoint().method==="GET"){filters=base64_json_encode(filters)}setInRequest(param,filters)})}}),search:(plural,columns=[])=>({param:"search",description:()=>Pg({},sprintf(__("Search for %s using a search phrase. Will match %s.","groundhogg"),plural,andList(columns.map(col=>el("code",{},col))))),type:"string",required:false}),limit:plural=>({param:"limit",description:()=>Pg({},sprintf(__("The number of %s to return.","groundhogg"),plural)),type:"int",required:false,default:20}),id:singular=>({param:"id",description:()=>Pg({},sprintf(__("The id of the %s to return.","groundhogg"),singular)),type:"int",required:true}),offset:plural=>({param:"offset",description:()=>Pg({},sprintf(__("Paginate through %s.","groundhogg"),plural)),type:"int",required:false,default:0}),order:plural=>({param:"order",description:()=>Pg({},sprintf(__("How to order %s.","groundhogg"),plural)),type:"string",required:false,default:"DESC",options:["ASC","DESC"]}),orderby:(plural,columns=[])=>({param:"orderby",description:()=>Pg({},sprintf(__("Order %s by a specific column. Supported columns are %s.","groundhogg"),plural,andList(columns.map(col=>el("code",{},col))))),type:"string",required:false,default:"ID"}),found_rows:plural=>({param:"found_rows",description:()=>Pg({},sprintf(__("Whether to return the total number of %s matching the query.","groundhogg"),plural)),type:"bool",required:false,default:"true"}),tags:param=>({param:param,type:"int[]|string[]",description:()=>Fragment([Pg({},__("An array of tag names or tag IDs. If passing names, if the tag does not exist it will be created. The array can be a mix of strings and IDs.","groundhogg"))]),control:({param,id})=>ItemPicker({id:id,noneSelected:"Select tags...",selected:[],fetchOptions:async search=>{let tags=await Groundhogg.stores.tags.fetchItems({search:search,limit:30});return tags.map(({ID,data})=>({id:ID,text:data.tag_name}))},onChange:items=>setInRequest(param,items.map(({id})=>id))})})};const setInRequest=(param,value)=>{setNestedValue(State.request,param,value);morphEl(ExampleRequest())};const getFromRequest=(param,def="")=>getNestedValue(State.request,param)??def;const ControlFromParam=({param,type,control:control=null,...props})=>{let id=`param-${param.replaceAll(".","-")}`;let name=param;if(control){return control({param:param,id:id,name:name})}if(props.options){return Select({name:param,id:param.replaceAll(".","-"),selected:getFromRequest(param,props.default),options:props.options,onChange:e=>setInRequest(param,e.target.value)})}switch(type){case"int":case"string":return Input({type:type==="int"?"number":"text",name:name,id:id,value:getFromRequest(param),className:"code",onInput:e=>setInRequest(param,type==="int"?parseInt(e.target.value):e.target.value)});case"bool":case"boolean":return Toggle({name:name,id:id,checked:getFromRequest(param,props.default)===true,onChange:e=>setInRequest(param,e.target.checked),onLabel:"True",offLabel:"False"})}};const ParamsList=(params,parentParam="")=>Fragment(params.map(({param,description,type,required,...props})=>{if(parentParam){param=`${parentParam}.${param}`}return Div({className:"parameter"},[Div({className:"display-flex gap-10 align-center"},[`<code class="param">${escHTML(param)}</code>`,`<span class="type">${escHTML(type)}</span>`,required?`<span class="required">${__("Required","groundhogg")}</span>`:null]),description,typeof props.default!=="undefined"&&props.default!==null?`<p>${sprintf(__("Defaults to %s."),`<code>${props.default}</code>`)}</p>`:null,props.subParams?null:ControlFromParam({param:param,type:type,...props}),props.subParams?Div({className:"subparams gh-panel outlined"},[Div({className:"gh-panel-header"},`<h2>Child parameters</h2>`),ParamsList(props.subParams,param)]):null])}));const ParamsRepeater=params=>{return Fragment([...State.request.map((item,i)=>{return Div({className:"gh-panel outlined"},[Div({className:"gh-panel-header"},[makeEl("h2",{},`Index ${i}`),Button({id:`delete-item-index-${i}`,className:"gh-button icon danger text small",onClick:e=>{State.request.splice(i,1);morph()}},Dashicon("trash"))]),ParamsList(params,`${i}`)])}),Button({className:"gh-button secondary full-width",onClick:e=>{State.request.push({});morph()}},"Add another item")])};const getGeneratedRequest=()=>{const METHOD=currEndpoint().method.toUpperCase();let url=currEndpoint().endpoint;let params=JSON.parse(JSON.stringify(State.request));if(currEndpoint().identifiers&&currEndpoint().identifiers.length){currEndpoint().identifiers.forEach(({param})=>{if(params[param]){url=url.replace(`<${param}>`,params[param])}delete params[param]})}if(METHOD==="GET"&&Object.keys(params).length){url=`${url}?${$.param(params)}`}return{url:url,params:params,METHOD:METHOD}};const sendTestRequest=async()=>{let{url,params,METHOD}=getGeneratedRequest();let response;if(["DELETE","PATCH"].includes(METHOD)){try{await new Promise((res,rej)=>{Modal({onClose:rej,width:"400px"},({close})=>Fragment([Pg({style:{fontSize:"16px",marginTop:0}},__("Are you sure you want to execute this API call? It will make real changes to the database.","groundhogg")),Div({className:"display-flex flex-end gap-10"},[Button({className:"gh-button primary text",onClick:()=>{close()}},"No, cancel"),Button({className:"gh-button danger",onClick:()=>{res();close()}},"Yes, run anyway")])]))})}catch(err){return}}if(METHOD==="GET"){response=await fetch(url,{method:"GET",headers:{"X-WP-Nonce":wpApiSettings.nonce}})}else{response=await fetch(url,{method:METHOD,headers:{"Content-Type":"application/json","X-WP-Nonce":wpApiSettings.nonce},body:JSON.stringify(params)})}let json=await response.json();State.set({response:json});morphEl(ExampleResponse())};const ExampleRequest=()=>{let{url,params,METHOD}=getGeneratedRequest();return Div({id:"example-request",className:"display-flex column gap-10"},[makeEl("h2",{},__("Example request")),METHOD==="GET"?makeEl("pre",{},escHTML([`curl -X ${METHOD} ${url}`].join("\n"))):makeEl("pre",{},escHTML([`curl -X ${METHOD} ${url} \\`,`-H 'Content-Type: application/json' \\`,Object.keys(params).length?`-d '${JSON.stringify(params,null,2)}'`:""].join("\n"))),Button({id:`test-${State.route}-${State.endpoint}`,className:"gh-button secondary full-width",onClick:sendTestRequest},__("Test Request"))])};const ExampleResponse=()=>Div({id:"example-response",className:"display-flex column gap-10"},[makeEl("h2",{},__("Example response")),makeEl("pre",{},escHTML(JSON.stringify(State.response??currEndpoint().response,null,2)))]);const currEndpoint=()=>State.endpoint?currRoute().endpoints[State.endpoint]:undefined;const currRoute=()=>ApiRegistry[State.route];const Docs=()=>{let currRoute=ApiRegistry[State.route];let currEndpoint;if(State.endpoint){currEndpoint=currRoute.endpoints[State.endpoint];State.set({request:currEndpoint.request,response:currEndpoint.response})}return Div({id:"api-docs",className:"gh-fixed-ui"},[Div({id:"api-header",className:"gh-header sticky"},[Groundhogg.isWhiteLabeled?Span():icons.groundhogg,`<h1>${__("Rest API","groundhogg")}</h1>`]),Div({id:"docs-ui",className:"display-flex"},[makeEl("nav",{},makeEl("ul",{},ApiRegistry.keys().map(key=>{let item=ApiRegistry[key];let endpoints=item.endpoints;return makeEl("li",{id:`route-${key}`,className:State.route===key?"current":""},[makeEl("a",{href:`#${key}`},item.name),makeEl("ul",{},endpoints.keys().map(key2=>{let endpoint=endpoints[key2];return makeEl("li",{id:`route-${key}-endpoint-${key2}`,className:State.endpoint===key2?"current":""},makeEl("a",{href:`#${key}/${key2}`},[endpoint.method?`<code class="${endpoint.method.toLowerCase()}">${endpoint.method.toUpperCase()}</code>`:null,endpoint.name]))}))])}))),currEndpoint?Div({id:"endpoint-display",className:"endpoint full-width"},[makeEl("h1",{},currEndpoint.name),currEndpoint.description,currEndpoint.endpoint?makeEl("h2",{},__("Endpoint","groundhogg")):null,currEndpoint.endpoint?`<pre><code class="${currEndpoint.method.toLowerCase()}">${currEndpoint.method.toUpperCase()}</code> ${escHTML(currEndpoint.endpoint)}</pre>`:null,currEndpoint.identifiers?.length?Fragment([makeEl("h2",{},__("Identifiers","groundhogg")),ParamsList(currEndpoint.identifiers)]):null,currEndpoint.params?.length?Fragment([makeEl("h2",{},__("Parameters","groundhogg")),currEndpoint.repeater?ParamsRepeater(currEndpoint.params):ParamsList(currEndpoint.params)]):null]):Div({id:"endpoint-display",className:"endpoint full-width"},[makeEl("h1",{},currRoute.name),currRoute.description]),currEndpoint&&currEndpoint.request?Div({id:"request-display",className:"request"},[ExampleRequest(),currEndpoint.response?ExampleResponse():null]):null])])};const morphEl=el=>morphdom(document.getElementById(el.id),el,{});const morph=()=>morphdom(document.getElementById("api-docs"),Docs(),{});const stateFromHash=()=>{let hash=location.hash;let[route,endpoint=""]=hash.substring(1).split("/");State.set({route:route,endpoint:endpoint,request:{},response:{}})};window.addEventListener("hashchange",e=>{stateFromHash();morph()});$(()=>{if(location.hash){stateFromHash()}morph();document.getElementById("wpfooter").remove()});ApiRegistry.add("auth",{name:__("Authentication"),description:()=>Fragment([Pg({},__("Groundhogg offers a variety of authentication methods for you to use to access the REST API.","groundhogg")),Ul({},[Li({},An({href:"#auth/apikeys"},__("Using API keys"))),Li({},An({href:"#auth/pswd"},__("Using application passwords")))]),Pg({},__("The Groundhogg REST API is permission based. Regardless of the authentication method, only users accessing the API with the required permissions will be able to perform requests.","groundhogg"))]),endpoints:Groundhogg.createRegistry()});ApiRegistry.auth.endpoints.add("apikeys",{name:__("Using API keys","groundhogg"),description:()=>Fragment([Pg({},__("Using API keys is an easy way to get started with the REST API. And is suitable for most backend applications.","groundhogg")),Pg({},__("When creating an API key, you are provided with a <b>token</b> and a <b>public key</b>. Both are required to authenticate requests.","groundhogg")),Pg({},__("You must add both to the header of your request.","groundhogg")),makeEl("pre",{},escHTML([`curl ${apiRoot}/<endpoint> \\`,`\t-H "Gh-Token: <token>" \\`,`\t-H "Gh-Public-Key: <public-key>"`].join("\n")))])});ApiRegistry.auth.endpoints.add("pswd",{name:__("Using application passwords","groundhogg"),description:()=>Fragment([Pg({},__("Using application passwords is the <b>BEST WAY</b> to use the Groundhogg REST API from external applications.","groundhogg")),Pg({},__("Applications passwords use basic authentication, which is supported by most external applications that you might want to integrate with Groundhogg.","groundhogg")),makeEl("pre",{},escHTML([`curl --user "<username>:<application password>" ${apiRoot}/<endpoint>`].join("\n"))),Pg({},__('For more on application passwords, see the <a href="https://make.wordpress.org/core/2020/11/05/application-passwords-integration-guide/" target="_blank">WordPress application password integration guide</a>.',"groundhogg"))])});ApiRegistry.add("contacts",{name:__("Contacts","groundhogg"),description:"",endpoints:Groundhogg.createRegistry()});ApiRegistry.contacts.endpoints.add("list",{name:__("List contacts","groundhogg"),description:()=>Pg({},__("Retrieve a list of contacts.","groundhogg")),method:"GET",endpoint:`${apiRoot}/contacts`,params:[CommonParams.filters("contacts"),CommonParams.search("contacts",["first_name","last_name","email"]),CommonParams.limit("contacts"),CommonParams.offset("contacts"),CommonParams.order("contacts"),CommonParams.orderby("contacts",["ID","first_name","last_name","email","optin_status","date_created"])],request:{search:"John",limit:20},response:{total_items:99,items:[{ID:1234,data:{email:"john@example.com",first_name:"John",last_name:"Doe",full_name:"John Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2023-10-18 13:05:25",date_optin_status_changed:"2023-10-18 13:05:25",age:false},meta:{locale:"en_US",primary_phone:"4658444269",mobile_phone:"",country:"US",region:"NY",city:"New York",birthday:""},tags:[{ID:11,data:{tag_id:11,tag_slug:"customer",tag_name:"Customer"}}],user:false,is_marketable:true,is_deliverable:true}],status:"success"}});ApiRegistry.contacts.endpoints.add("create",{name:__("Add multiple contacts","groundhogg"),description:()=>Fragment([Pg({},__("Adds multiple contacts at once.","groundhogg")),Pg({},__("If an email address is used that already exists in the DB, it will update the existing contact record.","groundhogg"))]),method:"POST",endpoint:`${apiRoot}/contacts`,params:[{param:"data",description:()=>Pg({},__("The data object must contain the basic contact fields such as first_name, last_name, and email.","groundhogg")),type:"object",required:true,default:null,subParams:[{param:"email",description:()=>Pg({},__("The contact's email address.","groundhogg")),type:"string",required:true},{param:"first_name",description:()=>Pg({},__("The contact's first name.","groundhogg")),type:"string",required:false},{param:"last_name",description:()=>Pg({},__("The contact's last name.","groundhogg")),type:"string",required:false},{param:"optin_status",description:()=>Fragment([Pg({},__("The contact's opt-in status, represented as an integer.","groundhogg")),Pg({},andList(Object.keys(Groundhogg.filters.optin_status).map(os=>`<code>${os}</code> for <b>${Groundhogg.filters.optin_status[os]}</b>`)))]),type:"int",required:false}]},{param:"meta",description:()=>Fragment([Pg({},__("The meta object can contain any number of arbitrary key&rarr;value pairs.","groundhogg")),Pg({},__("All custom fields, as well as some of the other basic fields (primary_phone, street_address_1, etc.) must be added within the meta object.","groundhogg"))]),type:"object",required:false,subParams:[{param:"<key>",description:Pg({},__("Any arbitrary key with any arbitrary value.","groundhogg")),type:"mixed",required:false,control:({param,id,name})=>{param=param.replace(".<key>","");let meta=getFromRequest(param,{});let rows=Object.keys(meta).map(key=>[key,meta[key]]);return InputRepeater({id:id,rows:rows,cells:[props=>Input(props),props=>Input(props)],onChange:rows=>{let newMeta={};rows.forEach(([key,val])=>newMeta[key]=val);setInRequest(param.replace(".<key>",""),newMeta)}})}}]},CommonParams.tags("tags")],repeater:true,request:[{data:{first_name:"John",last_name:"Doe",email:"john@example.com",optin_status:2},meta:{custom_field:"abc",primary_phone:"+1 555 555-5555",Foo:"bar"}},{data:{email:"jane@example.com",first_name:"Jane",last_name:"Doe",optin_status:2},meta:{custom_field:"123"},tags:[25]}],response:{total_items:2,items:[{ID:1234,data:{email:"john@example.com",first_name:"John",last_name:"Doe",full_name:"John Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2024-05-31 13:55:51",date_optin_status_changed:"2024-05-31 13:55:51"},meta:{locale:"en_US",custom_field:"abc",primary_phone:"+1 555 555-5555",foo:"bar"},tags:[],is_marketable:true,is_deliverable:true},{ID:4321,data:{email:"jane@example.com",first_name:"Jane",last_name:"Doe",full_name:"Jane Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2024-06-01 19:35:53",date_optin_status_changed:"2024-06-01 19:35:53"},meta:{locale:"en_US",custom_field:"123"},tags:[],is_marketable:true,is_deliverable:true}],status:"success"}});ApiRegistry.contacts.endpoints.add("update",{name:__("Update multiple contacts","groundhogg"),description:()=>Fragment([Pg({},__("Update multiple contacts at once.","groundhogg")),Pg({},__("Trying to update a contact that does not exist will not create a new contact. Instead use POST which will update contacts if they already exist.","groundhogg"))]),method:"PATCH",endpoint:`${apiRoot}/contacts`,params:[{param:"ID",type:"int",required:true,description:()=>Fragment([Pg({},__("The ID of the contact.","groundhogg")),Pg({},__("The ID is normally required unless the email address is provided within the data object.","groundhogg"))])},...(params=>{params[0]=copyObject(params[0]);params[0].required=false;params[0].subParams[0].required=false;return params})([...ApiRegistry.contacts.endpoints.create.params])],repeater:true,request:[{data:{first_name:"John",last_name:"Doe",email:"john@example.com",optin_status:2},meta:{custom_field:"abc",primary_phone:"+1 555 555-5555",Foo:"bar"}},{data:{email:"jane@example.com",first_name:"Jane",last_name:"Doe",optin_status:2},meta:{custom_field:"123"},tags:[25]}],response:{total_items:2,items:[{ID:1234,data:{email:"john@example.com",first_name:"John",last_name:"Doe",full_name:"John Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2024-05-31 13:55:51",date_optin_status_changed:"2024-05-31 13:55:51"},meta:{locale:"en_US",custom_field:"abc",primary_phone:"+1 555 555-5555",foo:"bar"},tags:[],is_marketable:true,is_deliverable:true},{ID:4321,data:{email:"jane@example.com",first_name:"Jane",last_name:"Doe",full_name:"Jane Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2024-06-01 19:35:53",date_optin_status_changed:"2024-06-01 19:35:53"},meta:{locale:"en_US",custom_field:"123"},tags:[],is_marketable:true,is_deliverable:true}],status:"success"}});ApiRegistry.contacts.endpoints.add("bulk-update",{name:__("Bulk update contacts","groundhogg"),description:()=>Pg({},__("Bulk update contacts with the same information using a query.","groundhogg")),method:"PATCH",endpoint:`${apiRoot}/contacts`,params:[{param:"query",description:()=>Pg({},__("The query to identify the contacts you wish to update.","groundhogg")),type:"object",required:true,subParams:[CommonParams.filters("contacts")]},(param=>{param.required=false;param.subParams.splice(0,3);return param})(copyObject(ApiRegistry.contacts.endpoints.create.params[0])),ApiRegistry.contacts.endpoints.create.params[1],CommonParams.tags("add_tags"),CommonParams.tags("remove_tags"),{param:"bg",description:()=>Pg({},__("Whether to update the contacts using a background task.","groundhogg")),type:"bool",required:false,default:false}],request:{query:{},data:{optin_status:1},meta:{custom_field:"abc"}},response:{total_items:99,items:[{ID:1234,data:{email:"john@example.com",first_name:"John",last_name:"Doe",full_name:"John Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2023-10-18 13:05:25",date_optin_status_changed:"2023-10-18 13:05:25",age:false},meta:{locale:"en_US",primary_phone:"4658444269",mobile_phone:"",country:"US",region:"NY",city:"New York",birthday:""},tags:[{ID:11,data:{tag_id:11,tag_slug:"customer",tag_name:"Customer"}}],user:false,is_marketable:true,is_deliverable:true}],status:"success"}});ApiRegistry.contacts.endpoints.add("delete",{name:__("Delete contacts","groundhogg"),description:()=>Pg({},__("Delete many contacts that match the query at once.","groundhogg")),method:"DELETE",endpoint:`${apiRoot}/contacts`,params:[CommonParams.filters("contacts"),CommonParams.search("contacts",["first_name","last_name","email"]),CommonParams.limit("contacts"),CommonParams.offset("contacts"),{param:"bg",description:()=>Pg({},__("Whether to delete the contacts using a background task.","groundhogg")),type:"bool",required:false,default:false}],request:{},response:{items:[{ID:1234,data:{},meta:{}}],total_items:10}});ApiRegistry.contacts.endpoints.add("create-single",{name:__("Add a contact","groundhogg"),description:()=>Pg({},__("Adds a contact.","groundhogg")),method:"POST",endpoint:`${apiRoot}/contacts`,params:ApiRegistry.contacts.endpoints.create.params,request:{data:{first_name:"John",last_name:"Doe",email:"john@example.com",optin_status:2},meta:{custom_field:"abc",primary_phone:"+1 555 555-5555"}},response:{item:{ID:1234,data:{email:"john@example.com",first_name:"John",last_name:"Doe",full_name:"John Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2024-05-31 13:55:51",date_optin_status_changed:"2024-05-31 13:55:51"},meta:{locale:"en_US",custom_field:"abc",primary_phone:"+1 555 555-5555",foo:"bar"},tags:[],user:false,is_marketable:true,is_deliverable:true},status:"success"}});ApiRegistry.contacts.endpoints.add("get-single",{name:__("Retrieve a contact","groundhogg"),description:()=>Pg({},__("Retrieve a single contact.","groundhogg")),method:"GET",endpoint:`${apiRoot}/contacts/<id>`,identifiers:[CommonParams.id("contact")],request:{},response:ApiRegistry.contacts.endpoints["create-single"].response});ApiRegistry.contacts.endpoints.add("update-single",{name:__("Update a contact","groundhogg"),description:()=>Pg({},__("Update a single contact.","groundhogg")),method:"PATCH",endpoint:`${apiRoot}/contacts/<id>`,identifiers:[CommonParams.id("contact")],params:[(param=>{param.required=false;param.subParams[0].required=false;return param})(copyObject(ApiRegistry.contacts.endpoints["create-single"].params[0])),ApiRegistry.contacts.endpoints["create-single"].params[1],CommonParams.tags("add_tags"),CommonParams.tags("remove_tags")],request:{data:{first_name:"John",last_name:"Doe"},meta:{custom_field:"foo"}},response:ApiRegistry.contacts.endpoints["create-single"].response});ApiRegistry.contacts.endpoints.add("delete-single",{name:__("Delete a contact","groundhogg"),description:()=>Pg({},__("Delete a single contact.","groundhogg")),method:"DELETE",endpoint:`${apiRoot}/contacts/<id>`,identifiers:[CommonParams.id("contact")],request:{},response:{status:"success"}});ApiRegistry.contacts.endpoints.add("merge",{name:__("Merge contacts","groundhogg"),description:()=>Fragment([Pg({},__("Merge other contact records into one.","groundhogg")),Pg({},__("All activity, events, and history will be retained. The most recent available information will be used from each contact record.","groundhogg"))]),method:"POST",endpoint:`${apiRoot}/contacts/<id>/merge`,identifiers:[CommonParams.id("contact")],params:[{param:"others",type:"int[]",description:()=>Pg({},__("An array of contact IDs.","groundhogg")),control:({param,name,id})=>{let others=getFromRequest(param,[]);let rows=others.map(id=>[id]);return InputRepeater({id:id,rows:rows,cells:[props=>Input({...props,type:"number"})],onChange:rows=>{setInRequest(param,rows.map(([id])=>parseInt(id)))}})}}],request:{others:[11,12]},response:{status:"success"}});ApiRegistry.add("tags",{name:__("Tags"),description:"",endpoints:Groundhogg.createRegistry()});ApiRegistry.tags.endpoints.add("list",{name:__("List tags","groundhogg"),description:()=>Pg({},__("Retrieve a list of tags.","groundhogg")),method:"GET",endpoint:`${apiRoot}/tags`,params:[CommonParams.search("tags",["tag_name","tag_description","tag_slug"]),CommonParams.limit("tags"),CommonParams.offset("tags"),CommonParams.order("tags"),CommonParams.orderby("tags",["tag_id","tag_name","tag_slug"])],request:{search:"Customer",limit:20},response:{total_items:99,items:[{ID:1234,data:{email:"john@example.com",first_name:"John",last_name:"Doe",full_name:"John Doe",user_id:0,owner_id:1,optin_status:2,date_created:"2023-10-18 13:05:25",date_optin_status_changed:"2023-10-18 13:05:25",age:false},meta:{locale:"en_US",primary_phone:"4658444269",mobile_phone:"",country:"US",region:"NY",city:"New York",birthday:""},tags:[{ID:11,data:{tag_id:11,tag_slug:"customer",tag_name:"Customer"}}],user:false,is_marketable:true,is_deliverable:true}],status:"success"}});ApiRegistry.tags.endpoints.add("create",{name:__("Create multiple tags","groundhogg"),description:()=>Pg({},__("Create multiple new tags at once.","groundhogg")),method:"POST",endpoint:`${apiRoot}/tags/`,params:[{param:"data",description:()=>Fragment([Pg({},__("The data object contains all the necessary information.","groundhogg"))]),type:"object",required:true,subParams:[{param:"tag_name",description:()=>Pg({},__("The name of the tag.","groundhogg")),type:"string",required:true},{param:"tag_description",description:()=>Pg({},__("Describe how the tag is supposed to be used. This will only be visible in the admin unless the tag is used as a preference.","groundhogg")),type:"string",required:false},{param:"tag_slug",description:()=>Pg({},__("A unique slug for the tag. It will be auto generated from the tag_name unless supplied.","groundhogg")),type:"string",required:false}]}],request:{data:{tag_name:"",tag_description:"",tag_slug:""}},response:{}});ApiRegistry.tags.endpoints.add("create-single",{name:__("Create a tag","groundhogg"),description:()=>Pg({},__("Create a new tag.","groundhogg")),method:"POST",endpoint:`${apiRoot}/tags/`,params:[{param:"data",description:()=>Fragment([Pg({},__("The data object contains all the necessary information.","groundhogg"))]),type:"object",required:true,subParams:[{param:"tag_name",description:()=>Pg({},__("The name of the tag.","groundhogg")),type:"string",required:true},{param:"tag_description",description:()=>Pg({},__("Describe how the tag is supposed to be used. This will only be visible in the admin unless the tag is used as a preference.","groundhogg")),type:"string",required:false},{param:"tag_slug",description:()=>Pg({},__("A unique slug for the tag. It will be auto generated from the tag_name unless supplied.","groundhogg")),type:"string",required:false}]}],request:{data:{tag_name:"",tag_description:"",tag_slug:""}},response:{}});ApiRegistry.add("broadcasts",{name:__("Broadcasts"),description:"",endpoints:Groundhogg.createRegistry()});ApiRegistry.broadcasts.endpoints.add("create",{name:__("Schedule a broadcast","groundhogg"),description:()=>Pg({},__("Schedule a new broadcast to be sent.","groundhogg")),method:"POST",endpoint:`${apiRoot}/broadcasts/`,params:[{param:"query",description:()=>Fragment([Pg({},__("The query object is how you select the contacts that will recieve the broadcast.","groundhogg"))]),type:"object",required:true,subParams:[CommonParams.filters("contacts")]},{param:"object_type",type:"string",required:false,options:["email","sms"],default:"email",description:()=>Fragment([Pg({},__("Specify whether the broadcast is for an email or SMS. If using SMS you must have the SMS addon installed.","groundhogg"))])},{param:"object_id",type:"int",required:true,description:()=>Fragment([Pg({},__("The ID of the email or SMS to use in the broadcast.","groundhogg"))])},{param:"date",type:"string",required:true,description:()=>Fragment([Pg({},__("The date you want to broadcast to be sent. Uses the site timezone.","groundhogg")),Pg({},__("Unneeded if using send_now.","groundhogg"))]),control:({param,id})=>Input({type:"date",name:param,id:id,value:getFromRequest(param),onInput:e=>setInRequest(param,e.target.value)})},{param:"time",type:"string",required:true,description:()=>Fragment([Pg({},__("The time of day for broadcast to be sent. Uses the site timezone.","groundhogg")),Pg({},__("Unneeded if using send_now.","groundhogg"))]),control:({param,id})=>Input({type:"time",name:param,id:id,value:getFromRequest(param),onInput:e=>setInRequest(param,e.target.value)})},{param:"send_now",type:"bool",required:false,description:()=>Fragment([Pg({},__("Whether to send the broadcast immediately.","groundhogg"))])}],request:{query:{filters:[[{type:"is_marketable",marketable:"yes"}]]},object_type:"email",object_id:1,date:moment().format("YYYY-MM-DD"),time:moment().add(1,"hour").format("HH:00:00"),send_now:false},response:{}})})(jQuery);