{"version":3,"sources":["@wordpress/data/src/namespace-store/index.js"],"names":["createResolversCache","cache","isRunning","selectorName","args","get","clear","delete","markAsRunning","EquivalentKeyMap","set","createNamespace","key","options","registry","reducer","store","createReduxStore","resolversCache","resolvers","actions","mapActions","metadataActions","selectors","mapSelectors","metadataSelectors","selector","state","metadata","isRegistrySelector","root","result","mapResolvers","getSelectors","getActions","__unstableOriginalGetState","getState","subscribe","listener","lastState","hasChanged","controls","builtinControls","normalizedControls","control","isRegistryControl","middlewares","promise","enhancers","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","push","name","instanceId","initialState","enhancedReducer","metadataReducer","createStateSelector","registrySelector","runSelector","argsLength","arguments","length","Array","i","hasResolver","createBoundAction","action","Promise","resolve","dispatch","mappedResolvers","resolver","fulfill","mapSelector","selectorResolver","fulfillSelector","isFulfilled","hasStartedResolution","setTimeout","startResolution","fulfillResolver","finishResolution"],"mappings":";;;;;;;;;;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AAKA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;;;;;AAKA,SAASA,oBAAT,GAAgC;AAC/B,MAAMC,KAAK,GAAG,EAAd;AACA,SAAO;AACNC,IAAAA,SADM,qBACKC,YADL,EACmBC,IADnB,EAC0B;AAC/B,aAAOH,KAAK,CAAEE,YAAF,CAAL,IAAyBF,KAAK,CAAEE,YAAF,CAAL,CAAsBE,GAAtB,CAA2BD,IAA3B,CAAhC;AACA,KAHK;AAKNE,IAAAA,KALM,iBAKCH,YALD,EAKeC,IALf,EAKsB;AAC3B,UAAKH,KAAK,CAAEE,YAAF,CAAV,EAA6B;AAC5BF,QAAAA,KAAK,CAAEE,YAAF,CAAL,CAAsBI,MAAtB,CAA8BH,IAA9B;AACA;AACD,KATK;AAWNI,IAAAA,aAXM,yBAWSL,YAXT,EAWuBC,IAXvB,EAW8B;AACnC,UAAK,CAAEH,KAAK,CAAEE,YAAF,CAAZ,EAA+B;AAC9BF,QAAAA,KAAK,CAAEE,YAAF,CAAL,GAAwB,IAAIM,yBAAJ,EAAxB;AACA;;AAEDR,MAAAA,KAAK,CAAEE,YAAF,CAAL,CAAsBO,GAAtB,CAA2BN,IAA3B,EAAiC,IAAjC;AACA;AAjBK,GAAP;AAmBA;AAED;;;;AAIA;;;;;;;;;;;;;AAWe,SAASO,eAAT,CAA0BC,GAA1B,EAA+BC,OAA/B,EAAwCC,QAAxC,EAAmD;AACjE,MAAMC,OAAO,GAAGF,OAAO,CAACE,OAAxB;AACA,MAAMC,KAAK,GAAGC,gBAAgB,CAAEL,GAAF,EAAOC,OAAP,EAAgBC,QAAhB,CAA9B;AACA,MAAMI,cAAc,GAAGlB,oBAAoB,EAA3C;AAEA,MAAImB,SAAJ;AACA,MAAMC,OAAO,GAAGC,UAAU,iCAErBC,eAFqB,GAGrBT,OAAO,CAACO,OAHa,GAKzBJ,KALyB,CAA1B;AAOA,MAAIO,SAAS,GAAGC,YAAY,iCAEvB,uBACFC,iBADE,EAEF,UAAEC,QAAF;AAAA,WAAgB,UAAEC,KAAF;AAAA,wCAAYvB,IAAZ;AAAYA,QAAAA,IAAZ;AAAA;;AAAA,aACfsB,QAAQ,MAAR,UAAUC,KAAK,CAACC,QAAhB,SAA6BxB,IAA7B,EADe;AAAA,KAAhB;AAAA,GAFE,CAFuB,GAOvB,uBAAWS,OAAO,CAACU,SAAnB,EAA8B,UAAEG,QAAF,EAAgB;AAChD,QAAKA,QAAQ,CAACG,kBAAd,EAAmC;AAClCH,MAAAA,QAAQ,CAACZ,QAAT,GAAoBA,QAApB;AACA;;AAED,WAAO,UAAEa,KAAF;AAAA,yCAAYvB,IAAZ;AAAYA,QAAAA,IAAZ;AAAA;;AAAA,aAAsBsB,QAAQ,MAAR,UAAUC,KAAK,CAACG,IAAhB,SAAyB1B,IAAzB,EAAtB;AAAA,KAAP;AACA,GANE,CAPuB,GAe3BY,KAf2B,CAA5B;;AAiBA,MAAKH,OAAO,CAACM,SAAb,EAAyB;AACxB,QAAMY,MAAM,GAAGC,YAAY,CAC1BnB,OAAO,CAACM,SADkB,EAE1BI,SAF0B,EAG1BP,KAH0B,EAI1BE,cAJ0B,CAA3B;AAMAC,IAAAA,SAAS,GAAGY,MAAM,CAACZ,SAAnB;AACAI,IAAAA,SAAS,GAAGQ,MAAM,CAACR,SAAnB;AACA;;AAED,MAAMU,YAAY,GAAG,SAAfA,YAAe;AAAA,WAAMV,SAAN;AAAA,GAArB;;AACA,MAAMW,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMd,OAAN;AAAA,GAAnB,CA1CiE,CA4CjE;AACA;AACA;;;AACAJ,EAAAA,KAAK,CAACmB,0BAAN,GAAmCnB,KAAK,CAACoB,QAAzC;;AACApB,EAAAA,KAAK,CAACoB,QAAN,GAAiB;AAAA,WAAMpB,KAAK,CAACmB,0BAAN,GAAmCL,IAAzC;AAAA,GAAjB,CAhDiE,CAkDjE;AACA;;;AACA,MAAMO,SAAS,GACdrB,KAAK,IACH,UAAEsB,QAAF,EAAgB;AACjB,QAAIC,SAAS,GAAGvB,KAAK,CAACmB,0BAAN,EAAhB;;AACAnB,IAAAA,KAAK,CAACqB,SAAN,CAAiB,YAAM;AACtB,UAAMV,KAAK,GAAGX,KAAK,CAACmB,0BAAN,EAAd;;AACA,UAAMK,UAAU,GAAGb,KAAK,KAAKY,SAA7B;AACAA,MAAAA,SAAS,GAAGZ,KAAZ;;AAEA,UAAKa,UAAL,EAAkB;AACjBF,QAAAA,QAAQ;AACR;AACD,KARD;AASA,GAbF,CApDiE,CAmEjE;AACA;;;AACA,SAAO;AACNvB,IAAAA,OAAO,EAAPA,OADM;AAENC,IAAAA,KAAK,EAALA,KAFM;AAGNI,IAAAA,OAAO,EAAPA,OAHM;AAING,IAAAA,SAAS,EAATA,SAJM;AAKNJ,IAAAA,SAAS,EAATA,SALM;AAMNc,IAAAA,YAAY,EAAZA,YANM;AAONC,IAAAA,UAAU,EAAVA,UAPM;AAQNG,IAAAA,SAAS,EAATA;AARM,GAAP;AAUA;AAED;;;;;;;;;;;;;AAWA,SAASpB,gBAAT,CAA2BL,GAA3B,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAoD;AACnD,MAAM2B,QAAQ,mCACV5B,OAAO,CAAC4B,QADE,GAEVC,yBAFU,CAAd;;AAKA,MAAMC,kBAAkB,GAAG,uBAAWF,QAAX,EAAqB,UAAEG,OAAF;AAAA,WAC/CA,OAAO,CAACC,iBAAR,GAA4BD,OAAO,CAAE9B,QAAF,CAAnC,GAAkD8B,OADH;AAAA,GAArB,CAA3B;AAIA,MAAME,WAAW,GAAG,CACnB,uCAAgChC,QAAhC,EAA0CF,GAA1C,CADmB,EAEnBmC,0BAFmB,EAGnB,2BAA8BJ,kBAA9B,CAHmB,CAApB;AAMA,MAAMK,SAAS,GAAG,CAAEC,qCAAoBH,WAApB,CAAF,CAAlB;;AACA,MACC,OAAOI,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,4BAFR,EAGE;AACDH,IAAAA,SAAS,CAACI,IAAV,CACCF,MAAM,CAACC,4BAAP,CAAqC;AACpCE,MAAAA,IAAI,EAAEzC,GAD8B;AAEpC0C,MAAAA,UAAU,EAAE1C;AAFwB,KAArC,CADD;AAMA;;AA3BkD,MA6B3CG,OA7B2C,GA6BjBF,OA7BiB,CA6B3CE,OA7B2C;AAAA,MA6BlCwC,YA7BkC,GA6BjB1C,OA7BiB,CA6BlC0C,YA7BkC;AA8BnD,MAAMC,eAAe,GAAG,mCAAiB;AACxC5B,IAAAA,QAAQ,EAAE6B,gBAD8B;AAExC3B,IAAAA,IAAI,EAAEf;AAFkC,GAAjB,CAAxB;AAKA,SAAO,wBACNyC,eADM,EAEN;AAAE1B,IAAAA,IAAI,EAAEyB;AAAR,GAFM,EAGN,uBAAWP,SAAX,CAHM,CAAP;AAKA;AAED;;;;;;;;;;;AASA,SAASxB,YAAT,CAAuBD,SAAvB,EAAkCP,KAAlC,EAA0C;AACzC,MAAM0C,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAEC,gBAAF,EAAwB;AACnD,QAAMjC,QAAQ,GAAG,SAASkC,WAAT,GAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,UAAU,GAAGC,SAAS,CAACC,MAA7B;AACA,UAAM3D,IAAI,GAAG,IAAI4D,KAAJ,CAAWH,UAAU,GAAG,CAAxB,CAAb;AACAzD,MAAAA,IAAI,CAAE,CAAF,CAAJ,GAAYY,KAAK,CAACmB,0BAAN,EAAZ;;AACA,WAAM,IAAI8B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,UAArB,EAAiCI,CAAC,EAAlC,EAAuC;AACtC7D,QAAAA,IAAI,CAAE6D,CAAC,GAAG,CAAN,CAAJ,GAAgBH,SAAS,CAAEG,CAAF,CAAzB;AACA;;AAED,aAAON,gBAAgB,MAAhB,SAAqBvD,IAArB,CAAP;AACA,KAhBD;;AAiBAsB,IAAAA,QAAQ,CAACwC,WAAT,GAAuB,KAAvB;AACA,WAAOxC,QAAP;AACA,GApBD;;AAsBA,SAAO,uBAAWH,SAAX,EAAsBmC,mBAAtB,CAAP;AACA;AAED;;;;;;;;;AAOA,SAASrC,UAAT,CAAqBD,OAArB,EAA8BJ,KAA9B,EAAsC;AACrC,MAAMmD,iBAAiB,GAAG,SAApBA,iBAAoB,CAAEC,MAAF;AAAA,WAAc,YAAe;AACtD,aAAOC,OAAO,CAACC,OAAR,CAAiBtD,KAAK,CAACuD,QAAN,CAAgBH,MAAM,MAAN,mBAAhB,CAAjB,CAAP;AACA,KAFyB;AAAA,GAA1B;;AAIA,SAAO,uBAAWhD,OAAX,EAAoB+C,iBAApB,CAAP;AACA;AAED;;;;;;;;;;;;AAUA,SAASnC,YAAT,CAAuBb,SAAvB,EAAkCI,SAAlC,EAA6CP,KAA7C,EAAoDE,cAApD,EAAqE;AACpE;AACA;AACA;AACA,MAAMsD,eAAe,GAAG,uBAAWrD,SAAX,EAAsB,UAAEsD,QAAF,EAAgB;AAC7D,QAAKA,QAAQ,CAACC,OAAd,EAAwB;AACvB,aAAOD,QAAP;AACA;;AAED,2CACIA,QADJ;AACc;AACbC,MAAAA,OAAO,EAAED,QAFV,CAEoB;;AAFpB;AAIA,GATuB,CAAxB;;AAWA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAAEjD,QAAF,EAAYvB,YAAZ,EAA8B;AACjD,QAAMsE,QAAQ,GAAGtD,SAAS,CAAEhB,YAAF,CAA1B;;AACA,QAAK,CAAEsE,QAAP,EAAkB;AACjB/C,MAAAA,QAAQ,CAACwC,WAAT,GAAuB,KAAvB;AACA,aAAOxC,QAAP;AACA;;AAED,QAAMkD,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAe;AAAA,yCAAVxE,IAAU;AAAVA,QAAAA,IAAU;AAAA;;AAAA,eACxByE,eADwB;AAAA;AAAA;;AAAA;AAAA,mGACvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACOlD,kBAAAA,KADP,GACeX,KAAK,CAACoB,QAAN,EADf;;AAAA,wBAGElB,cAAc,CAAChB,SAAf,CAA0BC,YAA1B,EAAwCC,IAAxC,KACE,OAAOqE,QAAQ,CAACK,WAAhB,KAAgC,UAAhC,IACDL,QAAQ,CAACK,WAAT,OAAAL,QAAQ,GAAc9C,KAAd,SAAwBvB,IAAxB,EALX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,0CAUsBY,KAAK,CAACmB,0BAAN,EAVtB,EAUSP,QAVT,yBAUSA,QAVT;;AAAA,uBAaEH,iBAAiB,CAACsD,oBAAlB,CACCnD,QADD,EAECzB,YAFD,EAGCC,IAHD,CAbF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAsBCc,kBAAAA,cAAc,CAACV,aAAf,CAA8BL,YAA9B,EAA4CC,IAA5C;AAEA4E,kBAAAA,UAAU,uFAAE;AAAA;AAAA;AAAA;AAAA;AACX9D,4BAAAA,cAAc,CAACZ,KAAf,CAAsBH,YAAtB,EAAoCC,IAApC;AACAY,4BAAAA,KAAK,CAACuD,QAAN,CACCjD,eAAe,CAAC2D,eAAhB,CAAiC9E,YAAjC,EAA+CC,IAA/C,CADD;AAFW;AAAA,mCAKL8E,eAAe,MAAf,UACLlE,KADK,EAELwD,eAFK,EAGLrE,YAHK,SAIFC,IAJE,EALK;;AAAA;AAWXY,4BAAAA,KAAK,CAACuD,QAAN,CACCjD,eAAe,CAAC6D,gBAAhB,CAAkChF,YAAlC,EAAgDC,IAAhD,CADD;;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAF,GAAV;;AAxBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADuC;AAAA;AAAA;;AA0CvCyE,MAAAA,eAAe,MAAf,SAAoBzE,IAApB;AACA,aAAOsB,QAAQ,MAAR,SAAatB,IAAb,CAAP;AACA,KA5CD;;AA6CAwE,IAAAA,gBAAgB,CAACV,WAAjB,GAA+B,IAA/B;AACA,WAAOU,gBAAP;AACA,GAtDD;;AAwDA,SAAO;AACNzD,IAAAA,SAAS,EAAEqD,eADL;AAENjD,IAAAA,SAAS,EAAE,uBAAWA,SAAX,EAAsBoD,WAAtB;AAFL,GAAP;AAIA;AAED;;;;;;;;;;SAQeO,e;;;;;6FAAf,kBAAgClE,KAAhC,EAAuCG,SAAvC,EAAkDhB,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACOsE,YAAAA,QADP,GACkB,iBAAKtD,SAAL,EAAgB,CAAEhB,YAAF,CAAhB,CADlB;;AAAA,gBAEQsE,QAFR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,wCAAmErE,IAAnE;AAAmEA,cAAAA,IAAnE;AAAA;;AAMOgE,YAAAA,MANP,GAMgBK,QAAQ,CAACC,OAAT,OAAAD,QAAQ,EAAarE,IAAb,CANxB;;AAAA,iBAOMgE,MAPN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQQpD,KAAK,CAACuD,QAAN,CAAgBH,MAAhB,CARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * External dependencies\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport { flowRight, get, mapValues } from 'lodash';\nimport combineReducers from 'turbo-combine-reducers';\nimport EquivalentKeyMap from 'equivalent-key-map';\n\n/**\n * WordPress dependencies\n */\nimport createReduxRoutineMiddleware from '@wordpress/redux-routine';\n\n/**\n * Internal dependencies\n */\nimport { builtinControls } from '../controls';\nimport promise from '../promise-middleware';\nimport createResolversCacheMiddleware from '../resolvers-cache-middleware';\nimport metadataReducer from './metadata/reducer';\nimport * as metadataSelectors from './metadata/selectors';\nimport * as metadataActions from './metadata/actions';\n\n/**\n * Create a cache to track whether resolvers started running or not.\n *\n * @return {Object} Resolvers Cache.\n */\nfunction createResolversCache() {\n\tconst cache = {};\n\treturn {\n\t\tisRunning( selectorName, args ) {\n\t\t\treturn cache[ selectorName ] && cache[ selectorName ].get( args );\n\t\t},\n\n\t\tclear( selectorName, args ) {\n\t\t\tif ( cache[ selectorName ] ) {\n\t\t\t\tcache[ selectorName ].delete( args );\n\t\t\t}\n\t\t},\n\n\t\tmarkAsRunning( selectorName, args ) {\n\t\t\tif ( ! cache[ selectorName ] ) {\n\t\t\t\tcache[ selectorName ] = new EquivalentKeyMap();\n\t\t\t}\n\n\t\t\tcache[ selectorName ].set( args, true );\n\t\t},\n\t};\n}\n\n/**\n * @typedef {WPDataRegistry} WPDataRegistry\n */\n\n/**\n * Creates a namespace object with a store derived from the reducer given.\n *\n * @param {string}         key      Unique namespace identifier.\n * @param {Object}         options  Registered store options, with properties\n *                                  describing reducer, actions, selectors, and\n *                                  resolvers.\n * @param {WPDataRegistry} registry Registry reference.\n *\n * @return {Object} Store Object.\n */\nexport default function createNamespace( key, options, registry ) {\n\tconst reducer = options.reducer;\n\tconst store = createReduxStore( key, options, registry );\n\tconst resolversCache = createResolversCache();\n\n\tlet resolvers;\n\tconst actions = mapActions(\n\t\t{\n\t\t\t...metadataActions,\n\t\t\t...options.actions,\n\t\t},\n\t\tstore\n\t);\n\tlet selectors = mapSelectors(\n\t\t{\n\t\t\t...mapValues(\n\t\t\t\tmetadataSelectors,\n\t\t\t\t( selector ) => ( state, ...args ) =>\n\t\t\t\t\tselector( state.metadata, ...args )\n\t\t\t),\n\t\t\t...mapValues( options.selectors, ( selector ) => {\n\t\t\t\tif ( selector.isRegistrySelector ) {\n\t\t\t\t\tselector.registry = registry;\n\t\t\t\t}\n\n\t\t\t\treturn ( state, ...args ) => selector( state.root, ...args );\n\t\t\t} ),\n\t\t},\n\t\tstore\n\t);\n\tif ( options.resolvers ) {\n\t\tconst result = mapResolvers(\n\t\t\toptions.resolvers,\n\t\t\tselectors,\n\t\t\tstore,\n\t\t\tresolversCache\n\t\t);\n\t\tresolvers = result.resolvers;\n\t\tselectors = result.selectors;\n\t}\n\n\tconst getSelectors = () => selectors;\n\tconst getActions = () => actions;\n\n\t// We have some modules monkey-patching the store object\n\t// It's wrong to do so but until we refactor all of our effects to controls\n\t// We need to keep the same \"store\" instance here.\n\tstore.__unstableOriginalGetState = store.getState;\n\tstore.getState = () => store.__unstableOriginalGetState().root;\n\n\t// Customize subscribe behavior to call listeners only on effective change,\n\t// not on every dispatch.\n\tconst subscribe =\n\t\tstore &&\n\t\t( ( listener ) => {\n\t\t\tlet lastState = store.__unstableOriginalGetState();\n\t\t\tstore.subscribe( () => {\n\t\t\t\tconst state = store.__unstableOriginalGetState();\n\t\t\t\tconst hasChanged = state !== lastState;\n\t\t\t\tlastState = state;\n\n\t\t\t\tif ( hasChanged ) {\n\t\t\t\t\tlistener();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t// This can be simplified to just { subscribe, getSelectors, getActions }\n\t// Once we remove the use function.\n\treturn {\n\t\treducer,\n\t\tstore,\n\t\tactions,\n\t\tselectors,\n\t\tresolvers,\n\t\tgetSelectors,\n\t\tgetActions,\n\t\tsubscribe,\n\t};\n}\n\n/**\n * Creates a redux store for a namespace.\n *\n * @param {string}         key      Unique namespace identifier.\n * @param {Object}         options  Registered store options, with properties\n *                                  describing reducer, actions, selectors, and\n *                                  resolvers.\n * @param {WPDataRegistry} registry Registry reference.\n *\n * @return {Object} Newly created redux store.\n */\nfunction createReduxStore( key, options, registry ) {\n\tconst controls = {\n\t\t...options.controls,\n\t\t...builtinControls,\n\t};\n\n\tconst normalizedControls = mapValues( controls, ( control ) =>\n\t\tcontrol.isRegistryControl ? control( registry ) : control\n\t);\n\n\tconst middlewares = [\n\t\tcreateResolversCacheMiddleware( registry, key ),\n\t\tpromise,\n\t\tcreateReduxRoutineMiddleware( normalizedControls ),\n\t];\n\n\tconst enhancers = [ applyMiddleware( ...middlewares ) ];\n\tif (\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__\n\t) {\n\t\tenhancers.push(\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__( {\n\t\t\t\tname: key,\n\t\t\t\tinstanceId: key,\n\t\t\t} )\n\t\t);\n\t}\n\n\tconst { reducer, initialState } = options;\n\tconst enhancedReducer = combineReducers( {\n\t\tmetadata: metadataReducer,\n\t\troot: reducer,\n\t} );\n\n\treturn createStore(\n\t\tenhancedReducer,\n\t\t{ root: initialState },\n\t\tflowRight( enhancers )\n\t);\n}\n\n/**\n * Maps selectors to a store.\n *\n * @param {Object} selectors Selectors to register. Keys will be used as the\n *                           public facing API. Selectors will get passed the\n *                           state as first argument.\n * @param {Object} store     The store to which the selectors should be mapped.\n * @return {Object} Selectors mapped to the provided store.\n */\nfunction mapSelectors( selectors, store ) {\n\tconst createStateSelector = ( registrySelector ) => {\n\t\tconst selector = function runSelector() {\n\t\t\t// This function is an optimized implementation of:\n\t\t\t//\n\t\t\t//   selector( store.getState(), ...arguments )\n\t\t\t//\n\t\t\t// Where the above would incur an `Array#concat` in its application,\n\t\t\t// the logic here instead efficiently constructs an arguments array via\n\t\t\t// direct assignment.\n\t\t\tconst argsLength = arguments.length;\n\t\t\tconst args = new Array( argsLength + 1 );\n\t\t\targs[ 0 ] = store.__unstableOriginalGetState();\n\t\t\tfor ( let i = 0; i < argsLength; i++ ) {\n\t\t\t\targs[ i + 1 ] = arguments[ i ];\n\t\t\t}\n\n\t\t\treturn registrySelector( ...args );\n\t\t};\n\t\tselector.hasResolver = false;\n\t\treturn selector;\n\t};\n\n\treturn mapValues( selectors, createStateSelector );\n}\n\n/**\n * Maps actions to dispatch from a given store.\n *\n * @param {Object} actions    Actions to register.\n * @param {Object} store      The redux store to which the actions should be mapped.\n * @return {Object}           Actions mapped to the redux store provided.\n */\nfunction mapActions( actions, store ) {\n\tconst createBoundAction = ( action ) => ( ...args ) => {\n\t\treturn Promise.resolve( store.dispatch( action( ...args ) ) );\n\t};\n\n\treturn mapValues( actions, createBoundAction );\n}\n\n/**\n * Returns resolvers with matched selectors for a given namespace.\n * Resolvers are side effects invoked once per argument set of a given selector call,\n * used in ensuring that the data needs for the selector are satisfied.\n *\n * @param {Object} resolvers      Resolvers to register.\n * @param {Object} selectors      The current selectors to be modified.\n * @param {Object} store          The redux store to which the resolvers should be mapped.\n * @param {Object} resolversCache Resolvers Cache.\n */\nfunction mapResolvers( resolvers, selectors, store, resolversCache ) {\n\t// The `resolver` can be either a function that does the resolution, or, in more advanced\n\t// cases, an object with a `fullfill` method and other optional methods like `isFulfilled`.\n\t// Here we normalize the `resolver` function to an object with `fulfill` method.\n\tconst mappedResolvers = mapValues( resolvers, ( resolver ) => {\n\t\tif ( resolver.fulfill ) {\n\t\t\treturn resolver;\n\t\t}\n\n\t\treturn {\n\t\t\t...resolver, // copy the enumerable properties of the resolver function\n\t\t\tfulfill: resolver, // add the fulfill method\n\t\t};\n\t} );\n\n\tconst mapSelector = ( selector, selectorName ) => {\n\t\tconst resolver = resolvers[ selectorName ];\n\t\tif ( ! resolver ) {\n\t\t\tselector.hasResolver = false;\n\t\t\treturn selector;\n\t\t}\n\n\t\tconst selectorResolver = ( ...args ) => {\n\t\t\tasync function fulfillSelector() {\n\t\t\t\tconst state = store.getState();\n\t\t\t\tif (\n\t\t\t\t\tresolversCache.isRunning( selectorName, args ) ||\n\t\t\t\t\t( typeof resolver.isFulfilled === 'function' &&\n\t\t\t\t\t\tresolver.isFulfilled( state, ...args ) )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { metadata } = store.__unstableOriginalGetState();\n\n\t\t\t\tif (\n\t\t\t\t\tmetadataSelectors.hasStartedResolution(\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\tselectorName,\n\t\t\t\t\t\targs\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolversCache.markAsRunning( selectorName, args );\n\n\t\t\t\tsetTimeout( async () => {\n\t\t\t\t\tresolversCache.clear( selectorName, args );\n\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\tmetadataActions.startResolution( selectorName, args )\n\t\t\t\t\t);\n\t\t\t\t\tawait fulfillResolver(\n\t\t\t\t\t\tstore,\n\t\t\t\t\t\tmappedResolvers,\n\t\t\t\t\t\tselectorName,\n\t\t\t\t\t\t...args\n\t\t\t\t\t);\n\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\tmetadataActions.finishResolution( selectorName, args )\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tfulfillSelector( ...args );\n\t\t\treturn selector( ...args );\n\t\t};\n\t\tselectorResolver.hasResolver = true;\n\t\treturn selectorResolver;\n\t};\n\n\treturn {\n\t\tresolvers: mappedResolvers,\n\t\tselectors: mapValues( selectors, mapSelector ),\n\t};\n}\n\n/**\n * Calls a resolver given arguments\n *\n * @param {Object} store        Store reference, for fulfilling via resolvers\n * @param {Object} resolvers    Store Resolvers\n * @param {string} selectorName Selector name to fulfill.\n * @param {Array} args          Selector Arguments.\n */\nasync function fulfillResolver( store, resolvers, selectorName, ...args ) {\n\tconst resolver = get( resolvers, [ selectorName ] );\n\tif ( ! resolver ) {\n\t\treturn;\n\t}\n\n\tconst action = resolver.fulfill( ...args );\n\tif ( action ) {\n\t\tawait store.dispatch( action );\n\t}\n}\n"]}