{"version":3,"sources":["@wordpress/block-library/src/embed/wp-embed-preview.js"],"names":["Component","createRef","withGlobalEvents","window","FocusEvent","DOMParser","WpEmbedPreview","arguments","checkFocus","bind","node","addEventListener","resizeWPembeds","removeEventListener","data","secret","message","value","some","attribute","document","querySelectorAll","forEach","iframe","height","activeElement","tagName","parentNode","current","focusEvent","bubbles","dispatchEvent","html","props","doc","parseFromString","querySelector","removeAttribute","blockQuote","style","display","__html","body","innerHTML","blur"],"mappings":";;;;;;;;;;;;AAAA;;;AAGA,SAASA,SAAT,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA;;AAEA;;;;cAIkCC,M;IAA1BC,U,WAAAA,U;IAAYC,S,WAAAA,S;;IAEdC,c;;;;;AACL,4BAAc;AAAA;;AAAA;;AACb,+BAAUC,SAAV;AAEA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,+BAAlB;AACA,UAAKC,IAAL,GAAYT,SAAS,EAArB;AAJa;AAKb;;;;wCAEmB;AACnBE,MAAAA,MAAM,CAACQ,gBAAP,CAAyB,SAAzB,EAAoC,KAAKC,cAAzC;AACA;;;2CAEsB;AACtBT,MAAAA,MAAM,CAACU,mBAAP,CAA4B,SAA5B,EAAuC,KAAKD,cAA5C;AACA;AAED;;;;;;;;;;;;;;;yCAY4D;AAAA,2BAA1CE,IAA0C;AAAA,yCAAP,EAAO;AAAA,UAAlCC,MAAkC,aAAlCA,MAAkC;AAAA,UAA1BC,OAA0B,aAA1BA,OAA0B;AAAA,UAAjBC,KAAiB,aAAjBA,KAAiB;;AAC3D,UACC,CAAEF,MAAF,EAAUC,OAAV,EAAmBC,KAAnB,EAA2BC,IAA3B,CAAiC,UAAEC,SAAF;AAAA,eAAiB,CAAEA,SAAnB;AAAA,OAAjC,KACAH,OAAO,KAAK,QAFb,EAGE;AACD;AACA;;AAEDI,MAAAA,QAAQ,CACNC,gBADF,gCAC4CN,MAD5C,SAEEO,OAFF,CAEW,UAAEC,MAAF,EAAc;AACvB,YAAK,CAACA,MAAM,CAACC,MAAR,KAAmBP,KAAxB,EAAgC;AAC/BM,UAAAA,MAAM,CAACC,MAAP,GAAgBP,KAAhB;AACA;AACD,OANF;AAOA;AAED;;;;;;;iCAIa;AAAA,sBACcG,QADd;AAAA,UACJK,aADI,aACJA,aADI;;AAGZ,UACCA,aAAa,CAACC,OAAd,KAA0B,QAA1B,IACAD,aAAa,CAACE,UAAd,KAA6B,KAAKjB,IAAL,CAAUkB,OAFxC,EAGE;AACD;AACA;;AAED,UAAMC,UAAU,GAAG,IAAIzB,UAAJ,CAAgB,OAAhB,EAAyB;AAAE0B,QAAAA,OAAO,EAAE;AAAX,OAAzB,CAAnB;AACAL,MAAAA,aAAa,CAACM,aAAd,CAA6BF,UAA7B;AACA;;;6BAEQ;AAAA,UACAG,IADA,GACS,KAAKC,KADd,CACAD,IADA;AAER,UAAME,GAAG,GAAG,IAAI7B,SAAJ,GAAgB8B,eAAhB,CAAiCH,IAAjC,EAAuC,WAAvC,CAAZ;AACA,UAAMT,MAAM,GAAGW,GAAG,CAACE,aAAJ,CAAmB,QAAnB,CAAf;AACA,UAAKb,MAAL,EAAcA,MAAM,CAACc,eAAP,CAAwB,OAAxB;AACd,UAAMC,UAAU,GAAGJ,GAAG,CAACE,aAAJ,CAAmB,YAAnB,CAAnB;AACA,UAAKE,UAAL,EAAkBA,UAAU,CAACC,KAAX,CAAiBC,OAAjB,GAA2B,MAA3B;AAElB,aACC;AACC,QAAA,GAAG,EAAG,KAAK9B,IADZ;AAEC,QAAA,SAAS,EAAC,yBAFX;AAGC,QAAA,uBAAuB,EAAG;AAAE+B,UAAAA,MAAM,EAAEP,GAAG,CAACQ,IAAJ,CAASC;AAAnB;AAH3B,QADD;AAOA;;;;EA9E2B3C,S;;AAiF7B,eAAeE,gBAAgB,CAAE;AAChC0C,EAAAA,IAAI,EAAE;AAD0B,CAAF,CAAhB,CAEVtC,cAFU,CAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Component, createRef } from '@wordpress/element';\nimport { withGlobalEvents } from '@wordpress/compose';\n\n/** @typedef {import('@wordpress/element').WPSyntheticEvent} WPSyntheticEvent */\n\n/**\n * Browser dependencies\n */\n\nconst { FocusEvent, DOMParser } = window;\n\nclass WpEmbedPreview extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.checkFocus = this.checkFocus.bind( this );\n\t\tthis.node = createRef();\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener( 'message', this.resizeWPembeds );\n\t}\n\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener( 'message', this.resizeWPembeds );\n\t}\n\n\t/**\n\t * Checks for WordPress embed events signaling the height change when iframe\n\t * content loads or iframe's window is resized.  The event is sent from\n\t * WordPress core via the window.postMessage API.\n\t *\n\t * References:\n\t * window.postMessage: https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n\t * WordPress core embed-template on load: https://github.com/WordPress/WordPress/blob/master/wp-includes/js/wp-embed-template.js#L143\n\t * WordPress core embed-template on resize: https://github.com/WordPress/WordPress/blob/master/wp-includes/js/wp-embed-template.js#L187\n\t *\n\t * @param {WPSyntheticEvent} event Message event.\n\t */\n\tresizeWPembeds( { data: { secret, message, value } = {} } ) {\n\t\tif (\n\t\t\t[ secret, message, value ].some( ( attribute ) => ! attribute ) ||\n\t\t\tmessage !== 'height'\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocument\n\t\t\t.querySelectorAll( `iframe[data-secret=\"${ secret }\"` )\n\t\t\t.forEach( ( iframe ) => {\n\t\t\t\tif ( +iframe.height !== value ) {\n\t\t\t\t\tiframe.height = value;\n\t\t\t\t}\n\t\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the wp embed iframe is the activeElement,\n\t * if it is dispatch a focus event.\n\t */\n\tcheckFocus() {\n\t\tconst { activeElement } = document;\n\n\t\tif (\n\t\t\tactiveElement.tagName !== 'IFRAME' ||\n\t\t\tactiveElement.parentNode !== this.node.current\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst focusEvent = new FocusEvent( 'focus', { bubbles: true } );\n\t\tactiveElement.dispatchEvent( focusEvent );\n\t}\n\n\trender() {\n\t\tconst { html } = this.props;\n\t\tconst doc = new DOMParser().parseFromString( html, 'text/html' );\n\t\tconst iframe = doc.querySelector( 'iframe' );\n\t\tif ( iframe ) iframe.removeAttribute( 'style' );\n\t\tconst blockQuote = doc.querySelector( 'blockquote' );\n\t\tif ( blockQuote ) blockQuote.style.display = 'none';\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tref={ this.node }\n\t\t\t\tclassName=\"wp-block-embed__wrapper\"\n\t\t\t\tdangerouslySetInnerHTML={ { __html: doc.body.innerHTML } }\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default withGlobalEvents( {\n\tblur: 'checkFocus',\n} )( WpEmbedPreview );\n"]}