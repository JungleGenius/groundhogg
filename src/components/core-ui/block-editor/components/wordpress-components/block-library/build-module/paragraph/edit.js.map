{"version":3,"sources":["@wordpress/block-library/src/paragraph/edit.js"],"names":["classnames","__","_x","PanelBody","ToggleControl","ToolbarGroup","AlignmentToolbar","BlockControls","InspectorControls","RichText","__experimentalUseBlockWrapperProps","useBlockWrapperProps","getFontSize","__experimentalUseEditorFeature","useEditorFeature","createBlock","useSelect","useEffect","useState","formatLtr","getComputedStyle","node","pseudo","ownerDocument","defaultView","querySelector","window","document","bind","name","PARAGRAPH_DROP_CAP_SELECTOR","ParagraphRTLToolbar","direction","setDirection","isRTL","select","getSettings","icon","title","isActive","onClick","undefined","useDropCap","isDropCap","fontSize","styleFontSize","isDisabled","minimumHeight","setMinimumHeight","fontSizes","fontSizeObject","element","lineHeight","size","ParagraphBlock","attributes","mergeBlocks","onReplace","onRemove","setAttributes","align","content","dropCap","placeholder","style","isDropCapEnabled","dropCapMinimumHeight","styles","minHeight","blockWrapperProps","className","newAlign","newDirection","newContent","value"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { __, _x } from '@wordpress/i18n';\nimport { PanelBody, ToggleControl, ToolbarGroup } from '@wordpress/components';\nimport {\n\tAlignmentToolbar,\n\tBlockControls,\n\tInspectorControls,\n\tRichText,\n\t__experimentalUseBlockWrapperProps as useBlockWrapperProps,\n\tgetFontSize,\n\t__experimentalUseEditorFeature as useEditorFeature,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState } from '@wordpress/element';\nimport { formatLtr } from '@wordpress/icons';\n\nfunction getComputedStyle( node, pseudo ) {\n\treturn node.ownerDocument.defaultView.getComputedStyle( node, pseudo );\n}\n\nconst querySelector = window.document.querySelector.bind( document );\n\nconst name = 'core/paragraph';\nconst PARAGRAPH_DROP_CAP_SELECTOR = 'p.has-drop-cap';\n\nfunction ParagraphRTLToolbar( { direction, setDirection } ) {\n\tconst isRTL = useSelect( ( select ) => {\n\t\treturn !! select( 'core/block-editor' ).getSettings().isRTL;\n\t}, [] );\n\n\treturn (\n\t\tisRTL && (\n\t\t\t<ToolbarGroup\n\t\t\t\tcontrols={ [\n\t\t\t\t\t{\n\t\t\t\t\t\ticon: formatLtr,\n\t\t\t\t\t\ttitle: _x( 'Left to right', 'editor button' ),\n\t\t\t\t\t\tisActive: direction === 'ltr',\n\t\t\t\t\t\tonClick() {\n\t\t\t\t\t\t\tsetDirection(\n\t\t\t\t\t\t\t\tdirection === 'ltr' ? undefined : 'ltr'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t] }\n\t\t\t/>\n\t\t)\n\t);\n}\n\nfunction useDropCap( isDropCap, fontSize, styleFontSize ) {\n\tconst isDisabled = ! useEditorFeature( 'typography.dropCap' );\n\n\tconst [ minimumHeight, setMinimumHeight ] = useState();\n\n\tconst { fontSizes } = useSelect( ( select ) =>\n\t\tselect( 'core/block-editor' ).getSettings()\n\t);\n\n\tconst fontSizeObject = getFontSize( fontSizes, fontSize, styleFontSize );\n\tuseEffect( () => {\n\t\tif ( isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst element = querySelector( PARAGRAPH_DROP_CAP_SELECTOR );\n\t\tif ( isDropCap && element ) {\n\t\t\tsetMinimumHeight(\n\t\t\t\tgetComputedStyle( element, 'first-letter' ).lineHeight\n\t\t\t);\n\t\t} else if ( minimumHeight ) {\n\t\t\tsetMinimumHeight( undefined );\n\t\t}\n\t}, [\n\t\tisDisabled,\n\t\tisDropCap,\n\t\tminimumHeight,\n\t\tsetMinimumHeight,\n\t\tfontSizeObject.size,\n\t] );\n\n\treturn [ ! isDisabled, minimumHeight ];\n}\n\nfunction ParagraphBlock( {\n\tattributes,\n\tmergeBlocks,\n\tonReplace,\n\tonRemove,\n\tsetAttributes,\n} ) {\n\tconst {\n\t\talign,\n\t\tcontent,\n\t\tdirection,\n\t\tdropCap,\n\t\tplaceholder,\n\t\tfontSize,\n\t\tstyle,\n\t} = attributes;\n\tconst [ isDropCapEnabled, dropCapMinimumHeight ] = useDropCap(\n\t\tdropCap,\n\t\tfontSize,\n\t\tstyle?.fontSize\n\t);\n\n\tconst styles = {\n\t\tdirection,\n\t\tminHeight: dropCapMinimumHeight,\n\t};\n\n\tconst blockWrapperProps = useBlockWrapperProps( {\n\t\tclassName: classnames( {\n\t\t\t'has-drop-cap': dropCap,\n\t\t\t[ `has-text-align-${ align }` ]: align,\n\t\t} ),\n\t\tstyle: styles,\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<AlignmentToolbar\n\t\t\t\t\tvalue={ align }\n\t\t\t\t\tonChange={ ( newAlign ) =>\n\t\t\t\t\t\tsetAttributes( { align: newAlign } )\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<ParagraphRTLToolbar\n\t\t\t\t\tdirection={ direction }\n\t\t\t\t\tsetDirection={ ( newDirection ) =>\n\t\t\t\t\t\tsetAttributes( { direction: newDirection } )\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls>\n\t\t\t\t{ isDropCapEnabled && (\n\t\t\t\t\t<PanelBody title={ __( 'Text settings' ) }>\n\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\tlabel={ __( 'Drop cap' ) }\n\t\t\t\t\t\t\tchecked={ !! dropCap }\n\t\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\t\tsetAttributes( { dropCap: ! dropCap } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thelp={\n\t\t\t\t\t\t\t\tdropCap\n\t\t\t\t\t\t\t\t\t? __( 'Showing large initial letter.' )\n\t\t\t\t\t\t\t\t\t: __(\n\t\t\t\t\t\t\t\t\t\t\t'Toggle to show a large initial letter.'\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelBody>\n\t\t\t\t) }\n\t\t\t</InspectorControls>\n\t\t\t<RichText\n\t\t\t\tidentifier=\"content\"\n\t\t\t\ttagName=\"p\"\n\t\t\t\t{ ...blockWrapperProps }\n\t\t\t\tvalue={ content }\n\t\t\t\tonChange={ ( newContent ) =>\n\t\t\t\t\tsetAttributes( { content: newContent } )\n\t\t\t\t}\n\t\t\t\tonSplit={ ( value ) => {\n\t\t\t\t\tif ( ! value ) {\n\t\t\t\t\t\treturn createBlock( name );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn createBlock( name, {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tcontent: value,\n\t\t\t\t\t} );\n\t\t\t\t} }\n\t\t\t\tonMerge={ mergeBlocks }\n\t\t\t\tonReplace={ onReplace }\n\t\t\t\tonRemove={ onRemove }\n\t\t\t\taria-label={\n\t\t\t\t\tcontent\n\t\t\t\t\t\t? __( 'Paragraph block' )\n\t\t\t\t\t\t: __(\n\t\t\t\t\t\t\t\t'Empty block; start writing or type forward slash to choose a block'\n\t\t\t\t\t\t  )\n\t\t\t\t}\n\t\t\t\tplaceholder={\n\t\t\t\t\tplaceholder ||\n\t\t\t\t\t__( 'Start writing or type / to choose a block' )\n\t\t\t\t}\n\t\t\t\t__unstableEmbedURLOnPaste\n\t\t\t\t__unstableAllowPrefixTransformations\n\t\t\t/>\n\t\t</>\n\t);\n}\n\nexport default ParagraphBlock;\n"]}