{"version":3,"sources":["@wordpress/rich-text/src/component/use-format-types.js"],"names":["formatTypesSelector","select","getFormatTypes","useFormatTypes","clientId","identifier","formatTypes","keyedSelected","reduce","accumulator","type","__experimentalGetPropsForEditableTreePreparation","name","richTextIdentifier","blockClientId","dispatch","prepareHandlers","valueHandlers","changeHandlers","dependencies","forEach","__experimentalCreatePrepareEditableTree","selected","handler","__experimentalCreateOnChangeEditableValue","push","key","dispatchers","__experimentalGetPropsForEditableTreeChangeHandler"],"mappings":";;;;;;;;;;;AAGA;;;;;;AAEA,SAASA,mBAAT,CAA8BC,MAA9B,EAAuC;AACtC,SAAOA,MAAM,CAAE,gBAAF,CAAN,CAA2BC,cAA3B,EAAP;AACA;AAED;;;;;;;;;;AAQO,SAASC,cAAT,OAAoD;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,UAAe,QAAfA,UAAe;AAC1D,MAAMC,WAAW,GAAG,qBAAWN,mBAAX,EAAgC,EAAhC,CAApB;AACA,MAAMO,aAAa,GAAG,qBACrB,UAAEN,MAAF;AAAA,WACCK,WAAW,CAACE,MAAZ,CAAoB,UAAEC,WAAF,EAAeC,IAAf,EAAyB;AAC5C,UAAKA,IAAI,CAACC,gDAAV,EAA6D;AAC5DF,QAAAA,WAAW,CACVC,IAAI,CAACE,IADK,CAAX,GAEIF,IAAI,CAACC,gDAAL,CACHV,MADG,EAEH;AACCY,UAAAA,kBAAkB,EAAER,UADrB;AAECS,UAAAA,aAAa,EAAEV;AAFhB,SAFG,CAFJ;AASA;;AAED,aAAOK,WAAP;AACA,KAdD,EAcG,EAdH,CADD;AAAA,GADqB,EAiBrB,CAAEH,WAAF,EAAeF,QAAf,EAAyBC,UAAzB,CAjBqB,CAAtB;AAmBA,MAAMU,QAAQ,GAAG,wBAAjB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,YAAY,GAAG,EAArB;AAEAb,EAAAA,WAAW,CAACc,OAAZ,CAAqB,UAAEV,IAAF,EAAY;AAChC,QAAKA,IAAI,CAACW,uCAAV,EAAoD;AACnD,UAAMC,QAAQ,GAAGf,aAAa,CAAEG,IAAI,CAACE,IAAP,CAA9B;;AACA,UAAMW,OAAO,GAAGb,IAAI,CAACW,uCAAL,CACfC,QADe,EAEf;AACCT,QAAAA,kBAAkB,EAAER,UADrB;AAECS,QAAAA,aAAa,EAAEV;AAFhB,OAFe,CAAhB;;AAQA,UAAKM,IAAI,CAACc,yCAAV,EAAsD;AACrDP,QAAAA,aAAa,CAACQ,IAAd,CAAoBF,OAApB;AACA,OAFD,MAEO;AACNP,QAAAA,eAAe,CAACS,IAAhB,CAAsBF,OAAtB;AACA;;AAED,WAAM,IAAMG,GAAZ,IAAmBJ,QAAnB,EAA8B;AAC7BH,QAAAA,YAAY,CAACM,IAAb,CAAmBH,QAAQ,CAAEI,GAAF,CAA3B;AACA;AACD;;AAED,QAAKhB,IAAI,CAACc,yCAAV,EAAsD;AACrD,UAAIG,WAAW,GAAG,EAAlB;;AAEA,UAAKjB,IAAI,CAACkB,kDAAV,EAA+D;AAC9DD,QAAAA,WAAW,GAAGjB,IAAI,CAACkB,kDAAL,CACbb,QADa,EAEb;AACCF,UAAAA,kBAAkB,EAAER,UADrB;AAECS,UAAAA,aAAa,EAAEV;AAFhB,SAFa,CAAd;AAOA;;AAEDc,MAAAA,cAAc,CAACO,IAAf,CACCf,IAAI,CAACc,yCAAL,iCAEOjB,aAAa,CAAEG,IAAI,CAACE,IAAP,CAAb,IAA8B,EAFrC,GAGKe,WAHL,GAKC;AACCd,QAAAA,kBAAkB,EAAER,UADrB;AAECS,QAAAA,aAAa,EAAEV;AAFhB,OALD,CADD;AAYA;AACD,GAhDD;AAkDA,SAAO;AACNE,IAAAA,WAAW,EAAXA,WADM;AAENU,IAAAA,eAAe,EAAfA,eAFM;AAGNC,IAAAA,aAAa,EAAbA,aAHM;AAINC,IAAAA,cAAc,EAAdA,cAJM;AAKNC,IAAAA,YAAY,EAAZA;AALM,GAAP;AAOA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect, useDispatch } from '@wordpress/data';\n\nfunction formatTypesSelector( select ) {\n\treturn select( 'core/rich-text' ).getFormatTypes();\n}\n\n/**\n * This hook provides RichText with the `formatTypes` and its derived props from\n * experimental format type settings.\n *\n * @param {Object} $0            Options\n * @param {string} $0.clientId   Block client ID.\n * @param {string} $0.identifier Block attribute.\n */\nexport function useFormatTypes( { clientId, identifier } ) {\n\tconst formatTypes = useSelect( formatTypesSelector, [] );\n\tconst keyedSelected = useSelect(\n\t\t( select ) =>\n\t\t\tformatTypes.reduce( ( accumulator, type ) => {\n\t\t\t\tif ( type.__experimentalGetPropsForEditableTreePreparation ) {\n\t\t\t\t\taccumulator[\n\t\t\t\t\t\ttype.name\n\t\t\t\t\t] = type.__experimentalGetPropsForEditableTreePreparation(\n\t\t\t\t\t\tselect,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn accumulator;\n\t\t\t}, {} ),\n\t\t[ formatTypes, clientId, identifier ]\n\t);\n\tconst dispatch = useDispatch();\n\tconst prepareHandlers = [];\n\tconst valueHandlers = [];\n\tconst changeHandlers = [];\n\tconst dependencies = [];\n\n\tformatTypes.forEach( ( type ) => {\n\t\tif ( type.__experimentalCreatePrepareEditableTree ) {\n\t\t\tconst selected = keyedSelected[ type.name ];\n\t\t\tconst handler = type.__experimentalCreatePrepareEditableTree(\n\t\t\t\tselected,\n\t\t\t\t{\n\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\n\t\t\t\tvalueHandlers.push( handler );\n\t\t\t} else {\n\t\t\t\tprepareHandlers.push( handler );\n\t\t\t}\n\n\t\t\tfor ( const key in selected ) {\n\t\t\t\tdependencies.push( selected[ key ] );\n\t\t\t}\n\t\t}\n\n\t\tif ( type.__experimentalCreateOnChangeEditableValue ) {\n\t\t\tlet dispatchers = {};\n\n\t\t\tif ( type.__experimentalGetPropsForEditableTreeChangeHandler ) {\n\t\t\t\tdispatchers = type.__experimentalGetPropsForEditableTreeChangeHandler(\n\t\t\t\t\tdispatch,\n\t\t\t\t\t{\n\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tchangeHandlers.push(\n\t\t\t\ttype.__experimentalCreateOnChangeEditableValue(\n\t\t\t\t\t{\n\t\t\t\t\t\t...( keyedSelected[ type.name ] || {} ),\n\t\t\t\t\t\t...dispatchers,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t} );\n\n\treturn {\n\t\tformatTypes,\n\t\tprepareHandlers,\n\t\tvalueHandlers,\n\t\tchangeHandlers,\n\t\tdependencies,\n\t};\n}\n"]}