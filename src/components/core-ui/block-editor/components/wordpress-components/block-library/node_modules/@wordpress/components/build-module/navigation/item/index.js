import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
import { noop } from 'lodash';
/**
 * WordPress dependencies
 */

import { Icon, chevronRight } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import Button from '../../button';
import { useNavigationContext } from '../context';
import { ItemBadgeUI, ItemTitleUI, ItemUI } from '../styles/navigation-styles';
import { useNavigationTreeItem } from './use-navigation-tree-item';
import { useNavigationMenuContext } from '../menu/context';
export default function NavigationItem(props) {
  var badge = props.badge,
      children = props.children,
      className = props.className,
      href = props.href,
      item = props.item,
      navigateToMenu = props.navigateToMenu,
      _props$onClick = props.onClick,
      onClick = _props$onClick === void 0 ? noop : _props$onClick,
      title = props.title,
      restProps = _objectWithoutProperties(props, ["badge", "children", "className", "href", "item", "navigateToMenu", "onClick", "title"]);

  useNavigationTreeItem(props);

  var _useNavigationContext = useNavigationContext(),
      activeItem = _useNavigationContext.activeItem,
      setActiveMenu = _useNavigationContext.setActiveMenu;

  var _useNavigationMenuCon = useNavigationMenuContext(),
      isActive = _useNavigationMenuCon.isActive; // If this item is in an inactive menu, then we skip rendering
  // We need to make sure this component gets mounted though
  // To make sure inactive items are included in the navigation tree


  if (!isActive) {
    return null;
  }

  var classes = classnames('components-navigation__item', className, {
    'is-active': item && activeItem === item
  });

  var onItemClick = function onItemClick(event) {
    if (navigateToMenu) {
      setActiveMenu(navigateToMenu);
    }

    onClick(event);
  };

  return createElement(ItemUI, {
    className: classes
  }, children || createElement(Button, _extends({
    href: href,
    onClick: onItemClick
  }, restProps), title && createElement(ItemTitleUI, {
    className: "components-navigation__item-title",
    variant: "body.small",
    as: "span"
  }, title), badge && createElement(ItemBadgeUI, {
    className: "components-navigation__item-badge"
  }, badge), navigateToMenu && createElement(Icon, {
    icon: chevronRight
  })));
}
//# sourceMappingURL=index.js.map