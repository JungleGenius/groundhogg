import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __, _n, sprintf } from '@wordpress/i18n';
import { useState, useMemo, useRef, useEffect } from '@wordpress/element';
import { useInstanceId } from '@wordpress/compose';
import { ENTER, UP, DOWN, ESCAPE } from '@wordpress/keycodes';
import { speak } from '@wordpress/a11y';
/**
 * Internal dependencies
 */

import TokenInput from '../form-token-field/token-input';
import SuggestionsList from '../form-token-field/suggestions-list';
import BaseControl from '../base-control';

function ComboboxControl(_ref) {
  var _currentOption$label;

  var value = _ref.value,
      label = _ref.label,
      options = _ref.options,
      onChange = _ref.onChange,
      onFilterValueChange = _ref.onFilterValueChange,
      hideLabelFromVision = _ref.hideLabelFromVision,
      help = _ref.help,
      _ref$messages = _ref.messages,
      messages = _ref$messages === void 0 ? {
    selected: __('Item selected.')
  } : _ref$messages;
  var instanceId = useInstanceId(ComboboxControl);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      selectedSuggestion = _useState2[0],
      setSelectedSuggestion = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isExpanded = _useState4[0],
      setIsExpanded = _useState4[1];

  var _useState5 = useState(''),
      _useState6 = _slicedToArray(_useState5, 2),
      inputValue = _useState6[0],
      setInputValue = _useState6[1];

  var inputContainer = useRef();
  var currentOption = options.find(function (option) {
    return option.value === value;
  });
  var currentLabel = (_currentOption$label = currentOption === null || currentOption === void 0 ? void 0 : currentOption.label) !== null && _currentOption$label !== void 0 ? _currentOption$label : '';
  var matchingSuggestions = useMemo(function () {
    var startsWithMatch = [];
    var containsMatch = [];
    var match = inputValue.toLocaleLowerCase();
    options.forEach(function (option) {
      var index = option.label.toLocaleLowerCase().indexOf(match);

      if (index === 0) {
        startsWithMatch.push(option);
      } else if (index > 0) {
        containsMatch.push(option);
      }
    });
    return startsWithMatch.concat(containsMatch);
  }, [inputValue, options, value]);

  var onSuggestionSelected = function onSuggestionSelected(newSelectedSuggestion) {
    onChange(newSelectedSuggestion.value);
    speak(messages.selected, 'assertive');
    setSelectedSuggestion(newSelectedSuggestion);
    setInputValue('');
    setIsExpanded(false);
  };

  var handleArrowNavigation = function handleArrowNavigation() {
    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var index = matchingSuggestions.indexOf(selectedSuggestion);
    var nextIndex = index + offset;

    if (nextIndex < 0) {
      nextIndex = matchingSuggestions.length - 1;
    } else if (nextIndex >= matchingSuggestions.length) {
      nextIndex = 0;
    }

    setSelectedSuggestion(matchingSuggestions[nextIndex]);
    setIsExpanded(true);
  };

  var onKeyDown = function onKeyDown(event) {
    var preventDefault = false;

    switch (event.keyCode) {
      case ENTER:
        if (selectedSuggestion) {
          onSuggestionSelected(selectedSuggestion);
          preventDefault = true;
        }

        break;

      case UP:
        handleArrowNavigation(-1);
        preventDefault = true;
        break;

      case DOWN:
        handleArrowNavigation(1);
        preventDefault = true;
        break;

      case ESCAPE:
        setIsExpanded(false);
        setSelectedSuggestion(null);
        preventDefault = true;
        event.stopPropagation();
        break;

      default:
        break;
    }

    if (preventDefault) {
      event.preventDefault();
    }
  };

  var onFocus = function onFocus() {
    // Avoid focus loss when touching the container.
    // TODO: TokenInput should preferably forward ref
    inputContainer.current.input.focus();
    setIsExpanded(true);
    onFilterValueChange('');
  };

  var onBlur = function onBlur() {
    setIsExpanded(false);
  };

  var onInputChange = function onInputChange(event) {
    var text = event.value;
    setInputValue(text);
    onFilterValueChange(text);
    setIsExpanded(true);
  }; // Announcements


  useEffect(function () {
    var hasMatchingSuggestions = matchingSuggestions.length > 0;

    if (isExpanded) {
      var message = hasMatchingSuggestions ? sprintf(
      /* translators: %d: number of results. */
      _n('%d result found, use up and down arrow keys to navigate.', '%d results found, use up and down arrow keys to navigate.', matchingSuggestions.length), matchingSuggestions.length) : __('No results.');
      speak(message, 'assertive');
    }
  }, [matchingSuggestions, isExpanded]); // Disable reason: There is no appropriate role which describes the
  // input container intended accessible usability.
  // TODO: Refactor click detection to use blur to stop propagation.

  /* eslint-disable jsx-a11y/no-static-element-interactions */

  return createElement(BaseControl, {
    className: "components-combobox-control",
    tabIndex: "-1",
    label: label,
    id: "components-form-token-input-".concat(instanceId),
    hideLabelFromVision: hideLabelFromVision,
    help: help
  }, createElement("div", {
    className: "components-combobox-control__suggestions-container",
    tabIndex: "-1",
    onFocus: onFocus,
    onKeyDown: onKeyDown
  }, createElement(TokenInput, {
    className: "components-combobox-control__input",
    instanceId: instanceId,
    ref: inputContainer,
    value: isExpanded ? inputValue : currentLabel,
    onBlur: onBlur,
    isExpanded: isExpanded,
    selectedSuggestionIndex: matchingSuggestions.indexOf(selectedSuggestion),
    onChange: onInputChange
  }), isExpanded && createElement(SuggestionsList, {
    instanceId: instanceId,
    match: {
      label: inputValue
    },
    displayTransform: function displayTransform(suggestion) {
      return suggestion.label;
    },
    suggestions: matchingSuggestions,
    selectedIndex: matchingSuggestions.indexOf(selectedSuggestion),
    onHover: setSelectedSuggestion,
    onSelect: onSuggestionSelected,
    scrollIntoView: true
  })));
  /* eslint-enable jsx-a11y/no-static-element-interactions */
}

export default ComboboxControl;
//# sourceMappingURL=index.js.map