<?php

namespace Groundhogg\Admin\Funnels;

use Groundhogg\Admin\Admin_Page;
use Groundhogg\Base_Object;
use Groundhogg\Funnel;
use Groundhogg\Library;
use function Groundhogg\dashicon;
use function Groundhogg\get_array_var;
use function Groundhogg\get_contactdata;
use function Groundhogg\get_db;
use function Groundhogg\get_post_var;
use function Groundhogg\get_store_products;
use function Groundhogg\enqueue_groundhogg_modal;
use function Groundhogg\get_request_var;
use function Groundhogg\get_upload_wp_error;
use function Groundhogg\get_url_var;
use function Groundhogg\html;
use function Groundhogg\is_option_enabled;
use Groundhogg\Plugin;
use Groundhogg\Contact_Query;
use Groundhogg\Step;
use function Groundhogg\is_white_labeled;
use function Groundhogg\isset_not_empty;

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}


/**
 * View Funnels
 *
 * Allow the user to view & edit the funnels
 *
 * @since       0.1
 * @subpackage  Includes/Funnels
 * @copyright   Copyright (c) 2018, Adrian Tobey
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License
 * @package     groundhogg
 */
class Funnels_Page extends Admin_Page {

	protected function add_ajax_actions() {
	}

	public function admin_title( $admin_title, $title ) {
		switch ( $this->get_current_action() ) {
			case 'add':
				$admin_title = sprintf( "%s &lsaquo; %s", __( 'Add' ), $admin_title );
				break;
			case 'edit':
				$funnel_id = get_request_var( 'funnel' );
				$funnel    = new Funnel( absint( $funnel_id ) );

				if ( $funnel->exists() ) {
					$admin_title = sprintf( "%s &lsaquo; %s &lsaquo; %s", $funnel->get_title(), __( 'Edit' ), $admin_title );
				}

				break;
		}

		return $admin_title;
	}

	/**
	 * Get the current screen title based on the action
	 */
	public function get_title() {
		switch ( $this->get_current_action() ) {
			case 'add':
				return _ex( 'Add Funnel', 'page_title', 'groundhogg' );
				break;
			case 'edit':
				return _ex( 'Edit Funnel', 'page_title', 'groundhogg' );
				break;
			case 'funnel_settings':
				return _ex( 'Funnel Settings', 'page_title', 'groundhogg' );
				break;
			case 'view':
			default:
				return _ex( 'Funnels', 'page_title', 'groundhogg' );
		}
	}

	protected function get_title_actions() {

		if ( $this->get_current_action() === 'funnel_settings' ) {
			return [];
		}

		return parent::get_title_actions(); // TODO: Change the autogenerated stub
	}

	/**
	 * Redirect to the add screen if no funnels are present.
	 */
	public function redirect_to_add() {
		if ( get_db( 'funnels' )->count() == 0 ) {
			die( wp_redirect( $this->admin_url( [ 'action' => 'add' ] ) ) );
		}
	}

	protected function add_additional_actions() {
//		$this->setup_reporting();

		if ( $this->is_current_page() && $this->get_current_action() === 'view' ) {
			add_action( 'admin_init', [ $this, 'redirect_to_add' ] );
		}

		if ( $this->is_current_page() && $this->get_current_action() === 'edit' ) {
			add_action( 'in_admin_header', array( $this, 'prevent_notices' ) );
			/* just need to enqueue it... */
			enqueue_groundhogg_modal();
		}

		add_action( "groundhogg/admin/gh_funnels/before", function () {
			if ( ! get_db( 'funnels' )->count( [ 'status' => 'active' ] ) ) {
				Plugin::$instance->notices->add( 'no_active_funnels', sprintf( '%s %s', __( 'You have no active funnels.' ), html()->e( 'a', [
					'href' => admin_url( 'admin.php?page=gh_funnels&status=inactive' ),
				], __( 'Activate a funnel!' ) ) ), 'warning' );
			}
		} );
	}

	public function get_slug() {
		return 'gh_funnels';
	}

	public function get_name() {
		return _x( 'Funnels', 'page_title', 'groundhogg' );
	}

	public function get_cap() {
		return 'edit_funnels';
	}

	public function get_item_type() {
		return 'funnel';
	}

	public function get_priority() {
		return 30;
	}

	/**
	 * enqueue editor scripts
	 */
	public function scripts() {

		switch ( $this->get_current_action() ) {
			case 'edit':

				$funnel = new Funnel( get_url_var( 'funnel' ) );

				wp_enqueue_editor();
				wp_enqueue_style( 'groundhogg-admin-email-editor' );
				wp_enqueue_style( 'groundhogg-admin-funnel-editor' );
				wp_enqueue_script( 'groundhogg-admin-funnel-editor' );
				wp_localize_script( 'groundhogg-admin-funnel-editor', 'GroundhoggFunnel', [
					'funnel'    => $funnel,
					'stepTypes' => Plugin::instance()->step_manager->get_elements()
				] );

//				wp_enqueue_script( 'groundhogg-admin-email-editor-step' );

				do_action( 'groundhogg_funnel_scripts', $funnel );

				break;
			case 'add':

				$library = new Library();

				wp_enqueue_style( 'groundhogg-admin-funnel-editor' );
				wp_enqueue_script( 'groundhogg-admin-add-funnel' );
				wp_localize_script( 'groundhogg-admin-add-funnel', 'AddFunnel', [
					'stepTypes' => Plugin::instance()->step_manager->get_elements(),
					'templates' => $library->get_funnel_templates()
				] );
				wp_enqueue_style( 'groundhogg-admin' );
				wp_enqueue_style( 'groundhogg-admin-element' );

				break;

		}
	}

	/**
	 * Delete a funnel
	 *
	 * @return false
	 */
	public function process_delete() {
		if ( ! current_user_can( 'delete_funnels' ) ) {
			$this->wp_die_no_access();
		}

		foreach ( $this->get_items() as $id ) {
			$funnel = new Funnel( $id );
			$funnel->delete();
		}

		$this->add_notice(
			esc_attr( 'deleted' ),
			sprintf( _nx( 'Deleted %d funnel', 'Deleted %d funnels', count( $this->get_items() ), 'notice', 'groundhogg' ), count( $this->get_items() ) ),
			'success'
		);

		return false;
	}

	/**
	 * Restore an archived funnel
	 *
	 * @return false
	 */
	public function process_restore() {
		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		foreach ( $this->get_items() as $id ) {
			$funnel = new Funnel( $id );
			$funnel->update( [ 'status' => 'inactive' ] );
		}

		$this->add_notice(
			esc_attr( 'restored' ),
			sprintf( _nx( 'Restored %d funnel', 'Deleted %d funnels', count( $this->get_items() ), 'notice', 'groundhogg' ), count( $this->get_items() ) ),
			'success'
		);

		return false;
	}

	/**
	 * Duplicate a funnel
	 *
	 * @return false|string
	 */
	public function process_duplicate() {
		if ( ! current_user_can( 'add_funnels' ) ) {
			$this->wp_die_no_access();
		}

		foreach ( $this->get_items() as $id ) {

			$funnel = new Funnel( $id );

			if ( ! $funnel->exists() ) {
				continue;
			}

			$json = $funnel->export();

			$new_funnel = new Funnel();
			$id         = $new_funnel->legacy_import( $json );

			$this->add_notice(
				esc_attr( 'duplicated' ),
				_x( 'Funnel duplicated', 'notice', 'groundhogg' ),
				'success'
			);

			$edit_url = $this->admin_url( [ 'action' => 'edit', 'funnel' => $id ] );

//			if ( is_option_enabled( 'gh_use_builder_version_2' ) ) {
//				$edit_url = add_query_arg( [ 'version' => '2' ], $edit_url );
//			}

			return $edit_url;
		}

		return false;
	}

	/**
	 * Archive a funnel
	 *
	 * @return bool
	 */
	public function process_archive() {
		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		foreach ( $this->get_items() as $id ) {
			$funnel = new Funnel( $id );
			$funnel->update( [ 'status' => 'archived' ] );
		}

		$this->add_notice(
			esc_attr( 'archived' ),
			sprintf( _nx(
				'Archived %d funnel',
				'Archived %d funnels',
				count( $this->get_items() ),
				'notice', 'groundhogg' ),
				count( $this->get_items() ) ),
			'success'
		);

		return false;
	}


	/**
	 * Process add action for the funnel.
	 *
	 * @return string|\WP_Error
	 */
	public function process_add() {

		if ( ! current_user_can( 'add_funnels' ) ) {
			$this->wp_die_no_access();
		}

		$funnel_id = false;

		if ( isset( $_POST['funnel_template'] ) ) {

			$template_id = get_request_var( 'funnel_template' );
			$library     = new Library();
			$template    = $library->get_funnel_template( $template_id );
			$json        = json_encode( $template->import_json );
			$funnel_id   = $this->import_funnel( $json );

		} else if ( isset( $_POST['funnel_id'] ) ) {

			$from_funnel = absint( get_request_var( 'funnel_id' ) );
			$from_funnel = new Funnel( $from_funnel );

			$json      = $from_funnel->export();
			$funnel_id = $this->import_funnel( $json );

		} else if ( isset( $_FILES['funnel_template'] ) ) {
			$file = get_array_var( $_FILES, 'funnel_template' );

			$file = map_deep( $file, 'sanitize_text_field' );

			$error = get_upload_wp_error( $file );

			if ( is_wp_error( $error ) ) {
				return $error;
			}

			$validate = wp_check_filetype( $file['name'], [ 'funnel' => 'text/plain' ] );

			if ( $validate['ext'] !== 'funnel' || $validate['text/plain'] ) {
				return new \WP_Error( 'invalid_template', sprintf( 'Please upload a valid funnel template. Expected mime type of <i>text/plain</i> but got <i>%s</i>', esc_html( $file['type'] ) ) );
			}

			$json = file_get_contents( $file['tmp_name'] );
			$json = json_decode( $json, true );

			if ( ! $json ) {
				return new \WP_Error( 'invalid_json', 'Funnel template has invalid JSON.' );
			}

			$funnel_id = $this->import_funnel( $json );

		} else if ( $json = get_request_var( 'funnel_json' ) ) {

			$json = json_decode( $json, true );

			if ( ! $json ) {
				return new \WP_Error( 'invalid_json', 'Invalid JSON provided.' );
			}

			$funnel_id = $this->import_funnel( $json );
		}

		if ( is_wp_error( $funnel_id ) ) {
			return $funnel_id;
		}

		if ( ! isset( $funnel_id ) || empty( $funnel_id ) ) {
			return new \WP_Error( 'error', __( 'Could not create funnel.', 'groundhogg' ) );
		}

		$this->add_notice( esc_attr( 'created' ), _x( 'Funnel created', 'notice', 'groundhogg' ), 'success' );

		$edit_url = admin_url( 'admin.php?page=gh_funnels&action=edit&funnel=' . $funnel_id );

//		if ( is_option_enabled( 'gh_use_builder_version_2' ) ) {
//			$edit_url = add_query_arg( [ 'version' => '2' ], $edit_url );
//		}

		return $edit_url;

	}

	/**
	 * Deconstructs the given array and builds a full funnel.
	 *
	 * @param $import array|string
	 *
	 * @return bool|int whether the import was successful or the ID
	 */
	public function import_funnel( $import = array() ) {

		if ( ! current_user_can( 'import_funnels' ) ) {
			$this->wp_die_no_access();
		}

		$funnel = new Funnel();

		return $funnel->legacy_import( $import );
	}

	/**
	 * Quickly add contacts to a funnel VIA the funnel editor UI
	 */
	public function add_contacts_to_funnel() {

		if ( ! current_user_can( 'edit_contacts' ) ) {
			$this->wp_die_no_access();
		}

		$tags = array_map( 'intval', get_post_var( 'tags' ) );

		$query    = new Contact_Query();
		$contacts = $query->query( array( 'tags_include' => $tags ) );

		$step = new Step( intval( get_post_var( 'step' ) ) );

		foreach ( $contacts as $contact ) {

			$contact = get_contactdata( $contact->ID );
			$step->enqueue( $contact );

		}

		$this->add_notice( 'contacts-added', sprintf( _nx( '%d contact added to funnel', '%d contacts added to funnel', count( $contacts ), 'notice', 'groundhogg' ), count( $contacts ) ), 'success' );

		ob_start();

		$this->add_notice();

		$content = ob_get_clean();

		wp_die( $content );

	}

	public function page() {

		switch ( $this->get_current_action() ) {
			case 'edit':
				$this->edit();

				return;
			case 'add':
				$this->add();

				return;
		}

		parent::page();
	}

	public function edit() {
		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		include __DIR__ . '/editor/view.php';
	}

	public function add() {
		if ( ! current_user_can( 'add_funnels' ) ) {
			$this->wp_die_no_access();
		}

		include __DIR__ . '/add.php';
	}

	public function view() {
		if ( ! class_exists( 'Funnels_Table' ) ) {
			include __DIR__ . '/funnels-table.php';
		}

		$funnels_table = new Funnels_Table();

		$funnels_table->views();
		$this->search_form( __( 'Search Funnels', 'groundhogg' ) );
		?>
		<form method="post" class="wp-clearfix">
			<?php $funnels_table->prepare_items(); ?>
			<?php $funnels_table->display(); ?>
		</form>
		<?php
	}

	public function add_to_funnel() {
		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		include __DIR__ . '/add-to-funnel.php';
	}

	public function process_add_to_funnel() {
		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		$query   = get_post_var( 'query' );
		$step_id = absint( get_post_var( 'step' ) );

		$query['step_id'] = $step_id;

		$query = array_filter( $query );

		Plugin::$instance->bulk_jobs->add_contacts_to_funnel->start( $query );
	}

	public function funnel_settings() {

		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		include __DIR__ . '/funnel-settings.php';
	}

	public function process_funnel_settings() {

		if ( ! current_user_can( 'edit_funnels' ) ) {
			$this->wp_die_no_access();
		}

		$funnel_id          = absint( get_request_var( 'funnel' ) );
		$conversion_step_id = absint( get_post_var( 'conversion_step_id' ) );

		$funnel = new Funnel( $funnel_id );

		$funnel->update( [
			'conversion_step' => $conversion_step_id
		] );


		$this->add_notice( 'success', __( 'Settings saved!', 'groundhogg' ) );

		// Stay on page
		return true;
	}

	/**
	 * Prevent notices from other plugins appearing on the edit funnel screen as the break the format.
	 */
	public function prevent_notices() {
		remove_all_actions( 'network_admin_notices' );
		remove_all_actions( 'user_admin_notices' );
		remove_all_actions( 'admin_notices' );
	}

	public function help() {
		// TODO: Implement help() method.
	}
}